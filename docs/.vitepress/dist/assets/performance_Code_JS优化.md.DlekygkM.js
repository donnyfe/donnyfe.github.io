import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"JS 优化","description":"","frontmatter":{},"headers":[],"relativePath":"performance/Code/JS优化.md","filePath":"performance/Code/JS优化.md"}'),o={name:"performance/Code/JS优化.md"};function e(t,s,c,r,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="js-优化" tabindex="-1">JS 优化 <a class="header-anchor" href="#js-优化" aria-label="Permalink to &quot;JS 优化&quot;">​</a></h1><h2 id="dom-操作优化" tabindex="-1">DOM 操作优化 <a class="header-anchor" href="#dom-操作优化" aria-label="Permalink to &quot;DOM 操作优化&quot;">​</a></h2><h3 id="减少-dom-操作频率" tabindex="-1">减少 DOM 操作频率 <a class="header-anchor" href="#减少-dom-操作频率" aria-label="Permalink to &quot;减少 DOM 操作频率&quot;">​</a></h3><ul><li>使用 DocumentFragment 批量操作 DOM</li><li>使用 innerHTML 替代大量 appendChild</li><li>使用 cloneNode 复制节点而不是重新创建</li><li>使用虚拟 DOM 技术(如 Vue/React)</li></ul><h3 id="使用-documentfragment-批量操作-dom" tabindex="-1">使用 DocumentFragment 批量操作 DOM <a class="header-anchor" href="#使用-documentfragment-批量操作-dom" aria-label="Permalink to &quot;使用 DocumentFragment 批量操作 DOM&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 DocumentFragment 批量操作</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> fragment</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createDocumentFragment</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> items</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;item1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;item2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;item3&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">items.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	const</span><span style="color:#005CC5;"> li</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	li.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item</span></span>
<span class="line"><span style="color:#24292E;">	fragment.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(li)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 一次性添加到 DOM</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(fragment)</span></span></code></pre></div><h3 id="使用-innerhtml-替代大量-appendchild" tabindex="-1">使用 innerHTML 替代大量 appendChild <a class="header-anchor" href="#使用-innerhtml-替代大量-appendchild" aria-label="Permalink to &quot;使用 innerHTML 替代大量 appendChild&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 innerHTML 替代大量 appendChild</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;item1&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;item2&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;item3&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span></code></pre></div><h3 id="使用-clonenode-复制节点而不是重新创建" tabindex="-1">使用 cloneNode 复制节点而不是重新创建 <a class="header-anchor" href="#使用-clonenode-复制节点而不是重新创建" aria-label="Permalink to &quot;使用 cloneNode 复制节点而不是重新创建&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 cloneNode 复制节点而不是重新创建</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> template</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#template&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> clone</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> template.</span><span style="color:#6F42C1;">cloneNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="避免重排-reflow-和重绘-repaint" tabindex="-1">避免重排(reflow)和重绘(repaint) <a class="header-anchor" href="#避免重排-reflow-和重绘-repaint" aria-label="Permalink to &quot;避免重排(reflow)和重绘(repaint)&quot;">​</a></h3><ul><li>缓存 DOM 查询结果</li><li>批量修改样式</li><li>使用 transform/opacity 等性能友好的属性</li><li>使用 position: absolute/fixed 脱离文档流</li><li>避免频繁读取会触发重排的属性(如 offsetWidth)</li></ul><h4 id="批量修改样式" tabindex="-1">批量修改样式 <a class="header-anchor" href="#批量修改样式" aria-label="Permalink to &quot;批量修改样式&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 批量修改样式</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> el</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;target&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">el.style.cssText </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;width: 100px; height: 100px; background: red;&#39;</span></span></code></pre></div><h4 id="使用-transform-opacity-等性能友好的属性" tabindex="-1">使用 transform/opacity 等性能友好的属性 <a class="header-anchor" href="#使用-transform-opacity-等性能友好的属性" aria-label="Permalink to &quot;使用 transform/opacity 等性能友好的属性&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 transform 代替 top/left</span></span>
<span class="line"><span style="color:#24292E;">el.style.transform </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;translate(10px, 20px)&#39;</span></span></code></pre></div><h2 id="执行优化" tabindex="-1">执行优化 <a class="header-anchor" href="#执行优化" aria-label="Permalink to &quot;执行优化&quot;">​</a></h2><ul><li>避免长任务阻塞主线程</li><li>使用 Web Workers 处理计算密集型任务</li><li>使用 requestIdleCallback 处理非关键任务</li><li>合理使用防抖和节流</li></ul><h2 id="内存优化" tabindex="-1">内存优化 <a class="header-anchor" href="#内存优化" aria-label="Permalink to &quot;内存优化&quot;">​</a></h2><ul><li>及时清除定时器和事件监听</li><li>避免闭包导致的内存泄漏</li><li>使用 WeakMap/WeakSet 存储对象引用</li><li>合理使用缓存策略</li></ul><h2 id="代码分割和懒加载" tabindex="-1">代码分割和懒加载 <a class="header-anchor" href="#代码分割和懒加载" aria-label="Permalink to &quot;代码分割和懒加载&quot;">​</a></h2><ul><li>路由级别代码分割</li><li>组件级别动态导入</li><li>第三方库按需加载</li></ul><h2 id="异步更新优化" tabindex="-1">异步更新优化 <a class="header-anchor" href="#异步更新优化" aria-label="Permalink to &quot;异步更新优化&quot;">​</a></h2><ul><li>使用 requestIdleCallback 处理非关键任务</li><li>使用 Web Workers 处理耗时计算</li><li>使用 IntersectionObserver 优化滚动监听</li><li>使用 MutationObserver 监听 DOM 变化</li><li>使用 requestAnimationFrame 调度视图更新</li></ul><h3 id="使用-requestanimationframe-调度视图更新" tabindex="-1">使用 requestAnimationFrame 调度视图更新 <a class="header-anchor" href="#使用-requestanimationframe-调度视图更新" aria-label="Permalink to &quot;使用 requestAnimationFrame 调度视图更新&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 requestAnimationFrame 调度视图更新</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updateView</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">	requestAnimationFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">		// 更新视图</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="事件处理优化" tabindex="-1">事件处理优化 <a class="header-anchor" href="#事件处理优化" aria-label="Permalink to &quot;事件处理优化&quot;">​</a></h2><ul><li>及时解绑不需要的事件</li><li>避免频繁的内联事件绑定</li></ul><h3 id="合理使用事件委托-event-delegation" tabindex="-1">合理使用事件委托(Event Delegation) <a class="header-anchor" href="#合理使用事件委托-event-delegation" aria-label="Permalink to &quot;合理使用事件委托(Event Delegation)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 合理使用事件委托</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">e</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	// 处理 li 元素点击</span></span>
<span class="line"><span style="color:#D73A49;">	if</span><span style="color:#24292E;"> (e.target.tagName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;LI&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e.target.textContent)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="使用防抖-debounce-技术" tabindex="-1">使用防抖(debounce)技术 <a class="header-anchor" href="#使用防抖-debounce-技术" aria-label="Permalink to &quot;使用防抖(debounce)技术&quot;">​</a></h3><p>防抖用于控制函数在短时间内被频繁调用时的执行频率。其核心思想是:在一定时间内，只执行最后一次调用。</p><p><strong>工作原理：</strong></p><ol><li>当触发事件时，设置一个延迟执行的定时器</li><li>如果在延迟时间内再次触发事件，则清除原定时器，重新设置新的定时器</li><li>直到延迟时间内没有新的事件触发，才最终执行一次函数</li></ol><p><strong>防抖的优势：</strong></p><ul><li><strong>性能优化</strong>: 减少函数的执行频率，避免频繁操作导致的性能问题</li><li><strong>资源节约</strong>: 减少不必要的服务器请求和计算</li><li><strong>用户体验</strong>: 避免频繁更新导致的页面抖动</li></ul><p><strong>使用场景：</strong></p><ul><li><strong>输入框搜索</strong>: 用户输入停止后再发起请求</li><li><strong>窗口调整</strong>: resize 事件触发后再执行计算</li><li><strong>表单验证</strong>: 输入停止后再进行验证</li><li><strong>按钮提交</strong>: 防止重复提交</li><li><strong>滚动事件</strong>: scroll 事件触发后再执行相关操作</li></ul><p><strong>防抖实现：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 防抖</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">		clearTimeout</span><span style="color:#24292E;">(timer)</span></span>
<span class="line"><span style="color:#24292E;">		timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args)</span></span>
<span class="line"><span style="color:#24292E;">		}, delay)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 防抖函数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Function}</span><span style="color:#24292E;"> fn</span><span style="color:#6A737D;"> 需要防抖的函数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {number}</span><span style="color:#24292E;"> delay</span><span style="color:#6A737D;"> 延迟时间(ms)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#24292E;"> immediate</span><span style="color:#6A737D;"> 是否立即执行</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {Function}</span><span style="color:#6A737D;"> 经过防抖处理的函数</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 300</span><span style="color:#24292E;">, </span><span style="color:#E36209;">immediate</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">		// 清除之前的定时器</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (timer) </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timer)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">		// 立即执行</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (immediate </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">timer) {</span></span>
<span class="line"><span style="color:#24292E;">			fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">		// 设置新的定时器</span></span>
<span class="line"><span style="color:#24292E;">		timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">			if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">immediate) {</span></span>
<span class="line"><span style="color:#24292E;">				fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">		}, delay)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> handleSearch</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;搜索:&#39;</span><span style="color:#24292E;">, value)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听输入框</span></span>
<span class="line"><span style="color:#24292E;">searchInput.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;input&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">e</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">	handleSearch</span><span style="color:#24292E;">(e.target.value)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="使用节流-throttle-技术" tabindex="-1">使用节流(throttle)技术 <a class="header-anchor" href="#使用节流-throttle-技术" aria-label="Permalink to &quot;使用节流(throttle)技术&quot;">​</a></h3><p>节流用于限制函数在一定时间内被调用的频率。其核心思想是:在指定的时间间隔内，函数只能被执行一次。</p><p><strong>工作原理：</strong></p><ol><li>设置一个定时器，在指定的时间间隔内，函数只能被执行一次</li><li>如果在时间间隔内再次触发事件，则忽略该事件，直到时间间隔结束</li></ol><p><strong>节流的优势：</strong></p><p>和防抖优势同。</p><p><strong>使用场景：</strong></p><ul><li>滚动事件处理: 控制滚动事件触发频率</li><li>窗口调整: resize 事件处理</li><li>按钮点击: 防止重复提交</li><li>API 调用: 限制接口请求频率</li><li>游戏中的射击: 限制发射子弹的频率</li></ul><p><strong>节流实现：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 节流</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timer) {</span></span>
<span class="line"><span style="color:#24292E;">			timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args)</span></span>
<span class="line"><span style="color:#24292E;">				timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">			}, delay)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 节流函数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#24292E;"> fn</span><span style="color:#6A737D;"> 需要节流的函数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#24292E;"> delay</span><span style="color:#6A737D;"> 延迟时间(ms)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> 经过节流处理的函数</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> throttle</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Function</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 300</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> timer</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> NodeJS</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Timeout</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#6A737D;">		// 如果已经存在定时器,直接返回</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (timer) </span><span style="color:#D73A49;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">		// 执行函数</span></span>
<span class="line"><span style="color:#24292E;">		fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">		// 设置定时器</span></span>
<span class="line"><span style="color:#24292E;">		timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">		}, delay)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> handleScroll</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> throttle</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;页面滚动&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听滚动事件</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;scroll&#39;</span><span style="color:#24292E;">, handleScroll)</span></span></code></pre></div><h2 id="列表渲染优化" tabindex="-1">列表渲染优化 <a class="header-anchor" href="#列表渲染优化" aria-label="Permalink to &quot;列表渲染优化&quot;">​</a></h2><ul><li>使用虚拟列表处理大数据渲染</li><li>使用 DocumentFragment 批量插入</li><li>采用分页或无限滚动加载</li><li>key 的合理使用</li></ul><h3 id="虚拟列表实现原理" tabindex="-1">虚拟列表实现原理 <a class="header-anchor" href="#虚拟列表实现原理" aria-label="Permalink to &quot;虚拟列表实现原理&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 虚拟列表实现</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> VirtualList</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.itemHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.itemHeight</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.container</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">		// 计算可视区域内的元素数量 = 可视区域高度/单个元素高度</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.visibleCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">ceil</span><span style="color:#24292E;">(container.clientHeight </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> itemHeight)</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.startIndex </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.endIndex </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.startIndex </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.visibleCount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">	render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> fragment</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createDocumentFragment</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> visibleItems</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.items.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.startIndex, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.endIndex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		visibleItems.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">			const</span><span style="color:#005CC5;"> div</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			div.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item</span></span>
<span class="line"><span style="color:#24292E;">			fragment.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(div)</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.container.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.container.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(fragment)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,54)]))}const u=n(o,[["render",e]]);export{E as __pageData,u as default};
