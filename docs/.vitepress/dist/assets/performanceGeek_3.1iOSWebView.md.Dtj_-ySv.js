import{_ as i,c as a,o as l,ag as r}from"./chunks/framework.DPDPlp3K.js";const s=JSON.parse('{"title":"3.1 iOSWebView","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/3.1iOSWebView.md","filePath":"performanceGeek/3.1iOSWebView.md"}'),o={name:"performanceGeek/3.1iOSWebView.md"};function w(t,e,b,n,W,h){return l(),a("div",null,e[0]||(e[0]=[r('<h1 id="_3-1-ioswebview" tabindex="-1">3.1 iOSWebView <a class="header-anchor" href="#_3-1-ioswebview" aria-label="Permalink to &quot;3.1 iOSWebView&quot;">​</a></h1><h2 id="uiwebview" tabindex="-1">UIWebView <a class="header-anchor" href="#uiwebview" aria-label="Permalink to &quot;UIWebView&quot;">​</a></h2><h3 id="uiwebview优点" tabindex="-1">UIWebView优点 <a class="header-anchor" href="#uiwebview优点" aria-label="Permalink to &quot;UIWebView优点&quot;">​</a></h3><ol><li>从iOS2 开始就作为App内展示 Web 内容的容器</li><li>排版布局能力强</li></ol><h3 id="uiwebview不足" tabindex="-1">UIWebView不足 <a class="header-anchor" href="#uiwebview不足" aria-label="Permalink to &quot;UIWebView不足&quot;">​</a></h3><ol><li>内存泄露</li><li>极高内存峰值</li><li>Touch Delay(300ms延迟)</li><li>JavaScript 的运行性能和通信限制</li><li>2018年iOS 12以后已经被标记为Deprecated不再维护</li></ol><h2 id="wkwebview" tabindex="-1">WKWebView <a class="header-anchor" href="#wkwebview" aria-label="Permalink to &quot;WKWebView&quot;">​</a></h2><h3 id="wkwebview优点" tabindex="-1">WKWebView优点 <a class="header-anchor" href="#wkwebview优点" aria-label="Permalink to &quot;WKWebView优点&quot;">​</a></h3><ol><li>苹果在WWDC2014上推出的新一代WebView组件</li><li>WKWebView的内存开销比UIWebView 小很多</li><li>在性能、稳定性、占用内存方面有很大提升</li><li>高达 60fps 的滚动刷新率</li><li>自身就支持了右滑返回手势</li><li>支持了更多的HTML 的属性</li><li>内存占用是UIWebView 的1/4~1/3</li><li>加载速度比UIWebView提升了一倍左右</li><li>更为细致地拆分了UIWebViewDelegate 中的方法</li><li>允许javaScript的Nitro库加载并使用(UIWebView中限制)大大提高了页面JS 执行速度</li><li>可以和JS 直接互调函数，不像UIWebView需要第三方库WebViewJavaScriptBridge来协 助处理和JS 的交互</li></ol><h3 id="wkwebview不足" tabindex="-1">WKWebView不足 <a class="header-anchor" href="#wkwebview不足" aria-label="Permalink to &quot;WKWebView不足&quot;">​</a></h3><ol><li>不支持页面缓存，需要自己注入Co okie，而 UIWebView是自动注入Cookie</li><li>无法发送 POST 参数问题</li></ol>',11)]))}const d=i(o,[["render",w]]);export{s as __pageData,d as default};
