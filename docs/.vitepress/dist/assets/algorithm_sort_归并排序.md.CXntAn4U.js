import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"归并排序 Merge","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/归并排序.md","filePath":"algorithm/sort/归并排序.md"}'),o={name:"algorithm/sort/归并排序.md"};function e(t,s,r,c,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="归并排序-merge" tabindex="-1">归并排序 Merge <a class="header-anchor" href="#归并排序-merge" aria-label="Permalink to &quot;归并排序 Merge&quot;">​</a></h1><p>冯·诺伊曼在1954年为了检验EDVAC计算机指令代码的适用性以及评价他所建议的计算机组织的优点，编写了内部归并排序程序</p><ul><li>算法策略: 分治法</li><li>时间复杂度: 平均: O(logn)、最好: O(logn)、最坏: O(logn)</li><li>空间复杂度: O(n)</li><li>稳定性: 稳定(排序后2个相等键值的顺序和排序之前它们的顺序相同)</li><li>排序方式: out-place(占用额外内存)</li><li>特点： <ul><li>采用分治思想</li><li>将数组分成两半，递归排序</li><li>合并两个有序数组</li><li>适合处理大规模数据</li></ul></li></ul><blockquote><p>注: 表现比选择排序好</p></blockquote><h2 id="排序原理" tabindex="-1">排序原理 <a class="header-anchor" href="#排序原理" aria-label="Permalink to &quot;排序原理&quot;">​</a></h2><ol><li><p>分：将一个大数组分为两个小数组， 一直往小了分直到划分后的数组长度为1时停止，此时将每一个子数组视为有序子序列。</p></li><li><p>治：将两个有序的子数组合并为更大的有序的数组直至合并成的数组为整个序列。</p></li></ol><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//采用自上而下的递归方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> mergeSort</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#6A737D;">    // 递归退出条件</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> &lt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> /</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, middle),</span></span>
<span class="line"><span style="color:#24292E;">        right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(middle);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#6F42C1;"> merge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mergeSort</span><span style="color:#24292E;">(left), </span><span style="color:#6F42C1;">mergeSort</span><span style="color:#24292E;">(right));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> merge</span><span style="color:#24292E;">(</span><span style="color:#E36209;">left</span><span style="color:#24292E;">, </span><span style="color:#E36209;">right</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;"> (left.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> right.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (left[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> right[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(left.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(right.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;"> (left.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(left.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;"> (right.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(right.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,8)]))}const C=n(o,[["render",e]]);export{h as __pageData,C as default};
