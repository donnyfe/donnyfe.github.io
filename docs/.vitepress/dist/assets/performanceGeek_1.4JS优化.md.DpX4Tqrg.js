import{_ as a,c as e,o as i,ag as o}from"./chunks/framework.DPDPlp3K.js";const S=JSON.parse('{"title":"1.4 JS优化","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/1.4JS优化.md","filePath":"performanceGeek/1.4JS优化.md"}'),t={name:"performanceGeek/1.4JS优化.md"};function r(n,l,s,u,d,h){return i(),e("div",null,l[0]||(l[0]=[o('<h1 id="_1-4-js优化" tabindex="-1">1.4 JS优化 <a class="header-anchor" href="#_1-4-js优化" aria-label="Permalink to &quot;1.4 JS优化&quot;">​</a></h1><h2 id="优化原则" tabindex="-1">优化原则 <a class="header-anchor" href="#优化原则" aria-label="Permalink to &quot;优化原则&quot;">​</a></h2><p>JS优化总体原则：</p><ul><li>当需要时才优化</li><li>考虑可维护性</li></ul><h2 id="提升文件加载性能" tabindex="-1">提升文件加载性能 <a class="header-anchor" href="#提升文件加载性能" aria-label="Permalink to &quot;提升文件加载性能&quot;">​</a></h2><ul><li>加载元素的顺序CSS文件放在<code>&lt;head&gt;</code>里，JS文件放在<code>&lt;body&gt;</code>里。</li></ul><h2 id="js变量和函数优化" tabindex="-1">JS变量和函数优化 <a class="header-anchor" href="#js变量和函数优化" aria-label="Permalink to &quot;JS变量和函数优化&quot;">​</a></h2><ul><li>尽量使用id选择器</li><li>尽量避免使用 eval</li><li>JS 函数尽可能保持简洁</li><li>使用事件节流函数</li><li>使用事件委托</li></ul><h2 id="js-动画优化" tabindex="-1">JS 动画优化 <a class="header-anchor" href="#js-动画优化" aria-label="Permalink to &quot;JS 动画优化&quot;">​</a></h2><ul><li>避免添加大量 JS 动画</li><li>尽量使用 CSS3 动画</li><li>尽量使用 Canvas 动画</li><li>合理使用requestAnimationFrame 动画代替setTimeout、setInterval <ul><li>requestAnimationFrame可以在正确的时间进行渲染，setTimeout(callback) 和 setinterval (callback)无法保证callback 回调函数的执行时机</li></ul></li></ul><h2 id="合理使用缓存" tabindex="-1">合理使用缓存 <a class="header-anchor" href="#合理使用缓存" aria-label="Permalink to &quot;合理使用缓存&quot;">​</a></h2><ul><li>合理缓存DOM对象</li><li>缓存列表长度</li><li>使用可缓存的AJAX</li></ul><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><ul><li>通常由浏览器存储，然后将Cookie与每个后续请求一起发送到同一服务器。收到 HTTP 请求时，服务器可以发送带有Cookie的 header头。可以给Cookie设置有效时间。</li><li>应用于: <ul><li>会话管理:登录名，购物车商品，游戏得分或服务器应要记录的其他任何内容</li><li>个性化:用户首选项，主题或其他设置</li><li>跟踪:记录和分析用户行为，比如埋点</li></ul></li></ul><h3 id="sessionstorage" tabindex="-1">sessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;sessionStorage&quot;">​</a></h3><p>创建一个本地存储的建/值对。</p><p>应用场景：</p><ul><li>页面应用页面之间传值</li></ul><h3 id="indexeddb" tabindex="-1">IndexedDB <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;IndexedDB&quot;">​</a></h3><p>索引数据库</p><ul><li>应用于: <ul><li>客户端存储大量结构化数据</li><li>没有网络连接的情况下使用(比如Google Doc 石墨文档)</li><li>将冗余、很少修改、但经常访问的数据，以避免随时从服务器获取数据</li></ul></li></ul><h3 id="localstorage" tabindex="-1">LocalStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;LocalStorage&quot;">​</a></h3><p>本地存储。</p><p>应用场景：</p><ul><li>缓存静态文件内容JS/CSS（比如百度M站首页）</li><li>缓存不常变更的API接口数据</li><li>存储地理位置信息</li><li>浏览在页面的具体位置</li></ul><h2 id="js模块化加载方案和选型" tabindex="-1">JS模块化加载方案和选型 <a class="header-anchor" href="#js模块化加载方案和选型" aria-label="Permalink to &quot;JS模块化加载方案和选型&quot;">​</a></h2><ul><li>Commonjs <ul><li>旨在Web浏览器之外为JavaScript建立模块生态系统</li><li>Node.js模块化方案受CommonjS</li></ul></li><li>AMD(Asynchronous Module Definition)(异步模块定义)规范 <ul><li>RequireJS模块化加载器:基于AMD API实现</li></ul></li><li>CMD(Common Module Definition)(通用模块定义)规范 <ul><li>SeaJS模块化加载器:遵循CMD API编写</li></ul></li><li>ES6 import</li></ul>',27)]))}const m=a(t,[["render",r]]);export{S as __pageData,m as default};
