import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const b=JSON.parse('{"title":"对象浅拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/object/对象浅拷贝.md","filePath":"jsPractice/object/对象浅拷贝.md"}'),p={name:"jsPractice/object/对象浅拷贝.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="对象浅拷贝" tabindex="-1">对象浅拷贝 <a class="header-anchor" href="#对象浅拷贝" aria-label="Permalink to &quot;对象浅拷贝&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>拷贝的是对象的指针，修改内容互相影响。</p><p>浅拷贝是创建一个新对象, 如果属性是基本类型，拷贝的就是基本类型的值， 如果属性是引用类型，拷贝的就是内存地址 ， 如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><h2 id="技术方案" tabindex="-1">技术方案 <a class="header-anchor" href="#技术方案" aria-label="Permalink to &quot;技术方案&quot;">​</a></h2><ul><li>常规遍历迭代</li><li>Array.prototype.concat()</li><li>Array.prototype.slice()</li><li>Object.assign()</li><li>拓展运算符</li></ul><h3 id="常规遍历拷贝" tabindex="-1">常规遍历拷贝 <a class="header-anchor" href="#常规遍历拷贝" aria-label="Permalink to &quot;常规遍历拷贝&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> shallowClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> newObj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> prop </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(prop)){</span></span>
<span class="line"><span style="color:#24292E;">      newObj[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj[prop];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> newObj;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="array-prototype-concat" tabindex="-1">Array.prototype.concat() <a class="header-anchor" href="#array-prototype-concat" aria-label="Permalink to &quot;Array.prototype.concat()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{name: </span><span style="color:#032F62;">&#39;kobe&#39;</span><span style="color:#24292E;">}];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">arr2[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;wade&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span></span>
<span class="line"><span style="color:#6A737D;">// [{name: wade}]</span></span></code></pre></div><h3 id="array-prototype-slice" tabindex="-1">Array.prototype.slice() <a class="header-anchor" href="#array-prototype-slice" aria-label="Permalink to &quot;Array.prototype.slice()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{name: </span><span style="color:#032F62;">&#39;kobe&#39;</span><span style="color:#24292E;">}];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">arr2[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;wade&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span></span>
<span class="line"><span style="color:#6A737D;">// [{name:wade}]</span></span></code></pre></div><h3 id="object-assign" tabindex="-1">Object.assign() <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;Object.assign()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {person: {name: </span><span style="color:#032F62;">&quot;kobe&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">41</span><span style="color:#24292E;">}};</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, obj1);</span></span>
<span class="line"><span style="color:#24292E;">obj2.person.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;wade&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1); </span></span>
<span class="line"><span style="color:#6A737D;">// {person:{ name: &#39;wade&#39;, age: 41 }}</span></span></code></pre></div><h3 id="拓展运算符" tabindex="-1">拓展运算符 <a class="header-anchor" href="#拓展运算符" aria-label="Permalink to &quot;拓展运算符&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {address:{x:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,y:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">}}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> obj1}</span></span>
<span class="line"><span style="color:#24292E;">obj1.address.x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 200</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj2) </span></span>
<span class="line"><span style="color:#6A737D;">// {address: { x: 200, y: 100 }}</span></span></code></pre></div>`,16)]))}const h=a(p,[["render",e]]);export{b as __pageData,h as default};
