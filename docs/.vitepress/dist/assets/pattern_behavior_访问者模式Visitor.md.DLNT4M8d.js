import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"访问者模式 Visitor","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/behavior/访问者模式Visitor.md","filePath":"pattern/behavior/访问者模式Visitor.md"}'),o={name:"pattern/behavior/访问者模式Visitor.md"};function e(t,s,r,c,y,C){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="访问者模式-visitor" tabindex="-1">访问者模式 Visitor <a class="header-anchor" href="#访问者模式-visitor" aria-label="Permalink to &quot;访问者模式 Visitor&quot;">​</a></h1><p>访问者模式(Visitor): 针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法。</p><p>访问者模式解决数据与数据的操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。因此访问者更适合于那些数据稳定，但是数据的操作方法易变的环境下。因此当操作环境改变时，可以自由修改操作方法以适应操作环境，而不用修改原数据，实现操作方法的拓展。同时对于同一个数据，它可以被多个访问对象所访问，这极大增加了操作数据的灵活性。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 访问器</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Visitor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;"> return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 截取方法</span></span>
<span class="line"><span style="color:#6F42C1;">  splice</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">   // splice方法参数，从原参数的第二个参数开始算起</span></span>
<span class="line"><span style="color:#D73A49;">   let</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.splice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">   // 对第—个参数对象执行splice方法</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#005CC5;"> Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.splice.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], args)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 追加数据方法</span></span>
<span class="line"><span style="color:#6F42C1;">  push</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">   // 强化类数组对象，使他拥有length属性</span></span>
<span class="line"><span style="color:#D73A49;">   let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ||</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#6A737D;">   // 添加的数据从原参数的第二个参数算起</span></span>
<span class="line"><span style="color:#D73A49;">   let</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">   // 校正length属性</span></span>
<span class="line"><span style="color:#005CC5;">   arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#6A737D;">   // 对第—个参数对象执行push方法</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#005CC5;"> Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.push.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], args)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 弹出最后—次添加的元素</span></span>
<span class="line"><span style="color:#6F42C1;">  pop</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">   // 对第—个参数对象执行pop方法</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#005CC5;"> Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.pop.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> Visitor.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;截取: &#39;</span><span style="color:#24292E;">, data) </span><span style="color:#6A737D;">// [2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;"> let</span><span style="color:#24292E;"> data2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> Visitor.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(data2, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;追加数据: &#39;</span><span style="color:#24292E;">, data2) </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;"> let</span><span style="color:#24292E;"> data3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> Visitor.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(data3)</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;弹出数据: &#39;</span><span style="color:#24292E;">, data3) </span><span style="color:#6A737D;">//  [1, 2, 3, 4]</span></span></code></pre></div>`,5)]))}const A=n(o,[["render",e]]);export{E as __pageData,A as default};
