import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"DOM样式操作","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/dom/DOM样式操作.md","filePath":"jsPractice/dom/DOM样式操作.md"}'),o={name:"jsPractice/dom/DOM样式操作.md"};function e(t,s,c,r,y,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="dom样式操作" tabindex="-1">DOM样式操作 <a class="header-anchor" href="#dom样式操作" aria-label="Permalink to &quot;DOM样式操作&quot;">​</a></h1><h2 id="获取样式" tabindex="-1">获取样式 <a class="header-anchor" href="#获取样式" aria-label="Permalink to &quot;获取样式&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\:</span><span style="color:#005CC5;">\\-</span><span style="color:#22863A;font-weight:bold;">\\_</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">))/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">separator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">letter</span><span style="color:#24292E;">, </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> letter.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> letter;</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">moz(</span><span style="color:#005CC5;">[A-Z]</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Moz$1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> getStyle</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">styleName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element </span><span style="color:#D73A49;">||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">styleName) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  styleName </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#24292E;">(styleName);</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (styleName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;float&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    styleName </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;cssFloat&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> computed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.defaultView.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(element, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> element.style[styleName] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> computed </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> computed[styleName] </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> element.style[styleName];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>获取样式兼容IE9以下版本</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// IE &lt; 9</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> getStyle</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">styleName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element </span><span style="color:#D73A49;">||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">styleName) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  styleName </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#24292E;">(styleName);</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (styleName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;float&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    styleName </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;styleFloat&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    switch</span><span style="color:#24292E;"> (styleName) {</span></span>
<span class="line"><span style="color:#D73A49;">      case</span><span style="color:#032F62;"> &#39;opacity&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">        try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#24292E;"> element.filters.</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;alpha&#39;</span><span style="color:#24292E;">).opacity </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#005CC5;"> 1.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#D73A49;">      default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> (element.style[styleName] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> element.currentStyle </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> element.currentStyle[styleName] </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> element.style[styleName];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="设置样式" tabindex="-1">设置样式 <a class="header-anchor" href="#设置样式" aria-label="Permalink to &quot;设置样式&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\:</span><span style="color:#005CC5;">\\-</span><span style="color:#22863A;font-weight:bold;">\\_</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">))/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">separator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">letter</span><span style="color:#24292E;">, </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> letter.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> letter;</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">moz(</span><span style="color:#005CC5;">[A-Z]</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Moz$1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> setStyle</span><span style="color:#24292E;">(element, </span><span style="color:#005CC5;">styleName</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element </span><span style="color:#D73A49;">||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">styleName) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> styleName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;object&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prop </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> styleName) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (styleName.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(prop)) {</span></span>
<span class="line"><span style="color:#6F42C1;">        setStyle</span><span style="color:#24292E;">(element, prop, styleName[prop]);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    styleName </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#24292E;">(styleName);</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (styleName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;opacity&#39;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> ieVersion </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 9</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      element.style.filter </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> isNaN</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#D73A49;"> :</span><span style="color:#032F62;"> &#39;alpha(opacity=&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 100</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &#39;)&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      element.style[styleName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="前缀补充" tabindex="-1">前缀补充 <a class="header-anchor" href="#前缀补充" aria-label="Permalink to &quot;前缀补充&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//补充前缀</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> autoPrefixer</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">style</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &#39;object&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> style;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> rules</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;transform&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;transition&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;animation&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> prefixes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;ms-&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;webkit-&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  rules.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">rule</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> value</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> style[rule];</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (rule </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">      prefixes.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">prefix</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        style[prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rule] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> style;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,9)]))}const D=n(o,[["render",e]]);export{A as __pageData,D as default};
