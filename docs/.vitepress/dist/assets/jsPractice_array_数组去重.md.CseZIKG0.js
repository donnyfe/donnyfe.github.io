import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"数组去重","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/array/数组去重.md","filePath":"jsPractice/array/数组去重.md"}'),o={name:"jsPractice/array/数组去重.md"};function e(c,s,r,t,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h1><h2 id="实现方案" tabindex="-1">实现方案 <a class="header-anchor" href="#实现方案" aria-label="Permalink to &quot;实现方案&quot;">​</a></h2><ul><li>new Set()</li><li>new Map()</li><li>reduce() + includes()</li><li>reduce() + indexOf()</li><li>filter() + includes()</li><li>filter() + indexOf()</li><li>forEach() + includes()</li><li>forEach() + indexOf()</li><li>for循环 + splice()</li></ul><h3 id="new-set" tabindex="-1">new Set() <a class="header-anchor" href="#new-set" aria-label="Permalink to &quot;new Set()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Set</span><span style="color:#24292E;">(arr))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="new-map" tabindex="-1">new Map() <a class="header-anchor" href="#new-map" aria-label="Permalink to &quot;new Map()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(item </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> arr) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(item)) {</span></span>
<span class="line"><span style="color:#24292E;">      map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(item, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">()]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="reduce-includes" tabindex="-1">reduce() + includes() <a class="header-anchor" href="#reduce-includes" aria-label="Permalink to &quot;reduce() + includes()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">acc</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cur</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> acc.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(cur) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> acc </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">acc, cur]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="filter-indexof" tabindex="-1">filter() + indexOf() <a class="header-anchor" href="#filter-indexof" aria-label="Permalink to &quot;filter() + indexOf()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(item) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="foreach-includes" tabindex="-1">forEach() + includes() <a class="header-anchor" href="#foreach-includes" aria-label="Permalink to &quot;forEach() + includes()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">res.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(item)) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="foreach-indexof" tabindex="-1">forEach() + indexOf() <a class="header-anchor" href="#foreach-indexof" aria-label="Permalink to &quot;forEach() + indexOf()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(item) </span><span style="color:#D73A49;">===</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="for循环-splice" tabindex="-1">for循环 + splice() <a class="header-anchor" href="#for循环-splice" aria-label="Permalink to &quot;for循环 + splice()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;">(arr[i] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> arr[j]) {</span></span>
<span class="line"><span style="color:#24292E;">        arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(j, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        len</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        j</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="对象数组合并去重" tabindex="-1">对象数组合并去重 <a class="header-anchor" href="#对象数组合并去重" aria-label="Permalink to &quot;对象数组合并去重&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [{ id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }, { id: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> }, { id: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [{ id: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }, { id: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> }, { id: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> }];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> mergeArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 克隆</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> cloneArr1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr2.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr2[i];</span></span>
<span class="line"><span style="color:#6A737D;">    // 能找到相同 id 属性值的数据则进入判断</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">~</span><span style="color:#24292E;">cloneArr1.</span><span style="color:#6F42C1;">findIndex</span><span style="color:#24292E;">((</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> el.id </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> v.id)) {</span></span>
<span class="line"><span style="color:#D73A49;">      continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cloneArr1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> cloneArr1;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mergeArray</span><span style="color:#24292E;">(arr1, arr2)); </span></span>
<span class="line"><span style="color:#6A737D;">// [ { id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 } ]</span></span></code></pre></div>`,19)]))}const u=a(o,[["render",e]]);export{d as __pageData,u as default};
