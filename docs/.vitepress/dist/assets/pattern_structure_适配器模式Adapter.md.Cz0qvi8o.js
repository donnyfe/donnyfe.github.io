import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"适配器模式 Adapter","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/structure/适配器模式Adapter.md","filePath":"pattern/structure/适配器模式Adapter.md"}'),e={name:"pattern/structure/适配器模式Adapter.md"};function o(t,s,r,c,i,d){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="适配器模式-adapter" tabindex="-1">适配器模式 Adapter <a class="header-anchor" href="#适配器模式-adapter" aria-label="Permalink to &quot;适配器模式 Adapter&quot;">​</a></h1><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它允许接口不兼容的类可以一起工作。通过引入一个适配器类，适配器模式将一个类的接口转换成客户希望的另一个接口，从而使原本由于接口不兼容而不能一起工作的类可以协同工作。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>后端接口适配</li><li>代码库适配</li><li>对象参数适配</li></ul><h3 id="对象参数适配" tabindex="-1">对象参数适配 <a class="header-anchor" href="#对象参数适配" aria-label="Permalink to &quot;对象参数适配&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Adapter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">config</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> defaultConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;雨夜清荷&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    title: </span><span style="color:#032F62;">&#39;设计模式&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    color: </span><span style="color:#032F62;">&#39;pink&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    size: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    prize: </span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#24292E;">  }；</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> defaultConfig){</span></span>
<span class="line"><span style="color:#24292E;">    defaultConfig[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config[i] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaultConfig[i]；</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,6)]))}const E=a(e,[["render",o]]);export{u as __pageData,E as default};
