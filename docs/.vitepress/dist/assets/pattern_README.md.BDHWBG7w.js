import{_ as i,c as a,o as e,ag as r}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"设计模式大纲","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/README.md","filePath":"pattern/README.md"}'),t={name:"pattern/README.md"};function o(h,l,n,u,d,s){return e(),a("div",null,l[0]||(l[0]=[r('<h1 id="设计模式大纲" tabindex="-1">设计模式大纲 <a class="header-anchor" href="#设计模式大纲" aria-label="Permalink to &quot;设计模式大纲&quot;">​</a></h1><ul><li>基本内容</li><li>面向对象特性</li><li>设计模式类型</li><li>设计原则</li></ul><h2 id="基本内容" tabindex="-1">基本内容 <a class="header-anchor" href="#基本内容" aria-label="Permalink to &quot;基本内容&quot;">​</a></h2><p>面向对象基本内容：</p><ul><li>面向对象的四大特性：封装、抽象、继承、多态</li><li>面向对象编程与面向过程编程的区别</li><li>面向对象分析、面向对象设计、面向对象编程 <ul><li>面向对象分析（OOA Object Oriented Analysis）</li><li>面向对象设计（OOD Object Oriented Design）</li><li>面向对象编程（OOP Object Oriented Program）</li></ul></li><li>接口和抽象类的区别以及各自的应用场景</li><li>基于接口而非实现编程的设计思想</li><li>多用组合少用继承的设计思想</li><li>面向过程的贫血模型和面向对象的充血模型</li></ul><h3 id="面向对象特性" tabindex="-1">面向对象特性 <a class="header-anchor" href="#面向对象特性" aria-label="Permalink to &quot;面向对象特性&quot;">​</a></h3><h3 id="编程范式-编程风格" tabindex="-1">编程范式/编程风格 <a class="header-anchor" href="#编程范式-编程风格" aria-label="Permalink to &quot;编程范式/编程风格&quot;">​</a></h3><ul><li>面向过程</li><li>面向对象 OOP Object Oriented Programming</li><li>面向切面编程 AOP</li><li>函数式编程</li></ul><h2 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-label="Permalink to &quot;设计原则&quot;">​</a></h2><h2 id="设计模式类型" tabindex="-1">设计模式类型 <a class="header-anchor" href="#设计模式类型" aria-label="Permalink to &quot;设计模式类型&quot;">​</a></h2><ul><li>创建型模式</li><li>结构型模式</li><li>行为型模式</li></ul><h3 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">​</a></h3><p>创建型模式就是创建对象的模式，抽象了实例化的过程。它帮助一个系统独立于如何创建、组合和表示它的那些对象。 关注的是对象的创建，创建型模式将创建对象的过程进行了抽象，也可以理解为将创建对象的过程进行了封装，作为客户程序仅仅需要去使用对象，而不再关心创建对象过程中的逻辑。</p><p>创建型模式包含单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、原型模式、建造者模式。</p><ul><li>创建型模式 <ul><li>工厂模式(常用)</li><li>单例模式(常用)</li><li>建造者模式(常用)</li><li>原型模式</li><li>抽象工厂模式</li></ul></li></ul><h3 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;">​</a></h3><p>结构型模式为解决怎样组装现有的类，设计他们的交互方式，从而达到实现一定的功能。</p><p>结构型模式包含适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</p><ul><li>结构型模式 <ul><li>桥接模式(常用)</li><li>装饰者模式(常用)</li><li>代理模式(常用)</li><li>适配器模式</li><li>组合模式</li><li>亨元模式</li><li>外观模式</li></ul></li></ul><h3 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">​</a></h3><p>行为型模式对在不同的对象之间划分责任和算法的抽象化，行为型模式不仅仅关注类和对象的结构，而且重点关注他们之间的相互作用，通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象之间的交互。</p><p>行为型模式包含模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式（责任链模式）。</p><ul><li>行为型模式 <ul><li>策略模式(常用)</li><li>职责链模式(常用)</li><li>迭代器模式(常用)</li><li>状态模式(常用)</li><li>观察者模式(常用)</li><li>模板模式(常用)</li><li>解释器模式</li><li>备忘录模式</li><li>中介者模式</li><li>访问者模式</li><li>命令模式</li></ul></li></ul><h3 id="技巧型模式" tabindex="-1">技巧型模式 <a class="header-anchor" href="#技巧型模式" aria-label="Permalink to &quot;技巧型模式&quot;">​</a></h3><ul><li>技巧型模式 <ul><li>数据访问对象模式</li><li>委托模式</li><li>等待者模式</li><li>参与者模式</li><li>惰性模式</li><li>简单模板模式</li><li>链模式</li><li>函数柯里化</li><li>节流模式</li></ul></li></ul><h3 id="架构型模式" tabindex="-1">架构型模式 <a class="header-anchor" href="#架构型模式" aria-label="Permalink to &quot;架构型模式&quot;">​</a></h3><ul><li>架构型模式 <ul><li>同步模块模式</li><li>MVVM 模式</li><li>MVP 模式</li><li>MVC 模式</li><li>Widget 模式</li><li>异步模块模式</li></ul></li></ul><h2 id="代码重构" tabindex="-1">代码重构 <a class="header-anchor" href="#代码重构" aria-label="Permalink to &quot;代码重构&quot;">​</a></h2><ul><li>重构的目的（why）、对象（what）、时机（when）、方法（how）；</li><li>保证重构不出错的技术手段：单元测试和代码的可测试性；</li><li>两种不同规模的重构： <ul><li>大重构（大规模高层次）</li><li>小重构（小规模低层次）</li></ul></li></ul><h2 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h2><p>面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。</p><p>设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。</p><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。</p><p>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。</p><p>重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。</p>',35)]))}const b=i(t,[["render",o]]);export{p as __pageData,b as default};
