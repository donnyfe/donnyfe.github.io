import{_ as a,c as l,o as n,ag as o}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"数组转换","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/array/数组转换.md","filePath":"jsPractice/array/数组转换.md"}'),p={name:"jsPractice/array/数组转换.md"};function e(t,s,r,c,y,i){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="数组转换" tabindex="-1">数组转换 <a class="header-anchor" href="#数组转换" aria-label="Permalink to &quot;数组转换&quot;">​</a></h1><h2 id="类数组转为数组" tabindex="-1">类数组转为数组 <a class="header-anchor" href="#类数组转为数组" aria-label="Permalink to &quot;类数组转为数组&quot;">​</a></h2><h3 id="实现方案" tabindex="-1">实现方案 <a class="header-anchor" href="#实现方案" aria-label="Permalink to &quot;实现方案&quot;">​</a></h3><ul><li>拓展运算符\`</li><li>Array.apply()</li><li>Array.prototype.slice.call()</li><li>Array.prototype.concat.call()</li></ul><h4 id="拓展运算符" tabindex="-1">拓展运算符 <a class="header-anchor" href="#拓展运算符" aria-label="Permalink to &quot;拓展运算符&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nodes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">nodes]</span></span></code></pre></div><h4 id="array-form" tabindex="-1">Array.form() <a class="header-anchor" href="#array-form" aria-label="Permalink to &quot;Array.form()&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nodes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(nodes)</span></span></code></pre></div><h4 id="array-apply" tabindex="-1">Array.apply() <a class="header-anchor" href="#array-apply" aria-label="Permalink to &quot;Array.apply()&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nodes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, nodes)</span></span></code></pre></div><h4 id="array-prototype-slice-call" tabindex="-1">Array.prototype.slice.call() <a class="header-anchor" href="#array-prototype-slice-call" aria-label="Permalink to &quot;Array.prototype.slice.call()&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nodes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(nodes);</span></span></code></pre></div><h4 id="array-prototype-concat-call" tabindex="-1">Array.prototype.concat.call() <a class="header-anchor" href="#array-prototype-concat-call" aria-label="Permalink to &quot;Array.prototype.concat.call()&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nodes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.concat.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(nodes);</span></span></code></pre></div><h2 id="一维数组转二维数组" tabindex="-1">一维数组转二维数组 <a class="header-anchor" href="#一维数组转二维数组" aria-label="Permalink to &quot;一维数组转二维数组&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * size: 二维数组长度</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> sliceArr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">arr) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> size) {</span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(i, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> size));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,16)]))}const h=a(p,[["render",e]]);export{u as __pageData,h as default};
