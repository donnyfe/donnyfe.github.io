import{_ as e,c as r,o as t,ag as i}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"算法技巧","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/basic/基本算法技巧.md","filePath":"algorithm/basic/基本算法技巧.md"}'),l={name:"algorithm/basic/基本算法技巧.md"};function o(h,a,n,d,s,c){return t(),r("div",null,a[0]||(a[0]=[i('<h1 id="算法技巧" tabindex="-1">算法技巧 <a class="header-anchor" href="#算法技巧" aria-label="Permalink to &quot;算法技巧&quot;">​</a></h1><h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">​</a></h2><p>双指针的思想在链表和数组中经常会用到，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。</p><h3 id="左右端点指针" tabindex="-1">左右端点指针 <a class="header-anchor" href="#左右端点指针" aria-label="Permalink to &quot;左右端点指针&quot;">​</a></h3><p>两个指针从不同位置出发：一个从始端开始，另一个从末端开始；</p><h3 id="快慢指针" tabindex="-1">快慢指针 <a class="header-anchor" href="#快慢指针" aria-label="Permalink to &quot;快慢指针&quot;">​</a></h3><p>两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。</p><h3 id="固定间距指针" tabindex="-1">固定间距指针 <a class="header-anchor" href="#固定间距指针" aria-label="Permalink to &quot;固定间距指针&quot;">​</a></h3><p>待补充...</p><h2 id="枚举法" tabindex="-1">枚举法 <a class="header-anchor" href="#枚举法" aria-label="Permalink to &quot;枚举法&quot;">​</a></h2><p>待补充...</p><h2 id="递归法" tabindex="-1">递归法 <a class="header-anchor" href="#递归法" aria-label="Permalink to &quot;递归法&quot;">​</a></h2><p>递归-循环（通过函数体自身来进行的循环）</p><p>递归需要满足的三个条件:</p><ul><li>一个问题的解可以分解为几个子问题的解</li><li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li><li>存在递归终止条件</li></ul><p>写递归代码最关键的是写出递推公式，找到终止条件。找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p><h3 id="递归注意事项" tabindex="-1">递归注意事项 <a class="header-anchor" href="#递归注意事项" aria-label="Permalink to &quot;递归注意事项&quot;">​</a></h3><ul><li>递归代码要警惕堆栈溢出</li><li>递归代码要警惕重复计算</li><li>过多函数调用耗时长</li></ul><h2 id="递推法" tabindex="-1">递推法 <a class="header-anchor" href="#递推法" aria-label="Permalink to &quot;递推法&quot;">​</a></h2><h3 id="顺推法" tabindex="-1">顺推法 <a class="header-anchor" href="#顺推法" aria-label="Permalink to &quot;顺推法&quot;">​</a></h3><p>待补充...</p><h3 id="逆推法" tabindex="-1">逆推法 <a class="header-anchor" href="#逆推法" aria-label="Permalink to &quot;逆推法&quot;">​</a></h3><p>待补充...</p>',23)]))}const _=e(l,[["render",o]]);export{u as __pageData,_ as default};
