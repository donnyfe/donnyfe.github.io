import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"队列 Queue","description":"","frontmatter":{"Group":"数据结构"},"headers":[],"relativePath":"algorithm/dataStructure/队列.md","filePath":"algorithm/dataStructure/队列.md"}'),o={name:"algorithm/dataStructure/队列.md"};function e(t,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="队列-queue" tabindex="-1">队列 Queue <a class="header-anchor" href="#队列-queue" aria-label="Permalink to &quot;队列 Queue&quot;">​</a></h1><p>定义：队列是一种先进先出（FIFO）的数据结构</p><blockquote><p>注: 队列是广度优先搜索以及队列优化的 Bellman-Ford 最短路算法的核心</p></blockquote><p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是长得像一个环的循环队列。在数组实现队列的时候，会有数据搬移操作，要想解决数据搬移的问题，我们就需要像环一样的循环队列。</p><p>队列类型：</p><ul><li>优先队列</li><li>循环队列</li><li>阻塞队列</li><li>并发队列</li><li>高性能队列</li><li>循环并发队列</li></ul><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</p><p>队列数据结构在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列 Disruptor、Linux 环形缓存，都用到了循环并发队列；Java concurrent 并发包利用 ArrayBlockingQueue 来实现公平锁等。</p><p>队列除了应用在线程池请求排队的场景之外，队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</p><p>应用场景：</p><ul><li><p>线程池请求排队</p></li><li><p>队列</p><ul><li>分布式消息队列 <ul><li>RocketMQ</li><li>Kafka</li></ul></li></ul></li><li><p>循环队列</p><ul><li>击鼓传花</li></ul></li><li><p>优先队列</p><ul><li>VIP</li><li>高级会员</li></ul></li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>队列需要两个指针：一个是 head 指针，指向队头；一个是 tail 指针，指向队尾。</p><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li>enqueue()：入队</li><li>dequeue()：出队</li><li>front()：查看队列头</li><li>isEmpty()：查看队列是否为空</li><li>size()：获取队列长度</li></ul><h3 id="顺序队列" tabindex="-1">顺序队列 <a class="header-anchor" href="#顺序队列" aria-label="Permalink to &quot;顺序队列&quot;">​</a></h3><p>使用数组实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Queue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 入队</span></span>
<span class="line"><span style="color:#6F42C1;">  enqueue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.list.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 出队</span></span>
<span class="line"><span style="color:#6F42C1;">  dequeue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  front</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  back</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list[</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ==</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  size</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        	i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        len </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">      str </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.list[i] </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Queue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    constructor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">items</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.reverse </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">items];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">    enqueue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">items</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.reverse</span></span>
<span class="line"><span style="color:#D73A49;">            ?</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.queue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">items)</span></span>
<span class="line"><span style="color:#D73A49;">            :</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.queue.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">items);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">    dequeue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.reverse</span></span>
<span class="line"><span style="color:#D73A49;">         ?</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.queue.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">         :</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.queue.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="链式队列" tabindex="-1">链式队列 <a class="header-anchor" href="#链式队列" aria-label="Permalink to &quot;链式队列&quot;">​</a></h3><p>使用链表实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="优先队列" tabindex="-1">优先队列 <a class="header-anchor" href="#优先队列" aria-label="Permalink to &quot;优先队列&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 辅助类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> QueueItem</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   // priority优先级</span></span>
<span class="line"><span style="color:#D73A49;">    constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">priority</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.priority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> priority</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> PriorityQueue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.added </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6F42C1;">    enqueue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">priority</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        let</span><span style="color:#24292E;"> queueItem </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> QueueItem</span><span style="color:#24292E;">(element, priority)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">        for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.items.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;">(queueItem.priority </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.items[i].priority) {</span></span>
<span class="line"><span style="color:#005CC5;">                this</span><span style="color:#24292E;">.items.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(i, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, queueItem)</span></span>
<span class="line"><span style="color:#005CC5;">                this</span><span style="color:#24292E;">.added </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">                break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.added) {</span></span>
<span class="line"><span style="color:#005CC5;">            this</span><span style="color:#24292E;">.items.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(queueItem)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.items)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pq </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> PriorityQueue</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">pq.</span><span style="color:#6F42C1;">enqueue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;小黑&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">pq.</span><span style="color:#6F42C1;">enqueue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;小白&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="循环队列" tabindex="-1">循环队列 <a class="header-anchor" href="#循环队列" aria-label="Permalink to &quot;循环队列&quot;">​</a></h3><p>击鼓传花示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 循环队列</span></span>
<span class="line"><span style="color:#6A737D;">// 击鼓传花</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> games</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">players</span><span style="color:#24292E;">, </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> q </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Queue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">    // 所有玩家入队</span></span>
<span class="line"><span style="color:#24292E;">    players.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">player</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> q.</span><span style="color:#6F42C1;">enqueue</span><span style="color:#24292E;">(player))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> outPlayer;</span></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;">(q.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            q.</span><span style="color:#6F42C1;">enqueue</span><span style="color:#24292E;">(q.</span><span style="color:#6F42C1;">dequeue</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        outPlayer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.</span><span style="color:#6F42C1;">dequeue</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;淘汰的玩家 ---&gt; &#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> outPlayer)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 最后胜利玩家</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> q.</span><span style="color:#6F42C1;">dequeue</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> players</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;f&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nums</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">games</span><span style="color:#24292E;">(players, nums))</span></span></code></pre></div><h2 id="阻塞队列" tabindex="-1">阻塞队列 <a class="header-anchor" href="#阻塞队列" aria-label="Permalink to &quot;阻塞队列&quot;">​</a></h2><h2 id="并发队列" tabindex="-1">并发队列 <a class="header-anchor" href="#并发队列" aria-label="Permalink to &quot;并发队列&quot;">​</a></h2><p>并发队列的实现方式是直接在 enqueue()、dequeue() 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，基于数组的循环队列，利用 CAS 原子操作，可以实现非常高效的并发队列。</p>`,31)]))}const C=n(o,[["render",e]]);export{u as __pageData,C as default};
