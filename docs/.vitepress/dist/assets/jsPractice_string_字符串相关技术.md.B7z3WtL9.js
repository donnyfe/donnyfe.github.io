import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"字符串相关技术","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/string/字符串相关技术.md","filePath":"jsPractice/string/字符串相关技术.md"}'),o={name:"jsPractice/string/字符串相关技术.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="字符串相关技术" tabindex="-1">字符串相关技术 <a class="header-anchor" href="#字符串相关技术" aria-label="Permalink to &quot;字符串相关技术&quot;">​</a></h1><h2 id="移除字符串空格" tabindex="-1">移除字符串空格 <a class="header-anchor" href="#移除字符串空格" aria-label="Permalink to &quot;移除字符串空格&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> trim</span><span style="color:#24292E;">(</span><span style="color:#E36209;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (string </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">[\\s\\uFEFF]</span><span style="color:#D73A49;">+|</span><span style="color:#005CC5;">[\\s\\uFEFF]</span><span style="color:#D73A49;">+$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="短横杠分隔" tabindex="-1">短横杠分隔 <a class="header-anchor" href="#短横杠分隔" aria-label="Permalink to &quot;短横杠分隔&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> kebabCase</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> hyphenateRE</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">-]</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">[A-Z]</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> str</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(hyphenateRE, </span><span style="color:#032F62;">&#39;$1-$2&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(hyphenateRE, </span><span style="color:#032F62;">&#39;$1-$2&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="小驼峰" tabindex="-1">小驼峰 <a class="header-anchor" href="#小驼峰" aria-label="Permalink to &quot;小驼峰&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// a_b_c、a-b-c =&gt; aBc</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> camelCase</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\:</span><span style="color:#005CC5;">\\-</span><span style="color:#22863A;font-weight:bold;">\\_</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">))/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">separator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">letter</span><span style="color:#24292E;">, </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> letter.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> letter;</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">moz(</span><span style="color:#005CC5;">[A-Z]</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Moz$1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="首字母大写" tabindex="-1">首字母大写 <a class="header-anchor" href="#首字母大写" aria-label="Permalink to &quot;首字母大写&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> isString</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> val</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object String]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> capitalize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isString</span><span style="color:#24292E;">(str)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,9)]))}const d=a(o,[["render",e]]);export{C as __pageData,d as default};
