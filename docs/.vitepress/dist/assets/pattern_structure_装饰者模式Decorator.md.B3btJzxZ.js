import{_ as n,c as a,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"装饰者模式 Decorator","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/structure/装饰者模式Decorator.md","filePath":"pattern/structure/装饰者模式Decorator.md"}'),p={name:"pattern/structure/装饰者模式Decorator.md"};function t(e,s,r,c,y,i){return l(),a("div",null,s[0]||(s[0]=[o(`<h1 id="装饰者模式-decorator" tabindex="-1">装饰者模式 Decorator <a class="header-anchor" href="#装饰者模式-decorator" aria-label="Permalink to &quot;装饰者模式 Decorator&quot;">​</a></h1><p><strong>装饰者模式（Decorator）</strong>：在不改变原对象的基础上，通过对其进行包装拓展（添加属性或者方法），使原有对象可以满足用户的更复杂需求。</p><p>装饰者模式是一种结构型设计模式，它允许在不修改原有功能的情况下对功能进行扩展和增强。这种模式通过对对象进行包装，从而在外部对其进行功能拓展，而无需了解其内部实现。这种方式不仅保护了原有功能的完整性，还提供了灵活的功能扩展手段。</p><p>与适配器模式不同，装饰者模式不需要了解对象的内部结构。适配器模式通常需要对对象内部结构进行重组，而装饰者模式则是在外部进行封装和拓展。</p><p>在实际项目中，当需要增强或削弱一个函数的能力时，可以使用装饰者模式。编写装饰者模式的代码有几种常见的方式：</p><ol><li><strong>高阶函数</strong>：利用闭包编写高阶函数，这种方式适用于任何函数，但写法可能不够优雅。</li><li><strong>ES6 装饰器语法</strong>：这种方式需要基于类的代码，适用于 OOP 开发思想的项目，如 Node.js 中的 NestJS。</li><li><strong>原型扩展</strong>：在原型上追加 AOP 函数，但这种方式在实际开发中不推荐，因为可能带来潜在隐患。</li></ol><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>装饰者模式适用于以下场景：</p><ol><li><strong>功能扩展</strong>：需要在不修改现有代码的情况下，为对象添加新的功能。</li><li><strong>职责分离</strong>：将核心功能与附加功能分离，使代码更具模块化和可维护性。</li><li><strong>动态组合</strong>：需要动态地组合多个行为或功能。</li><li><strong>透明增强</strong>：希望增强对象的功能，但不改变其接口和使用方式。</li><li><strong>跨切面关注点</strong>：如日志记录、性能监控、安全控制等，适合使用装饰者模式进行实现。</li></ol><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>前置/后置执行函数</li><li>日志装饰器</li></ul><h3 id="前置-后置执行函数" tabindex="-1">前置/后置执行函数 <a class="header-anchor" href="#前置-后置执行函数" aria-label="Permalink to &quot;前置/后置执行函数&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 增加前置执行的函数</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">beforeFn</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	const</span><span style="color:#005CC5;"> _this</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> wrapper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> _this.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 增加后置执行的函数</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">afterFn</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	const</span><span style="color:#005CC5;"> _this</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> wrapper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> response</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> _this.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// use</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> onLoad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我想处理一些业务逻辑&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 不需要担心覆盖其它开发者增加的onload事件</span></span>
<span class="line"><span style="color:#24292E;">window.onload </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> window.onload </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;function&#39;</span><span style="color:#D73A49;"> ?</span><span style="color:#24292E;"> window.onload.</span><span style="color:#6F42C1;">beforeFn</span><span style="color:#24292E;">(onLoad) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> onLoad</span></span></code></pre></div><h3 id="日志装饰器" tabindex="-1">日志装饰器 <a class="header-anchor" href="#日志装饰器" aria-label="Permalink to &quot;日志装饰器&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> log</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Object</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">descriptor</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> PropertyDescriptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	var</span><span style="color:#24292E;"> oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> descriptor.value</span></span>
<span class="line"><span style="color:#24292E;">	descriptor.</span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Calling \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} with\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> oldValue.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> descriptor</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	@log</span></span>
<span class="line"><span style="color:#6F42C1;">	handleClick</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户点击了按钮&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,15)]))}const d=n(p,[["render",t]]);export{C as __pageData,d as default};
