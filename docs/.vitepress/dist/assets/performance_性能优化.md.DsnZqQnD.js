import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"performance/性能优化.md","filePath":"performance/性能优化.md"}'),o={name:"performance/性能优化.md"};function e(t,s,c,r,i,A){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="优化实践" tabindex="-1">优化实践 <a class="header-anchor" href="#优化实践" aria-label="Permalink to &quot;优化实践&quot;">​</a></h2><p>加载时间优化：</p><h3 id="js打包优化" tabindex="-1">JS打包优化 <a class="header-anchor" href="#js打包优化" aria-label="Permalink to &quot;JS打包优化&quot;">​</a></h3><ul><li>JS关键资源拆分处理</li><li>Splitchunks 的正确配置：所有页面都会加载的公共文件，打包规则是 miniChunks: 3，引用超过3次的模块将被打进这个js</li><li>公共组件按需加载</li><li>业务组件代码拆分</li><li>非关键资源异步延迟加载</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> isPrefetchSupported</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> link</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;link&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">relList</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> link;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">relList </span><span style="color:#D73A49;">||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">relList.supports) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> relList.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;prefetch&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> prefetch</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> isPrefetchSupport</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> isPrefetchSupported</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (isPrefetchSupport) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> link</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;link&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    link.rel </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;prefetch&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    link.as </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> type;</span></span>
<span class="line"><span style="color:#24292E;">    link.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">    document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(link);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;script&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">          // load script</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="媒体资源优化" tabindex="-1">媒体资源优化 <a class="header-anchor" href="#媒体资源优化" aria-label="Permalink to &quot;媒体资源优化&quot;">​</a></h3><ul><li>媒体资源加载时序优化</li><li>媒体资源大小尺寸优化 <ul><li>使用CDN 图床尺寸大小压缩功能，根据不同的设备渲染不同大小的图片调整图片格式，根据网络情况，渲染不同清晰度的图</li><li>CDN配合业务具体实现：使用 img 标签 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset" target="_blank" rel="noreferrer">srcset</a>/sizes 属性和 picutre 标签实现响应式图片</li><li>使用URL动态拼接方式构造url请求，根据机型宽度和网络情况，判断当前图片宽度倍数进行调整（如iphone 1x，ipad 2x，弱网0.5x）</li></ul></li><li>字体优化 <ul><li>font-spider</li><li>使用 fontmin 将字体资源进行压缩，生成精简版的字体文件</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// webp图像兼容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// check_webp_feature:</span></span>
<span class="line"><span style="color:#6A737D;">//   &#39;feature&#39; can be one of &#39;lossy&#39;, &#39;lossless&#39;, &#39;alpha&#39; or &#39;animation&#39;.</span></span>
<span class="line"><span style="color:#6A737D;">//   &#39;callback(feature, result)&#39; will be passed back the detection result (in an asynchronous way!)</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> check_webp_feature</span><span style="color:#24292E;">(</span><span style="color:#E36209;">feature</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> kTestImages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      lossy: </span><span style="color:#032F62;">&quot;UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      lossless: </span><span style="color:#032F62;">&quot;UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      alpha: </span><span style="color:#032F62;">&quot;UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      animation: </span><span style="color:#032F62;">&quot;UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA&quot;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Image</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  img.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">      var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (img.width </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (img.height </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">      callback</span><span style="color:#24292E;">(feature, result);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  img.</span><span style="color:#6F42C1;">onerror</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6F42C1;">      callback</span><span style="color:#24292E;">(feature, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  img.src </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;data:image/webp;base64,&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> kTestImages[feature];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="页面渲染优化" tabindex="-1">页面渲染优化 <a class="header-anchor" href="#页面渲染优化" aria-label="Permalink to &quot;页面渲染优化&quot;">​</a></h3><ul><li><p>TTFB时间优化</p></li><li><p>模拟弱网情况（slow 3g）Performance 录制页面渲染情况</p></li><li><p>首屏的CSS使用率过低，可以考虑对页面首屏的关键CSS进行内联，让页面渲染不被CSS阻塞，再把完整CSS加载进来。</p></li><li><p>实现Critial CSS 的优化可以考虑使用 critters</p></li><li><p>利用prefech进行预加载</p></li></ul><h3 id="页面布局抖动优化" tabindex="-1">页面布局抖动优化 <a class="header-anchor" href="#页面布局抖动优化" aria-label="Permalink to &quot;页面布局抖动优化&quot;">​</a></h3><ul><li>确定直出页面元素出现位置，根据直出数据做好布局</li><li>页面小图可以通过base64处理，页面解析的时候就会立即展示</li><li>减少动态内容对页面布局的影响，使用脱离文档流的方式或定好宽高</li></ul><h2 id="数据上报方案" tabindex="-1">数据上报方案 <a class="header-anchor" href="#数据上报方案" aria-label="Permalink to &quot;数据上报方案&quot;">​</a></h2><ul><li>延迟合并上报，数据上报在onload后处理，避免对性能产生影响。</li><li>使用 Beacon API</li><li>使用 post 上报</li></ul>`,15)]))}const E=a(o,[["render",e]]);export{u as __pageData,E as default};
