import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const D=JSON.parse('{"title":"DOM事件操作","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/dom/DOM事件操作.md","filePath":"jsPractice/dom/DOM事件操作.md"}'),o={name:"jsPractice/dom/DOM事件操作.md"};function e(t,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="dom事件操作" tabindex="-1">DOM事件操作 <a class="header-anchor" href="#dom事件操作" aria-label="Permalink to &quot;DOM事件操作&quot;">​</a></h1><h2 id="绑定事件" tabindex="-1">绑定事件 <a class="header-anchor" href="#绑定事件" aria-label="Permalink to &quot;绑定事件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> on</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (document.addEventListener) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (element </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> handler) {</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(event, handler, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (element </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> handler) {</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">attachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;on&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> event, handler);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><h2 id="注销事件" tabindex="-1">注销事件 <a class="header-anchor" href="#注销事件" aria-label="Permalink to &quot;注销事件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> off</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (document.removeEventListener) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (element </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event) {</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(event, handler, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (element </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event) {</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">detachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;on&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> event, handler);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><h2 id="绑定一次性事件" tabindex="-1">绑定一次性事件 <a class="header-anchor" href="#绑定一次性事件" aria-label="Permalink to &quot;绑定一次性事件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> once</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#6F42C1;"> listener</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (fn) {</span></span>
<span class="line"><span style="color:#24292E;">      fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6F42C1;">    off</span><span style="color:#24292E;">(el, event, listener);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#6F42C1;">  on</span><span style="color:#24292E;">(el, event, listener);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 性能优化——防抖</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> delay</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;"> export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> debounce</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">   let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">     clearTimeout</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">     timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args);</span></span>
<span class="line"><span style="color:#24292E;">     }, delay);</span></span>
<span class="line"><span style="color:#24292E;">   };</span></span>
<span class="line"><span style="color:#24292E;"> };</span></span></code></pre></div><p>lodash实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * lodash.js</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> func</span><span style="color:#6A737D;"> 要进行debouce的函数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> wait</span><span style="color:#6A737D;"> 等待时间,默认500ms</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> immediate</span><span style="color:#6A737D;"> 是否立即执行</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> debounce</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">, </span><span style="color:#E36209;">wait</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, </span><span style="color:#E36209;">immediate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> timeout</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        var</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span></span>
<span class="line"><span style="color:#D73A49;">        var</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> arguments</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (timeout) </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timeout)</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (immediate) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 如果已经执行过，不再执行</span></span>
<span class="line"><span style="color:#D73A49;">            var</span><span style="color:#24292E;"> callNow </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">timeout</span></span>
<span class="line"><span style="color:#24292E;">            timeout </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                timeout </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">            }, wait)</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;"> (callNow) func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            timeout </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#24292E;">            }, wait)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 性能优化——节流</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> delay</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> throttle</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 500</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">flag) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    flag </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args);</span></span>
<span class="line"><span style="color:#24292E;">      flag </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }, delay);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>lodash实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * lodash.js</span></span>
<span class="line"><span style="color:#6A737D;"> * 节流，多次触发，间隔时间段执行</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Function}</span><span style="color:#24292E;"> func</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Int}</span><span style="color:#24292E;"> wait</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> options</span></span>
<span class="line"><span style="color:#6A737D;"> * options: {</span></span>
<span class="line"><span style="color:#6A737D;"> *  leading，函数在每个等待时延的开始被调用，默认值为false</span></span>
<span class="line"><span style="color:#6A737D;">    trailing，函数在每个等待时延的结束被调用，默认值是true</span></span>
<span class="line"><span style="color:#6A737D;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  leading-false，trailing-true：默认情况，即在延时结束后才会调用函数</span></span>
<span class="line"><span style="color:#6A737D;">  leading-true，trailing-true：在延时开始时就调用，延时结束后也会调用</span></span>
<span class="line"><span style="color:#6A737D;">  leading-true, trailing-false：只在延时开始时调用</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> throttle</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">, </span><span style="color:#E36209;">wait</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    //container.onmousemove = throttle(getUserAction, 1000);</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> timeout, context, args</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> previous </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options) options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {leading:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,trailing:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#6F42C1;"> later</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        previous </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.leading </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> false</span><span style="color:#D73A49;"> ?</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> :</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        timeout </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">        func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timeout) context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#6F42C1;"> throttled</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        var</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">previous </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.leading </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">) previous </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> now</span></span>
<span class="line"><span style="color:#D73A49;">        var</span><span style="color:#24292E;"> remaining </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wait </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (now </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> previous)</span></span>
<span class="line"><span style="color:#24292E;">        context </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span></span>
<span class="line"><span style="color:#24292E;">        args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> arguments</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (remaining </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> remaining </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> wait) {</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;"> (timeout) {</span></span>
<span class="line"><span style="color:#6F42C1;">                clearTimeout</span><span style="color:#24292E;">(timeout)</span></span>
<span class="line"><span style="color:#24292E;">                timeout </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            previous </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> now</span></span>
<span class="line"><span style="color:#24292E;">            func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timeout) context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timeout </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.trailing </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            timeout </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(later, remaining)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> throttled</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,15)]))}const A=n(o,[["render",e]]);export{D as __pageData,A as default};
