import{_ as n,c as a,o as e,ag as l}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"单例模式 Singleton","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/Create/单例模式Singleton.md","filePath":"pattern/Create/单例模式Singleton.md"}'),o={name:"pattern/Create/单例模式Singleton.md"};function t(p,s,r,c,i,y){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="单例模式-singleton" tabindex="-1">单例模式 Singleton <a class="header-anchor" href="#单例模式-singleton" aria-label="Permalink to &quot;单例模式 Singleton&quot;">​</a></h1><p>作用意义: 限制类只能实例化一次</p><p>特征: 全局唯一性</p><p>原理: 在该实例不存在的情况下，可以通过一个方法创建一个类来实现创建类的新实例；如果实例已经存在，它会简单返回该对象的引用</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>登录弹窗</li><li>自定义事件 EventBus</li><li>vue-router</li><li>Vuex、Redux 的 Store</li></ul><h3 id="全局数据存储对象-store" tabindex="-1">全局数据存储对象 Store <a class="header-anchor" href="#全局数据存储对象-store" aria-label="Permalink to &quot;全局数据存储对象 Store&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Store</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // 使用instanceof检测</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;"> instanceof</span><span style="color:#6F42C1;"> Store</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Store</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (Store.instance) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> Store.instance;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  Store.instance </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用方式</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Store</span><span style="color:#24292E;">();</span></span></code></pre></div>`,8)]))}const _=n(o,[["render",t]]);export{u as __pageData,_ as default};
