import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"冒泡排序 Bubble Sort","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/冒泡排序.md","filePath":"algorithm/sort/冒泡排序.md"}'),o={name:"algorithm/sort/冒泡排序.md"};function e(r,s,t,c,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="冒泡排序-bubble-sort" tabindex="-1">冒泡排序 Bubble Sort <a class="header-anchor" href="#冒泡排序-bubble-sort" aria-label="Permalink to &quot;冒泡排序 Bubble Sort&quot;">​</a></h1><p>冒泡排序的英文Bubble Sort，是一种最基础的交换排序。</p><ul><li>算法策略: 双指针</li><li>时间复杂度: 平均：O(n2)、最好：O(n)、最坏：O(n2)</li><li>空间复杂度: O(1)</li><li>稳定性：稳定(排序后2个相等键值的顺序和排序之前它们的顺序相同)</li><li>排序方式：in-place(占用常数内存，不占用额外内存)</li></ul><h2 id="排序原理" tabindex="-1">排序原理 <a class="header-anchor" href="#排序原理" aria-label="Permalink to &quot;排序原理&quot;">​</a></h2><ol><li>比较相邻的两个元素，如果前一个比后一个大，则交换位置。</li><li>第一轮的时候最后一个元素应该是最大的一个。</li><li>按照步骤一的方法进行相邻两个元素的比较，这个时候由于最后一个元素已经是最大的了，所以最后一个元素不用比较。</li></ol><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><h3 id="版本一" tabindex="-1">版本一 <a class="header-anchor" href="#版本一" aria-label="Permalink to &quot;版本一&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> bubbleSort</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> len</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#D73A49;"> -</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 相邻元素对比</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;">(arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j];</span></span>
<span class="line"><span style="color:#24292E;">        arr[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="版本二" tabindex="-1">版本二 <a class="header-anchor" href="#版本二" aria-label="Permalink to &quot;版本二&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> bubbleSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;改进前冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, j;</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 相邻元素对比</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 元素互换</span></span>
<span class="line"><span style="color:#24292E;">        [arr[j], arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],arr[j]]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;改进前冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h3><p>设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> bubbleSortOptimized</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;改进后冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      j,</span></span>
<span class="line"><span style="color:#24292E;">      pos </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;">(arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        [arr[j], arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], arr[j]]</span></span>
<span class="line"><span style="color:#24292E;">        pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;改进后冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="双向冒泡" tabindex="-1">双向冒泡 <a class="header-anchor" href="#双向冒泡" aria-label="Permalink to &quot;双向冒泡&quot;">​</a></h3><p>普通的冒泡排序在一趟循环中只能找出一个最大值或最小值，双向冒泡则是多一轮循环既找出最大值也找出最小值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> bubbleSortTwoWays</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> low </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> high </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;双向冒泡——改进后冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;">(low </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> high) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 正向冒泡找到最大值放到右边</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> high; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;">(arr[i] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        [arr[i], arr[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], arr[i]];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    high</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 反向冒泡找到最小值放到左边</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> high; j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> low; j</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;">(arr[j] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        [arr[j], arr[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], arr[j]];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    low</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;双向冒泡——改进后冒泡排序耗时&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="性能测试" tabindex="-1">性能测试 <a class="header-anchor" href="#性能测试" aria-label="Permalink to &quot;性能测试&quot;">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> testBubbleSort</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // 生成测试数据</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({length: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">}, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 10000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;普通冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">  bubbleSort</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr])</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;普通冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;优化冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">  bubbleSortOptimized</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr])</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;优化冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;双向冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">  bubbleSortTwoWays</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr])</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;双向冒泡排序&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,18)]))}const D=a(o,[["render",e]]);export{A as __pageData,D as default};
