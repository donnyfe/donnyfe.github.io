import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"策略模式 Strategy","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/behavior/策略模式Strategy.md","filePath":"pattern/behavior/策略模式Strategy.md"}'),o={name:"pattern/behavior/策略模式Strategy.md"};function e(t,s,r,c,y,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="策略模式-strategy" tabindex="-1">策略模式 Strategy <a class="header-anchor" href="#策略模式-strategy" aria-label="Permalink to &quot;策略模式 Strategy&quot;">​</a></h1><p><strong>策略模式(Strategy): 将定义的一组算法封装起来，使其相互之间可以替换。</strong></p><p>策略模式最主要的特色是创建一系列策略算法，每组算法处理的业务都是相同的，只是处理的过程或者处理的结果不一样，所以它们又是可以相互替换的，这样就解决了算法与使用者之间的耦合。在测试层面上讲，由于每组算法相互之间的独立性，该模式更方便于对每组算法进行单元测试，保证算法的质量。</p><p><strong>策略模式的优点：</strong></p><ol><li><p>策略模式封装了一组代码簇，并且封装的代码相互之间独立，便于对算法的重复引用，提高了算法的复用率。</p></li><li><p>策略模式与继承相比，在类的继承中继承的方法是被封装在类中，因此当需求很多算法时，就不得不创建出多种类，这样会导致算法与算法的使用者耦合在一起，不利于算法的独立演化，并且在类的外部改变类的算法难度也是极大的。</p></li><li><p>同状态模式一样，策略模式也是一种优化分支判断语句的模式，采用策略模式对算法封装使得算法更利于维护。</p></li></ol><p><strong>策略模式的缺点：</strong></p><ol><li><p>由于选择哪种算法的决定权在用户，所以对用户来说就必须了解每种算法的实现。这就增加了用户对策略对象的使用成本。</p></li><li><p>由于每种算法间相互独立，这样对于一些复杂的算法处理相同逻辑的部分无法实现共享，这就会造成一些资源的浪费。不过这可以通过享元模式来解决。</p></li></ol><p>策略模式提供了一种遵循开闭原则的方法来处理算法的选择和变化，使得算法可以独立于使用它们的客户端代码进行变化。通过使用策略模式，可以提高算法的重用性和应用程序的灵活性。</p><hr><p>对于分支语句的优化，目前为止有 3 种模式，分别为工厂方法模式，状态模式与策略模式。</p><p>对于工厂方法模式来说，它是一种创建型模式，他的最终目的是创建对象。而状态模式与策略模式都是行为性模式，不过在状态模式中，其核心是对状态的控制来决定表现行为，所以状态之间通常是不能相互替代的，否则将产生不同的行为结果。而策略模式核心是算法，由于每种算法要处理的业务逻辑相同，因此他们可以相互替换，当然策略模式并不关心使用者环境，因为同一种策略模式最终产出的结果是一定的。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>Vue-Router 路由模式</li></ul><h3 id="vue-router-路由模式" tabindex="-1">Vue-Router 路由模式 <a class="header-anchor" href="#vue-router-路由模式" aria-label="Permalink to &quot;Vue-Router 路由模式&quot;">​</a></h3><p>vue-router 支持两种模式：哈希模式和 history 模式。</p><p>在 vue-router/src/index.js 中，会根据用户选择的模式匹配相应的路由替换规则。（以版本 3.5.4 为例）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 节选vue-router/src/index.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { HashHistory } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./history/hash&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { HTML5History } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./history/html5&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AbstractHistory } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./history/abstract&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> VueRouter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> RouterOptions</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.mode </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &quot;hash&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.fallback </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;history&quot;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">supportsPushState </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.fallback </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fallback) {</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;hash&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inBrowser) {</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;abstract&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    switch</span><span style="color:#24292E;"> (mode) {</span></span>
<span class="line"><span style="color:#D73A49;">      case</span><span style="color:#032F62;"> &quot;history&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> HTML5History</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base);</span></span>
<span class="line"><span style="color:#D73A49;">        break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">      case</span><span style="color:#032F62;"> &quot;hash&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> HashHistory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fallback);</span></span>
<span class="line"><span style="color:#D73A49;">        break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">      case</span><span style="color:#032F62;"> &quot;abstract&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> AbstractHistory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base);</span></span>
<span class="line"><span style="color:#D73A49;">        break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">      default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (process.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#D73A49;"> !==</span><span style="color:#032F62;"> &quot;production&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">          assert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`invalid mode: \${</span><span style="color:#24292E;">mode</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 vue-router/src/history 目录下，History 类定义了一些基础的约束，面向不同 API 的实现策略，继承自 History。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 节选自vue-router/src/history/base.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> History</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // implemented by sub-classes</span></span>
<span class="line"><span style="color:#D73A49;">  +</span><span style="color:#6F42C1;">setupListeners</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Function</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 节选自vue-router/src/history/hash.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> HashHistory</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> History</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 哈希模式用hashchange事件进行监听</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#6F42C1;">  setupListeners</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> eventType</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> supportsPushState </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> &quot;popstate&quot;</span><span style="color:#D73A49;"> :</span><span style="color:#032F62;"> &quot;hashchange&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(eventType, handleRoutingEvent);</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.listeners.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(eventType, handleRoutingEvent);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 节选自vue-router/src/history/history.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> HTML5History</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> History</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Html5 History模式用popstate事件进行监听</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#6F42C1;">  setupListeners</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;popstate&quot;</span><span style="color:#24292E;">, handleRoutingEvent);</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.listeners.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;popstate&quot;</span><span style="color:#24292E;">, handleRoutingEvent);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,19)]))}const h=n(o,[["render",e]]);export{u as __pageData,h as default};
