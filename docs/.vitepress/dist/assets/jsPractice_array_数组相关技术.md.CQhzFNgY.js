import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"数组技术","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/array/数组相关技术.md","filePath":"jsPractice/array/数组相关技术.md"}'),p={name:"jsPractice/array/数组相关技术.md"};function e(t,s,r,c,y,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="数组技术" tabindex="-1">数组技术 <a class="header-anchor" href="#数组技术" aria-label="Permalink to &quot;数组技术&quot;">​</a></h1><h2 id="数组创建" tabindex="-1">数组创建 <a class="header-anchor" href="#数组创建" aria-label="Permalink to &quot;数组创建&quot;">​</a></h2><ul><li>字面量</li><li>new Array()</li><li>Array.of()</li><li>Array.form()</li></ul><h3 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span></code></pre></div><h3 id="new-array" tabindex="-1">new Array() <a class="header-anchor" href="#new-array" aria-label="Permalink to &quot;new Array()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 1,2,3</span></span></code></pre></div><h3 id="array-of" tabindex="-1">Array.of() <a class="header-anchor" href="#array-of" aria-label="Permalink to &quot;Array.of()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [1, &quot;abc&quot;, true]</span></span></code></pre></div><h3 id="array-form" tabindex="-1">Array.form() <a class="header-anchor" href="#array-form" aria-label="Permalink to &quot;Array.form()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// [1,2,3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({ length: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }, (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// [1,2,3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr3</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({ </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">, length: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span></code></pre></div><h2 id="数组分组" tabindex="-1">数组分组 <a class="header-anchor" href="#数组分组" aria-label="Permalink to &quot;数组分组&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> group</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 不是数组</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(arr)) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 不是函数</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &quot;function&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    throw</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fn必须是一个函数&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cur</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    v </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> fn</span><span style="color:#24292E;">(cur, index);</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Object.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj, v)) {</span></span>
<span class="line"><span style="color:#24292E;">      obj[v] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    obj[v].</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">  }, {});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 按照长度分组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> result</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> group</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;pear&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;orange&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;peach&quot;</span><span style="color:#24292E;">], (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> v.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 按照份数分组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> list</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;">  [</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">, score: </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&quot;Jim&quot;</span><span style="color:#24292E;">, score: </span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&quot;Nick&quot;</span><span style="color:#24292E;">, score: </span><span style="color:#005CC5;">88</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> result</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> group</span><span style="color:#24292E;">(list, (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> v.score </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 60</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span></code></pre></div><h2 id="创建模拟数据" tabindex="-1">创建模拟数据 <a class="header-anchor" href="#创建模拟数据" aria-label="Permalink to &quot;创建模拟数据&quot;">​</a></h2><p><strong>Array.from()</strong></p><p>第一个参数传入对应类数组和可遍历对象，第二个函数参数则相当于对生成的数组做一次map;</p><p>可遍历对象和类数组:数组、字符串、Set、Map、NodeList、HTMLCollection、arguments以及拥有 length 属性的任意对象</p><p>示例1: <strong><code>推荐</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> createMock</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">length</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 20</span><span style="color:#24292E;">, </span><span style="color:#E36209;">creator</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({ length }, creator);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> data</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> createMock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  id: i,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">\`name-\${</span><span style="color:#24292E;">i</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;"> 1</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><p>示例2:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> createMock</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">length</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 20</span><span style="color:#24292E;">, </span><span style="color:#E36209;">creator</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">(length).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(creator);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> data</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> createMock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  id: i,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">\`name-\${</span><span style="color:#24292E;">i</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;"> 1</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div>`,21)]))}const u=a(p,[["render",e]]);export{C as __pageData,u as default};
