import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const D=JSON.parse('{"title":"网络相关","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/network/HTTP相关技术.md","filePath":"jsPractice/network/HTTP相关技术.md"}'),o={name:"jsPractice/network/HTTP相关技术.md"};function e(t,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="网络相关" tabindex="-1">网络相关 <a class="header-anchor" href="#网络相关" aria-label="Permalink to &quot;网络相关&quot;">​</a></h1><h2 id="获取url参数" tabindex="-1">获取URL参数 <a class="header-anchor" href="#获取url参数" aria-label="Permalink to &quot;获取URL参数&quot;">​</a></h2><h3 id="new-urlsearchparams" tabindex="-1">new URLSearchParams() <a class="header-anchor" href="#new-urlsearchparams" aria-label="Permalink to &quot;new URLSearchParams()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> getQueryString</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> key</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> URLSearchParams</span><span style="color:#24292E;">(location.search).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span></code></pre></div><h3 id="new-url" tabindex="-1">new URL() <a class="header-anchor" href="#new-url" aria-label="Permalink to &quot;new URL()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> getQueryString</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> key</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> URL</span><span style="color:#24292E;">(location.href).searchParams.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#6A737D;">// URLObj.searchParams instanceof URLSearchParams 为 true，证明是其实例</span></span></code></pre></div><h3 id="reduce" tabindex="-1">reduce() <a class="header-anchor" href="#reduce" aria-label="Permalink to &quot;reduce()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getQueryString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> urlObj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> location.search</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cur</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> cur.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> !=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">            return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        obj[</span><span style="color:#6F42C1;">decodeURIComponent</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> decodeURIComponent</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> urlObj[key];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="获取url参数并转为对象" tabindex="-1">获取URL参数并转为对象 <a class="header-anchor" href="#获取url参数并转为对象" aria-label="Permalink to &quot;获取URL参数并转为对象&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取URL参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> url</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> queryObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> ?</span><span style="color:#24292E;"> window.location.href </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> search</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> reg</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">?&amp;=]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)=(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">?&amp;=]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  search.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(reg, (</span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> decodeURIComponent</span><span style="color:#24292E;">($1);</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> decodeURIComponent</span><span style="color:#24292E;">($2);</span></span>
<span class="line"><span style="color:#24292E;">    val </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> String</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">    obj[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> rs;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 返回参数对象</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getQueryString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> pattern</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)=(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">ig</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> parames</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// 定义参数对象</span></span>
<span class="line"><span style="color:#24292E;">  url.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(pattern, (</span><span style="color:#E36209;">$</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> parames[$1] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $2);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> parames;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 利用正则表达式 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;http://www.baidu.com?name=elephant&amp;age=25&amp;sex=male&amp;num=100&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">getQueryString</span><span style="color:#24292E;">(url)</span></span></code></pre></div><h2 id="对象转url参数" tabindex="-1">对象转URL参数 <a class="header-anchor" href="#对象转url参数" aria-label="Permalink to &quot;对象转URL参数&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;"> 对象转url参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {object}</span><span style="color:#24292E;"> data</span><span style="color:#6A737D;">,对象</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Boolean}</span><span style="color:#24292E;"> isPrefix</span><span style="color:#6A737D;">,是否自动加上&quot;?&quot;</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {string}</span><span style="color:#24292E;"> arrayFormat</span><span style="color:#6A737D;"> 规则 indices|brackets|repeat|comma</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> queryParams</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}, </span><span style="color:#E36209;">isPrefix</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arrayFormat</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;brackets&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> prefix</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> isPrefix </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> &#39;?&#39;</span><span style="color:#D73A49;"> :</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> _result</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> ([</span><span style="color:#032F62;">&#39;indices&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;brackets&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;repeat&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;comma&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(arrayFormat) </span><span style="color:#D73A49;">==</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  arrayFormat </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;brackets&#39;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;"> for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> key</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> value</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> data[key]</span></span>
<span class="line"><span style="color:#6A737D;">  // 去掉为空的参数</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> ([</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">   continue</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果值为数组，另行处理</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (value.</span><span style="color:#005CC5;">constructor</span><span style="color:#D73A49;"> ===</span><span style="color:#24292E;"> Array) {</span></span>
<span class="line"><span style="color:#6A737D;">   // e.g. {ids: [1, 2, 3]}</span></span>
<span class="line"><span style="color:#D73A49;">   switch</span><span style="color:#24292E;"> (arrayFormat) {</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;indices&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">     // 结果: ids[0]=1&amp;ids[1]=2&amp;ids[2]=3</span></span>
<span class="line"><span style="color:#D73A49;">     for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> value.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}[\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}]=\${</span><span style="color:#24292E;">value</span><span style="color:#032F62;">[</span><span style="color:#24292E;">i</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#D73A49;">     break</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;brackets&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">     // 结果: ids[]=1&amp;ids[]=2&amp;ids[]=3</span></span>
<span class="line"><span style="color:#24292E;">     value.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">_value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}[]=\${</span><span style="color:#24292E;">_value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     })</span></span>
<span class="line"><span style="color:#D73A49;">     break</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;repeat&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">     // 结果: ids=1&amp;ids=2&amp;ids=3</span></span>
<span class="line"><span style="color:#24292E;">     value.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">_value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">_value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     })</span></span>
<span class="line"><span style="color:#D73A49;">     break</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;comma&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">     // 结果: ids=1,2,3</span></span>
<span class="line"><span style="color:#D73A49;">     let</span><span style="color:#24292E;"> commaStr </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">     value.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">_value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      commaStr </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> (commaStr </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> &#39;,&#39;</span><span style="color:#D73A49;"> :</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> _value</span></span>
<span class="line"><span style="color:#24292E;">     })</span></span>
<span class="line"><span style="color:#24292E;">     _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">commaStr</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">     break</span></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     value.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">_value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}[]=\${</span><span style="color:#24292E;">_value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     })</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   _result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;"> return</span><span style="color:#24292E;"> _result.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ?</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> _result.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&amp;&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 请求参数转换</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> queryString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> key</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;=&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#6F42C1;"> encodeURIComponent</span><span style="color:#24292E;">(obj[key]));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例3</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> getParameters</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> URL</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#005CC5;"> JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`{&quot;\${</span><span style="color:#6F42C1;">decodeURI</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">URL</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">split</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#032F62;">)[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">]).</span><span style="color:#6F42C1;">replace</span><span style="color:#032F62;">(</span><span style="color:#032F62;">/&quot;/</span><span style="color:#D73A49;">g</span><span style="color:#032F62;">, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">&quot;&#39;</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#032F62;">(</span><span style="color:#032F62;">/&amp;/</span><span style="color:#D73A49;">g</span><span style="color:#032F62;">, </span><span style="color:#032F62;">&#39;&quot;,&quot;&#39;</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#032F62;">(</span><span style="color:#032F62;">/=/</span><span style="color:#D73A49;">g</span><span style="color:#032F62;">, </span><span style="color:#032F62;">&#39;&quot;:&quot;&#39;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}&quot;}\`</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://www.google.com.hk/search?q=js+md&amp;newwindow=1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// {q: &#39;js+md&#39;, newwindow: &#39;1&#39;}</span></span></code></pre></div><h2 id="对象转formdata" tabindex="-1">对象转FormData <a class="header-anchor" href="#对象转formdata" aria-label="Permalink to &quot;对象转FormData&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 对象转formdata</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> obj</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> objToFormData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> formData</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> FormData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(obj).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> value</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> obj[key];</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      value.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">subValue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> formData.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> \`[\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}]\`</span><span style="color:#24292E;">, subValue));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      formData.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(key, obj[key]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> formData;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="请求休眠" tabindex="-1">请求休眠 <a class="header-anchor" href="#请求休眠" aria-label="Permalink to &quot;请求休眠&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 请求休眠xxxms</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Number}</span><span style="color:#24292E;"> milliseconds</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@demo</span></span>
<span class="line"><span style="color:#6A737D;">  const fetchData = async () =&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">    await sleep(1000);</span></span>
<span class="line"><span style="color:#6A737D;">    await request()</span></span>
<span class="line"><span style="color:#6A737D;">  };</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> sleep</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> ms</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(resolve, ms));</span></span></code></pre></div><h2 id="ajax" tabindex="-1">AJAX <a class="header-anchor" href="#ajax" aria-label="Permalink to &quot;AJAX&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> ajax</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> { method, url, data, params, async, success, headers } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options;</span></span>
<span class="line"><span style="color:#6A737D;">  // init options</span></span>
<span class="line"><span style="color:#24292E;">  method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &quot;GET&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  async </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> async </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (params) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> query</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;">params[key])</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`\${</span><span style="color:#24292E;">url</span><span style="color:#032F62;">}?\${</span><span style="color:#24292E;">query</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // get xhr</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.XMLHttpRequest </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">xhr) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#6F42C1;"> getActiveXObject</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> version</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#032F62;">        &quot;MSXML2.XMLHttp.6.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;MSXML2.XMLHttp.3.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;MSXML2.XMLHttp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ];</span></span>
<span class="line"><span style="color:#D73A49;">      for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; version.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">          // eslint-disable-next-line no-undef</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> ActiveXObject</span><span style="color:#24292E;">(version[i]);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#D73A49;">          throw</span><span style="color:#6F42C1;"> Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Not support ActiveXObject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    xhr </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> getActiveXObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // request success callback</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      (xhr.readyState </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 4</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> xhr.status </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 200</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> xhr.status </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 300</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      xhr.status </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 304</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      success </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> success</span><span style="color:#24292E;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // create request</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(method, url, async);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // extends headers</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (headers) {</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(headers).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> xhr.</span><span style="color:#6F42C1;">setRequestHeader</span><span style="color:#24292E;">(key, headers[key]));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // send request</span></span>
<span class="line"><span style="color:#24292E;">  method.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;get&quot;</span><span style="color:#D73A49;"> ?</span><span style="color:#24292E;"> xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="promise顺序执行" tabindex="-1">Promise顺序执行 <a class="header-anchor" href="#promise顺序执行" aria-label="Permalink to &quot;Promise顺序执行&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> runPromises</span><span style="color:#24292E;">(</span><span style="color:#E36209;">promiseCreators</span><span style="color:#24292E;">, </span><span style="color:#E36209;">initData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> promiseCreators.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">promise</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> next</span><span style="color:#24292E;">(data));</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(initData));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> login</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login:&quot;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#6F42C1;"> resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        token: </span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getUserInfo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getUserInfo:&quot;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#6F42C1;"> resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&quot;user-1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        id: </span><span style="color:#005CC5;">988</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getOrders</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getOrders: data&quot;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#6F42C1;"> resolve</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          orderId: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          productId: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          price: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      ]);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> initData</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, pwd: </span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Promise.resolve(initData)</span></span>
<span class="line"><span style="color:#6A737D;">//   .then((data) =&gt; login(data))</span></span>
<span class="line"><span style="color:#6A737D;">//   .then((data) =&gt; getUserInfo(data))</span></span>
<span class="line"><span style="color:#6A737D;">//   .then((data) =&gt; getOrders(data))</span></span>
<span class="line"><span style="color:#6A737D;">//   .then((data) =&gt; console.log(&quot;orders&quot;, data));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 reduce 封装的 runPromises 方法，确保返回 Promise 且执行结果是下一个函数的入参</span></span>
<span class="line"><span style="color:#6F42C1;">runPromises</span><span style="color:#24292E;">([login, getUserInfo, getOrders], initData).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;res&quot;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,28)]))}const A=n(o,[["render",e]]);export{D as __pageData,A as default};
