import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"时间复杂度","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/basic/时间复杂度.md","filePath":"algorithm/basic/时间复杂度.md"}'),n={name:"algorithm/basic/时间复杂度.md"};function o(r,l,h,p,s,c){return t(),a("div",null,l[0]||(l[0]=[e('<h1 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h1><p>时间复杂度反映的是数据规模 n 很大的时候的一个增长趋势，所以它表示的时候会忽略系数、常数、低阶。</p><ul><li>T(n) = O(f(n)) 表示算法的执行时间与每行代码的执行次数的正比关系</li><li>T(n) 表示算法执行总时间</li><li>f(n) 表示每行代码执行总次数</li><li>n 表示数据的规模</li></ul><h3 id="常见时间复杂度" tabindex="-1">常见时间复杂度 <a class="header-anchor" href="#常见时间复杂度" aria-label="Permalink to &quot;常见时间复杂度&quot;">​</a></h3><ul><li>O(1): Constant Complexity 常数复杂度</li><li>O(logn): Logarithmic Complexity 对数复杂度</li><li>O(n): Linear Complexity 线性时间复杂度</li><li>O(nlogn) 线性对数阶</li><li>O(n^2): N square Complexity 平⽅阶</li><li>O(n^3): N cubic Complexity ⽴⽅阶</li><li>O(2^n): Exponential Growth 指数</li><li>O(n!): Factorial 阶乘</li><li>O(m^n):</li></ul><p>时间复杂度大小关系： O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p><h3 id="公式" tabindex="-1">公式 <a class="header-anchor" href="#公式" aria-label="Permalink to &quot;公式&quot;">​</a></h3><p>T(n)= O(f(n))</p><ul><li>T(n)表示代码执行的时间；</li><li>n 表示数据规模的大小；</li><li>f(n) 表示每行代码执行的次数总和。</li></ul><p>因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。</p><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p><h2 id="分析方法" tabindex="-1">分析方法 <a class="header-anchor" href="#分析方法" aria-label="Permalink to &quot;分析方法&quot;">​</a></h2><p>时间复杂度，表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，通常都可以忽略掉。因为它本身对增长趋势并没有影响。</p><ul><li>只关注循环执行次数最多的一段代码</li><li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li><li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li></ul><h2 id="复杂度量级" tabindex="-1">复杂度量级 <a class="header-anchor" href="#复杂度量级" aria-label="Permalink to &quot;复杂度量级&quot;">​</a></h2><p>按数量级递增</p><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><p>主定理推算递归算法的时间复杂度</p><ul><li>二分查找，log(n)</li><li>二叉树查找</li></ul>',19)]))}const m=i(n,[["render",o]]);export{u as __pageData,m as default};
