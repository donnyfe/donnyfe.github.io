import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"二分法 Binary Search","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/search/二分查找.md","filePath":"algorithm/search/二分查找.md"}'),o={name:"algorithm/search/二分查找.md"};function e(t,s,r,c,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="二分法-binary-search" tabindex="-1">二分法 Binary Search <a class="header-anchor" href="#二分法-binary-search" aria-label="Permalink to &quot;二分法 Binary Search&quot;">​</a></h1><p>二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><p>时间复杂度：O(logn)</p><p>假设数据大小是 n，每次查找后数据都会缩小为原来的一半，也就是会除以 2。最坏情况下，直到查找区间被缩小为空，才停止。可以看出来，这是一个等比数列。其中 n/2k=1 时，k 的值就是总共缩小的次数。而每一次缩小操作只涉及两个数据的大小比较，所以，经过了 k 次区间缩小操作，时间复杂度就是 O(k)。通过 n/2k=1，我们可以求得 k=log2n，所以时间复杂度就是 O(logn)。</p><p>递推公式：n/2k=1</p><ul><li>第1次：n</li><li>第2次：n/2</li><li>第3次：n/4</li><li>第4次：n/8</li></ul><p>logn 是一个非常“恐怖”的数量级，即便 n 非常非常大，对应的 logn 也很小。比如 n 等于 2 的 32 次方，这个数很大了吧？大约是 42 亿。也就是说，如果我们在 42 亿个数据中用二分查找一个数据，最多需要比较 32 次。</p><p>用大 O 标记法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1) 有可能表示的是一个非常大的常量值，比如 O(1000)、O(10000)。所以，常量级时间复杂度的算法有时候可能还没有 O(logn) 的算法执行效率高。</p><p>二分查找应用场景的局限性：</p><p>1、二分查找依赖的是顺序表结构，简单点说就是数组。</p><p>主要原因是二分查找算法需要按照下标随机访问元素。数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。</p><p>2、二分查找针对的是有序数据。</p><p>二分查找对这一点的要求比较苛刻，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节里我们讲到，排序的时间复杂度最低是 O(nlogn)。所以，如果我们针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。但是，如果我们的数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。</p><p>3、数据量太小不适合二分查找。</p><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如我们在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>4、数据量太大也不适合二分查找。</p><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，我们有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><blockquote><p>唐纳德·克努特（Donald E.Knuth）在《计算机程序设计艺术》的第 3 卷《排序和查找》中说到：“尽管第一个二分查找算法于 1946 年出现，然而第一个完全正确的二分查找算法实现直到 1962 年才出现。”</p></blockquote><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><ol><li>首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。</li><li>如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。</li><li>如果某一步数组为空，则表示找不到目标元素。</li></ol><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><h3 id="场景1" tabindex="-1">场景1 <a class="header-anchor" href="#场景1" aria-label="Permalink to &quot;场景1&quot;">​</a></h3><p>假设我们有 1000 万个整数数据，每个数据占 8 个字节，如何设计数据结构和算法，快速判断某个整数是否出现在这 1000 万数据中？ 我们希望这个功能不要占用太多的内存空间，最多不要超过 100MB，你会怎么做呢？</p><p>思路：</p><p>这个问题并不难。我们的内存限制是 100MB，每个数据大小是 8 字节，最简单的办法就是将数据存储在数组中，内存占用差不多是 80MB，符合内存的限制。借助今天讲的内容，我们可以先对这 1000 万数据从小到大排序，然后再利用二分查找算法，就可以快速地查找想要的数据了。看起来这个问题并不难，很轻松就能解决。</p><p>实际上，它暗藏了“玄机”。如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构。你可能会觉得，用散列表和二叉树也可以解决这个问题。实际上是不行的。虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲，不管是散列表还是二叉树，都会需要比较多的额外的内存空间。如果用散列表或者二叉树来存储这 1000 万的数据，用 100MB 的内存肯定是存不下的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外存储其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小下解决这个问题。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><blockquote><p>注意：容易出错的3个地方</p><p>1、循环退出条件</p><p>2、mid 的取值</p><p>​ 实际上，mid=(low+high)/2 这种写法是有问题的。因为如果 low 和 high 比较大的话，两者之和就有可能会溢出。改进的方法是将 mid 的计算方式写成 low+(high-low)/2。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算 low+((high-low)&gt;&gt;1)。因为相比除法运算来说，计算机处理位运算要快得多。</p><p>3、low 和 high 的更新</p><p>​ low=mid+1，high=mid-1。注意这里的 +1 和 -1，如果直接写成 low=mid 或者 high=mid，就可能会发生死循环。比如，当 high=3，low=3 时，如果 a[3]不等于 value，就会导致一直循环不退出。</p></blockquote><h3 id="递归方式" tabindex="-1">递归方式 <a class="header-anchor" href="#递归方式" aria-label="Permalink to &quot;递归方式&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 递归</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">low</span><span style="color:#24292E;">, </span><span style="color:#E36209;">high</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(low </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> high) </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> parseInt</span><span style="color:#24292E;">((low </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> high) </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> arr[mid]) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> mid</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[mid]) {</span></span>
<span class="line"><span style="color:#24292E;">        low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(arr, low, high, key)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[mid]) {</span></span>
<span class="line"><span style="color:#24292E;">        high </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(arr, low, high, key)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">86</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> targetIndex </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(arr,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(targetIndex); </span><span style="color:#6A737D;">// 9 返回目标元素的索引值</span></span></code></pre></div><h3 id="非递归方式" tabindex="-1">非递归方式 <a class="header-anchor" href="#非递归方式" aria-label="Permalink to &quot;非递归方式&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//  非递归</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ennd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        middle,</span></span>
<span class="line"><span style="color:#24292E;">        element</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;">(start </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> ennd) {</span></span>
<span class="line"><span style="color:#24292E;">        middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ennd) </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[middle];</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;">(target </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> element) {</span></span>
<span class="line"><span style="color:#D73A49;">            return</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;">(target </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> element) {</span></span>
<span class="line"><span style="color:#24292E;">            start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;">(target </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> element) {</span></span>
<span class="line"><span style="color:#24292E;">            ennd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">86</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> targetIndex </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(targetIndex); </span><span style="color:#6A737D;">// 9 返回目标元素的索引值</span></span></code></pre></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">* 给一个数组 nums ，找出2个数，使他们的合为 target</span></span>
<span class="line"><span style="color:#6A737D;">* 类似 leetcode 第一题 &lt;https://leetcode.com/problems/two-sum/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Array}</span><span style="color:#24292E;"> nums</span><span style="color:#6A737D;"> 所给数组</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {number}</span><span style="color:#24292E;"> target</span><span style="color:#6A737D;"> 目标值</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {Array}</span><span style="color:#6A737D;"> 找出的那2个值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> nums</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#005CC5;">      target</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 9</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> twoSum</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  nums.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> len</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> nums.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> nums[i]</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> idx </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(nums, i </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, t)</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (idx </span><span style="color:#D73A49;">!==</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> [nums[i], nums[idx]]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* 二分查值</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Array}</span><span style="color:#24292E;"> arr</span><span style="color:#6A737D;"> the data</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {nubmer}</span><span style="color:#24292E;"> left</span><span style="color:#6A737D;"> the start index</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {number}</span><span style="color:#24292E;"> right</span><span style="color:#6A737D;"> the end index</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {number}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> the target value</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {nubmer}</span><span style="color:#6A737D;"> the target value&#39;s index, if</span></span>
<span class="line"><span style="color:#6A737D;">* no exist, it will return -1</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> binarySearch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">left</span><span style="color:#24292E;">, </span><span style="color:#E36209;">right</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (right </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> left) {</span></span>
<span class="line"><span style="color:#D73A49;">    throw</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;right can not less than left&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> mid</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> right) {</span></span>
<span class="line"><span style="color:#24292E;">    mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> right) </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (arr[mid] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> val) left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">    else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (arr[mid] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> val) </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#D73A49;">    else</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr[mid] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">:</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">twoSum</span><span style="color:#24292E;">(nums, target) </span><span style="color:#6A737D;">// [2, 7]</span></span></code></pre></div>`,34)]))}const D=n(o,[["render",e]]);export{A as __pageData,D as default};
