import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"LRU缓存淘汰算法 lru-cache","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/other/LRU缓存淘汰算法.md","filePath":"algorithm/other/LRU缓存淘汰算法.md"}'),o={name:"algorithm/other/LRU缓存淘汰算法.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="lru缓存淘汰算法-lru-cache" tabindex="-1">LRU缓存淘汰算法 lru-cache <a class="header-anchor" href="#lru缓存淘汰算法-lru-cache" aria-label="Permalink to &quot;LRU缓存淘汰算法 lru-cache&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>使用普通对象实现缓存操作导致的问题是，这个对象将会常驻在老生代中。缓存中存储的键越多，长期存活的对象也就越多，这将导致垃圾回收在进行扫描和整理时，对这些对象做无用功。</p><h2 id="什么是-lru-缓存" tabindex="-1">什么是 LRU 缓存？ <a class="header-anchor" href="#什么是-lru-缓存" aria-label="Permalink to &quot;什么是 LRU 缓存？&quot;">​</a></h2><p>LRU (Least Recently Used) 是一种常用的缓存淘汰算法，核心思想是&quot;最近使用的数据最有价值&quot;。当缓存空间不足时，优先淘汰最久未使用的数据。</p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ol><li><strong>固定容量</strong>: 缓存空间有限，需要设置最大容量</li><li><strong>快速访问</strong>: get/put 操作的时间复杂度为 O(1)</li><li><strong>淘汰机制</strong>: 当缓存满时，自动删除最久未使用的数据</li><li><strong>更新顺序</strong>: 每次访问数据都要更新其为最近使用</li></ol><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>LRU 缓存的标准实现需要用到两种数据结构：</p><ol><li><strong>哈希表</strong>: 存储键值对，实现 O(1) 的查找</li><li><strong>双向链表</strong>: 维护数据项的使用顺序，最近使用的在表头，最久未使用的在表尾</li></ol><h2 id="缓存淘汰策略" tabindex="-1">缓存淘汰策略 <a class="header-anchor" href="#缓存淘汰策略" aria-label="Permalink to &quot;缓存淘汰策略&quot;">​</a></h2><ul><li>FIFO（First In，First Out）: 先进先出策略</li><li>LFU（Least Frequently Used）:最少使用策略, 基于访问频率的淘汰策略</li><li>LRU（Least Recently Used）:最近最少使用策略</li><li>ARC（Adaptive Replacement Cache）:自适应缓存替换策略</li></ul><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><ul><li><p>HTTP 缓存响应消息</p></li><li><p>Vue的keep-alive</p></li></ul><p><a href="https://github.com/isaacs/node-lru-cache" target="_blank" rel="noreferrer">LRU缓存淘汰算法</a></p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><h3 id="简化版" tabindex="-1">简化版 <a class="header-anchor" href="#简化版" aria-label="Permalink to &quot;简化版&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> cache</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;">  get</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(cache[key]) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> cache[key]</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // get from otherwise</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> set</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  cache[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="最近最少使用策略" tabindex="-1">最近最少使用策略 <a class="header-anchor" href="#最近最少使用策略" aria-label="Permalink to &quot;最近最少使用策略&quot;">​</a></h3><p>说明：</p><p>设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。 获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。 写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p>进阶: 你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#24292E;">LRUCache cache </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> LRUCache</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">2</span><span style="color:#6A737D;"> /* 缓存容量 */</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 返回  1</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// 该操作会使得密钥 2 作废</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 返回 -1 (未找到)</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// 该操作会使得密钥 1 作废</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 返回 -1 (未找到)</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 返回  3</span></span>
<span class="line"><span style="color:#24292E;">cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 返回  4</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> LRUCache</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">capacity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.capacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> capacity</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.map </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">  get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;undefined&#39;</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key, val)</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">  put</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(key)) { </span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key) </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key, value)</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> keys </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.map.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.capacity) { </span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(keys.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value) </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="加入缓存限制策略" tabindex="-1">加入缓存限制策略 <a class="header-anchor" href="#加入缓存限制策略" aria-label="Permalink to &quot;加入缓存限制策略&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> LimitableMap</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">limit</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.limit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> limit </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> hasOwnProperty</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.hasOwnProperty</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">LimitableMap</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">set</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.map</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> keys </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.keys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(map, key)) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 超过限制，淘汰缓存</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(keys.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ===</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.limit) {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> firstKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> keys.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">      delete</span><span style="color:#24292E;"> map[firstKey]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  map[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">LimitableMap</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.map[key];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="双向链表实现" tabindex="-1">双向链表实现 <a class="header-anchor" href="#双向链表实现" aria-label="Permalink to &quot;双向链表实现&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> LRUCache</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#E36209;"> capacity</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#E36209;"> size</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#E36209;"> cache</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">DLinkedNode</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#E36209;"> head</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#E36209;"> tail</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span></span>
<span class="line"><span style="color:#D73A49;">	constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">capacity</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.capacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> capacity</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.size </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.cache </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">		// 使用伪头部和伪尾部节点</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.head </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.tail </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.head.next </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.tail</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.tail.prev </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.head</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6F42C1;">	get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> node</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">node) </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;">		// 将节点移动到头部</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">moveToHead</span><span style="color:#24292E;">(node)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> node.value</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6F42C1;">	put</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> node</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">node) {</span></span>
<span class="line"><span style="color:#6A737D;">			// 创建新节点</span></span>
<span class="line"><span style="color:#D73A49;">			const</span><span style="color:#005CC5;"> newNode</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">(key, value)</span></span>
<span class="line"><span style="color:#005CC5;">			this</span><span style="color:#24292E;">.cache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key, newNode)</span></span>
<span class="line"><span style="color:#005CC5;">			this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">addToHead</span><span style="color:#24292E;">(newNode)</span></span>
<span class="line"><span style="color:#005CC5;">			this</span><span style="color:#24292E;">.size</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#D73A49;">			if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.capacity) {</span></span>
<span class="line"><span style="color:#6A737D;">				// 删除尾部节点</span></span>
<span class="line"><span style="color:#D73A49;">				const</span><span style="color:#005CC5;"> tail</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">removeTail</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">				this</span><span style="color:#24292E;">.cache.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(tail.key)</span></span>
<span class="line"><span style="color:#005CC5;">				this</span><span style="color:#24292E;">.size</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">			// 更新值</span></span>
<span class="line"><span style="color:#24292E;">			node.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#005CC5;">			this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">moveToHead</span><span style="color:#24292E;">(node)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> addToHead</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		node.prev </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.head</span></span>
<span class="line"><span style="color:#24292E;">		node.next </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.head.next</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.head.next</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.head.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> removeNode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		node.prev</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.next</span></span>
<span class="line"><span style="color:#24292E;">		node.next</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.prev</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> moveToHead</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">removeNode</span><span style="color:#24292E;">(node)</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">addToHead</span><span style="color:#24292E;">(node)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> removeTail</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> DLinkedNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> node</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.tail.prev</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">removeNode</span><span style="color:#24292E;">(node)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> node</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="相关拓展" tabindex="-1">相关拓展 <a class="header-anchor" href="#相关拓展" aria-label="Permalink to &quot;相关拓展&quot;">​</a></h2><p>缓存泄露三个原因：</p><ul><li>缓存队列消费不及时。</li><li>作用域未释放。</li><li>直接将内存作为缓存的方案要十分慎重。除了限制缓存的大小外，另外要考虑的事情是，进程之间无法共享内存。如果在进程内使用缓存，这些缓存不可避免地有重复，对物理内存的使用是一种浪费。</li></ul><p>如何使用大量缓存，目前比较好的解决方案是采用进程外的缓存，进程自身不存储状态。外部的缓存软件有着良好的缓存过期淘汰策略以及自有的内存管理，不影响Node进程的性能。</p><p>将缓存转移到外部，减少常驻内存的对象的数量，让垃圾回收更高效。</p><p>外部缓存方案：</p><ul><li>Redis： <a href="https://github.com/mranney/node_redis" target="_blank" rel="noreferrer">https://github.com/mranney/node_redis</a></li><li>Memcached： <a href="https://github.com/3rd-Eden/node-memcached" target="_blank" rel="noreferrer">https://github.com/3rd-Eden/node-memcached</a></li></ul>`,35)]))}const h=a(o,[["render",e]]);export{C as __pageData,h as default};
