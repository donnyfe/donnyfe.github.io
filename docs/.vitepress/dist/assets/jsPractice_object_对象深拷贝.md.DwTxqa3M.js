import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"对象深拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/object/对象深拷贝.md","filePath":"jsPractice/object/对象深拷贝.md"}'),p={name:"jsPractice/object/对象深拷贝.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="对象深拷贝" tabindex="-1">对象深拷贝 <a class="header-anchor" href="#对象深拷贝" aria-label="Permalink to &quot;对象深拷贝&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,修改内容不互相影响</p><h2 id="技术方案" tabindex="-1">技术方案 <a class="header-anchor" href="#技术方案" aria-label="Permalink to &quot;技术方案&quot;">​</a></h2><ul><li>JSON.parse(JSON.stringify())</li><li>递归实现</li><li>lodash _.cloneDeep()</li><li>jQuery.extend()</li></ul><h3 id="json-parse-json-stringify" tabindex="-1">JSON.parse(JSON.stringify()) <a class="header-anchor" href="#json-parse-json-stringify" aria-label="Permalink to &quot;JSON.parse(JSON.stringify())&quot;">​</a></h3><p>缺陷: undefined、symbol和函数会被JSON.stringify()忽略</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  key: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  key1: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  key3</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">  key4: </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(obj))</span></span>
<span class="line"><span style="color:#6A737D;">// {&quot;key&quot;:&quot;A&quot;}</span></span></code></pre></div><h3 id="递归实现" tabindex="-1">递归实现 <a class="header-anchor" href="#递归实现" aria-label="Permalink to &quot;递归实现&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// https://segmentfault.com/a/1190000020255831</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> deepClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> WeakMap</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> RegExp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> RegExp</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &quot;object&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj)) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> cloneObj</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(obj, cloneObj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">      cloneObj[key] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> deepClone</span><span style="color:#24292E;">(obj[key], map)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> cloneObj</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="lodash-clonedeep" tabindex="-1">lodash _.cloneDeep() <a class="header-anchor" href="#lodash-clonedeep" aria-label="Permalink to &quot;lodash _.cloneDeep()&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    b: { f: { g: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } },</span></span>
<span class="line"><span style="color:#24292E;">    c: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _.</span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(obj1);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1.b.f </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj2.b.f);</span><span style="color:#6A737D;">// false</span></span></code></pre></div>`,12)]))}const b=a(p,[["render",e]]);export{d as __pageData,b as default};
