import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"亨元模式 Flyweight","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/structure/亨元模式Flyweight.md","filePath":"pattern/structure/亨元模式Flyweight.md"}'),o={name:"pattern/structure/亨元模式Flyweight.md"};function t(e,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="亨元模式-flyweight" tabindex="-1">亨元模式 Flyweight <a class="header-anchor" href="#亨元模式-flyweight" aria-label="Permalink to &quot;亨元模式 Flyweight&quot;">​</a></h1><p>亨元模式（Flyweight Pattern）是一种结构型设计模式，旨在通过共享尽可能多的相似对象来有效地支持大量细粒度对象的复用，从而减少内存消耗。</p><h2 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-label="Permalink to &quot;核心思想&quot;">​</a></h2><p>亨元模式的核心思想是将对象的状态分为内部状态和外部状态：</p><ul><li>内部状态：可以在多个对象之间共享，不会随环境的改变而改变。</li><li>外部状态：每个对象独有的状态，会随环境的改变而改变。</li></ul><h2 id="亨元模式的优点" tabindex="-1">亨元模式的优点 <a class="header-anchor" href="#亨元模式的优点" aria-label="Permalink to &quot;亨元模式的优点&quot;">​</a></h2><ul><li>减少内存消耗：通过共享对象，减少了对内存的需求。</li><li>提高性能：减少了对象的创建和销毁，提高了性能。</li><li>减少对象数量：通过共享对象，减少了对象的数量。</li></ul><h2 id="亨元模式的缺点" tabindex="-1">亨元模式的缺点 <a class="header-anchor" href="#亨元模式的缺点" aria-label="Permalink to &quot;亨元模式的缺点&quot;">​</a></h2><ul><li>复杂性增加：需要区分内部状态和外部状态，增加了系统的复杂性。</li><li>不适用于所有场景：只有在大量细粒度对象需要共享时才适用。</li></ul><h2 id="亨元模式的应用场景" tabindex="-1">亨元模式的应用场景 <a class="header-anchor" href="#亨元模式的应用场景" aria-label="Permalink to &quot;亨元模式的应用场景&quot;">​</a></h2><p>亨元模式在需要大量相似对象的场景中非常有用，例如图形界面系统中的字符对象、游戏中的粒子系统等。</p><ul><li>文本编辑器：用于管理大量文本对象，如文档、段落、单词等。</li><li>游戏开发：用于管理大量游戏对象，如角色、道具、场景等。</li><li>数据库连接池：用于管理大量数据库连接。</li></ul><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> FlyWeight</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	abstract</span><span style="color:#6F42C1;"> notify</span><span style="color:#24292E;">(</span><span style="color:#E36209;">msg</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> ConcreteFlyWeight</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> FlyWeight</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">	notify</span><span style="color:#24292E;">(</span><span style="color:#E36209;">msg</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我是享元对象输出消息：&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> msg)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> UnsharedConcreteFlyWeight</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> FlyWeight</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">	notify</span><span style="color:#24292E;">(</span><span style="color:#E36209;">msg</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我是非享元对象输出消息：&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> msg)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> FlyWeightFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#D73A49;"> static</span><span style="color:#E36209;"> map</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">FlyWeight</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">		// 系统初始化一些干活儿的对象</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> ConcreteFlyWeight</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> ConcreteFlyWeight</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	static</span><span style="color:#6F42C1;"> getFlyWeight</span><span style="color:#24292E;">(</span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> FlyWeight</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">		// 如果对象不存在，则创建，如果存在，直接复用对象</span></span>
<span class="line"><span style="color:#D73A49;">		let</span><span style="color:#24292E;"> flyWeightInstance </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type)</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">flyWeightInstance) {</span></span>
<span class="line"><span style="color:#24292E;">			flyWeightInstance </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> ConcreteFlyWeight</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">			this</span><span style="color:#24292E;">.map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(type, flyWeightInstance)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> flyWeightInstance</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> flyA</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> FlyWeightFactory.</span><span style="color:#6F42C1;">getFlyWeight</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> flyB</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> FlyWeightFactory.</span><span style="color:#6F42C1;">getFlyWeight</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> flyC</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> FlyWeightFactory.</span><span style="color:#6F42C1;">getFlyWeight</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> flyD</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> FlyWeightFactory.</span><span style="color:#6F42C1;">getFlyWeight</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> normalObj</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> UnsharedConcreteFlyWeight</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">flyA.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;你好，比尔盖茨~&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">flyB.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;你好，库克~&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">flyC.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;你好，乔布斯~&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">flyD.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;你好，马云~&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">normalObj.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;你好，雷军~&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div>`,14)]))}const F=n(o,[["render",t]]);export{C as __pageData,F as default};
