import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"希尔排序 Shell","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/希尔排序.md","filePath":"algorithm/sort/希尔排序.md"}'),o={name:"algorithm/sort/希尔排序.md"};function e(t,s,r,c,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="希尔排序-shell" tabindex="-1">希尔排序 Shell <a class="header-anchor" href="#希尔排序-shell" aria-label="Permalink to &quot;希尔排序 Shell&quot;">​</a></h1><p>希尔排序又叫缩小增量排序。1959年Shell发明；第一个突破O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。</p><p>希尔排序的核心在于间隔序列的设定。 既可以提前设定好间隔序列，也可以动态的定义间隔序列。 动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。</p><ul><li>算法策略:</li><li>时间复杂度: 平均: O(nlogn)、最好: O(nlog2n)、最坏: O(nlog2n)</li><li>空间复杂度: O(1)</li><li>稳定性: 不稳定(排序后2个相等键值的顺序和排序之前它们的顺序不相同)</li><li>排序方式: in-place(占用常数内存，不占用额外内存)</li></ul><h2 id="排序原理" tabindex="-1">排序原理 <a class="header-anchor" href="#排序原理" aria-label="Permalink to &quot;排序原理&quot;">​</a></h2><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 动态定义间隔序列-算法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> shellSort</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        temp,</span></span>
<span class="line"><span style="color:#24292E;">        gap </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;希尔排序耗时:&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">    //动态定义间隔序列</span></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;">(gap </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 3</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        gap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gap </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 3</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (gap; gap </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; gap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(gap </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 3</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#D73A49;">        for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gap; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[i];</span></span>
<span class="line"><span style="color:#D73A49;">            for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> gap; j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> temp; j </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> gap) {</span></span>
<span class="line"><span style="color:#24292E;">                arr[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> gap] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            arr[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> gap] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;希尔排序耗时:&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,7)]))}const D=a(o,[["render",e]]);export{A as __pageData,D as default};
