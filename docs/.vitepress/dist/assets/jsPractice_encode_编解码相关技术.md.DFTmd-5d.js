import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"编解码相关技术","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/encode/编解码相关技术.md","filePath":"jsPractice/encode/编解码相关技术.md"}'),p={name:"jsPractice/encode/编解码相关技术.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="编解码相关技术" tabindex="-1">编解码相关技术 <a class="header-anchor" href="#编解码相关技术" aria-label="Permalink to &quot;编解码相关技术&quot;">​</a></h1><h2 id="escape" tabindex="-1">escape <a class="header-anchor" href="#escape" aria-label="Permalink to &quot;escape&quot;">​</a></h2><p><code>escape</code> 是对字符串(string)进行编码，作用是让它们在所有电脑上可读。编码之后的效果是<code>%XX</code>或者<code>%uXXXX</code>这种形式。其中 ASCII 字母、数字、<code>@*/+</code> ，这几个字符不会被编码，其余的都会。</p><ul><li>适合：字符串</li><li>不适合：URL</li></ul><h2 id="encodeuri" tabindex="-1">encodeURI <a class="header-anchor" href="#encodeuri" aria-label="Permalink to &quot;encodeURI&quot;">​</a></h2><ul><li><code>encodeURI</code> 方法不会对下列字符编码：ASCII 字母、数字、<code>~!@#$&amp;*()=:/,;?+&#39;</code>；</li><li><code>encodeURI</code> 和 <code>encodeURIComponent</code> 都是编码 URL，唯一区别就是编码的字符范围；</li><li>适合：编码完整URL</li></ul><h2 id="encodeuricomponent" tabindex="-1">encodeURIComponent <a class="header-anchor" href="#encodeuricomponent" aria-label="Permalink to &quot;encodeURIComponent&quot;">​</a></h2><ul><li><code>encodeURIComponent</code> 方法不会对下列字符编码：ASCII 字母、数字、<code>~!*()&#39;</code>；</li><li><code>encodeURI</code> 和 <code>encodeURIComponent</code> 都是编码 URL，唯一区别就是编码的字符范围；</li><li>适合：编码URL中的参数</li></ul><h2 id="btoa" tabindex="-1">btoa() <a class="header-anchor" href="#btoa" aria-label="Permalink to &quot;btoa()&quot;">​</a></h2><p>btoa()：将 ASCII 字符串或二进制数据转换成一个 base64 编码过的字符串, 该方法不能直接作用于 Unicode 字符串。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> encodedData </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> btoa</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 编码</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(encodedData); </span><span style="color:#6A737D;">// SGVsbG8sIHdvcmxk</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> decodedData </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> atob</span><span style="color:#24292E;">(encodedData); </span><span style="color:#6A737D;">// 解码</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(decodedData); </span><span style="color:#6A737D;">// Hello, world</span></span></code></pre></div><h2 id="atob" tabindex="-1">atob() <a class="header-anchor" href="#atob" aria-label="Permalink to &quot;atob()&quot;">​</a></h2><p>atob()： 函数用来解码一个已经被 base64 编码过的数据。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> encodeUTF </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> btoa</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;啊&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(encodeUTF); </span></span>
<span class="line"><span style="color:#6A737D;">// JUU1JTk1JThB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> decodedUTF </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> decodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">atob</span><span style="color:#24292E;">(encodeUTF));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(decodedUTF); </span></span>
<span class="line"><span style="color:#6A737D;">// 啊</span></span></code></pre></div><h2 id="base64" tabindex="-1">base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;base64&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * Interfaces:</span></span>
<span class="line"><span style="color:#6A737D;"> * b64 = base64encode(data);</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> base64encode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> base64EncodeChars </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&#39;</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> out, i, len</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> c1, c2, c3</span></span>
<span class="line"><span style="color:#24292E;">  len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">  i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#24292E;">  out </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">    c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xff</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(c1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">((c1 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#032F62;"> &#39;==&#39;</span></span>
<span class="line"><span style="color:#D73A49;">      break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(c1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(((c1 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ((c2 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xf0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">((c2 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xf</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#032F62;"> &#39;=&#39;</span></span>
<span class="line"><span style="color:#D73A49;">      break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    c3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(c1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(((c1 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ((c2 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xf0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(((c2 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xf</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ((c3 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0xc0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> base64EncodeChars.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(c3 </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> out</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_16进制转8进制" tabindex="-1">16进制转8进制 <a class="header-anchor" href="#_16进制转8进制" aria-label="Permalink to &quot;16进制转8进制&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> utf16to8</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> out, i, len, c;</span></span>
<span class="line"><span style="color:#24292E;">  out </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 0x0001</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 0x007F</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0x07FF</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xE0</span><span style="color:#D73A49;"> |</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 12</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x0F</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x80</span><span style="color:#D73A49;"> |</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 6</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3F</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x80</span><span style="color:#D73A49;"> |</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3F</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xC0</span><span style="color:#D73A49;"> |</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 6</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x1F</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      out </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x80</span><span style="color:#D73A49;"> |</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;"> 0x3F</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> out;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// escaping before base64 encoding is necessary for non-ASCII characters</span></span>
<span class="line"><span style="color:#6A737D;">// https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> utf8_to_b64</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">btoa</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(str));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> b64_to_utf8</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b64</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> decodeURIComponent</span><span style="color:#24292E;">(window.</span><span style="color:#6F42C1;">atob</span><span style="color:#24292E;">(b64));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// for &quot;URL safe&quot; base64, replace &quot;+&quot; with &quot;-&quot; and &quot;/&quot; with &quot;_&quot; as per RFC 4648</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> utf8_to_b64url</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> utf8_to_b64</span><span style="color:#24292E;">(str).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> b64url_to_utf8</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b64url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> b64_to_utf8</span><span style="color:#24292E;">(b64url.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/-/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/_/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> b64hash_to_utf8</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b64hash</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> b64url_to_utf8</span><span style="color:#24292E;">(b64hash.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">#/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,20)]))}const d=a(p,[["render",e]]);export{C as __pageData,d as default};
