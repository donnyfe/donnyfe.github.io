import{_ as a,c as t,o as n,ag as o}from"./chunks/framework.DPDPlp3K.js";const y=JSON.parse('{"title":"husky","description":"","frontmatter":{},"headers":[],"relativePath":"style/styleTools/Git提交工具husky.md","filePath":"style/styleTools/Git提交工具husky.md"}'),l={name:"style/styleTools/Git提交工具husky.md"};function p(e,s,c,i,r,h){return n(),t("div",null,s[0]||(s[0]=[o(`<h1 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky&quot;">​</a></h1><ul><li><a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">husky官方文档</a></li></ul><p>Husky是一个用于设置Githooks（钩子）的工具，是一个帮助开发者更方便配置 git hooks 的第三方库。它允许开发者在Git操作前或后执行自定义的脚本。这些脚本可以用来执行各种任务，比如代码格式化、代码质量检查、单元测试等，从而帮助团队保持一致的代码质量和开发流程。</p><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>它的主要用途是：</p><p>1、执行预提交（pre-commit）钩子：当执行git commit命令时，Husky可以在提交前执行指定的脚本。这样可以在提交代码之前执行一些任务，比如代码格式化、代码风格检查、单元测试等，确保提交的代码质量。</p><p>2、执行其他Git钩子：除了预提交钩子外，Husky还可以执行其他的Git钩子，比如pre-push（推送前）、post-merge（合并后）等，以便在相应的Git操作前或后执行指定的任务。</p><h2 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> add</span><span style="color:#005CC5;"> -D</span><span style="color:#032F62;"> husky</span></span></code></pre></div><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><p>husky在进行初始化时，husky 主要将在项目跟目录下创建.husky目录文件夹，并将 git hooks 的配置位置从项目根目录<code>.git/hooks/</code>转移到了项目根目录下的<code>.husky</code>目录中。</p><p>v9</p><p>执行初始化命令</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pnpx</span><span style="color:#032F62;"> husky</span><span style="color:#032F62;"> init</span></span></code></pre></div><p>or</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> exec</span><span style="color:#032F62;"> husky</span><span style="color:#032F62;"> init</span></span></code></pre></div><p>执行命令后会自动创建 .husky/_/pre-commit 文件</p><p>pre-commit内容如下：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#032F62;"> test</span></span></code></pre></div><h3 id="配置commit-msg钩子" tabindex="-1">配置commit-msg钩子 <a class="header-anchor" href="#配置commit-msg钩子" aria-label="Permalink to &quot;配置commit-msg钩子&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#005CC5;"> --no-install</span><span style="color:#032F62;"> commitlint</span><span style="color:#005CC5;"> --edit</span><span style="color:#032F62;"> &quot;</span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>当在git中提交修改文件后将触发git hook(pre-commit)钩子函数，然后执行pnpm lint脚本任务， lint为package.json中scripts属性配置的脚本指令</p><p>参考示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  scripts</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">    &quot;lint:eslint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;eslint --cache --max-warnings 0  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">{src,mock,build}/**/*.{vue,js,ts,tsx}</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> --fix&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;lint:prettier&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;prettier --write  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">src/**/*.{js,ts,json,tsx,css,scss,vue,html,md}</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;lint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pnpm lint:eslint &amp;&amp; pnpm lint:prettie</span><span style="color:#B31D28;font-style:italic;">r</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,25)]))}const d=a(l,[["render",p]]);export{y as __pageData,d as default};
