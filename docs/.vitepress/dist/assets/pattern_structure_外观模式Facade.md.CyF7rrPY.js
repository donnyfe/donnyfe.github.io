import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"外观模式 Facade","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/structure/外观模式Facade.md","filePath":"pattern/structure/外观模式Facade.md"}'),e={name:"pattern/structure/外观模式Facade.md"};function o(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="外观模式-facade" tabindex="-1">外观模式 Facade <a class="header-anchor" href="#外观模式-facade" aria-label="Permalink to &quot;外观模式 Facade&quot;">​</a></h1><p>外观模式（Facade Pattern）是一种结构型设计模式，它为复杂的子系统提供一个更高级的统一接口，使得子系统更容易使用。外观模式通过定义一个高层接口来简化子系统的使用，隐藏了子系统的复杂性，从而减少了客户端与子系统之间的耦合。</p><h2 id="外观模式的优点" tabindex="-1">外观模式的优点 <a class="header-anchor" href="#外观模式的优点" aria-label="Permalink to &quot;外观模式的优点&quot;">​</a></h2><ol><li>简化接口：外观模式提供了一个简单的接口，隐藏了子系统的复杂性，使得子系统更容易使用。</li><li>减少耦合：客户端通过外观模式与子系统交互，减少了客户端与子系统之间的直接依赖，从而降低了耦合度。</li><li>更好的分层：外观模式可以帮助我们更好地组织代码，使得系统的分层更加清晰。</li></ol><h2 id="外观模式的缺点" tabindex="-1">外观模式的缺点 <a class="header-anchor" href="#外观模式的缺点" aria-label="Permalink to &quot;外观模式的缺点&quot;">​</a></h2><ol><li>不完全封装：外观模式并不能完全封装子系统，客户端仍然可以直接访问子系统的类。</li><li>可能增加复杂性：如果子系统本身已经很简单，使用外观模式可能会增加不必要的复杂性。</li></ol><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>简化复杂系统的使用：当一个系统包含多个复杂的子系统时，可以使用外观模式提供一个简单的接口。 分层结构：在分层结构中，外观模式可以用来定义每一层的入口点，从而简化层与层之间的交互。 3. 减少依赖：当需要减少客户端与多个子系统之间的依赖时，可以使用外观模式。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>封装 DOM 监听事件</li><li>兼容浏览器阻止冒泡、默认事件</li></ul><h3 id="封装-dom-监听事件" tabindex="-1">封装 DOM 监听事件 <a class="header-anchor" href="#封装-dom-监听事件" aria-label="Permalink to &quot;封装 DOM 监听事件&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 外观模式实现</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> addEvent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dom</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">	// 对于支持DoM2级事件处理程序addEventListener方法的浏览器</span></span>
<span class="line"><span style="color:#D73A49;">	if</span><span style="color:#24292E;"> (dom.addEventListener) {</span></span>
<span class="line"><span style="color:#24292E;">		dom.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(type, fn, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">		// 对于不支持addEventListener方法但支持attachEvent方法的浏览器</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (dom.attachEvent) {</span></span>
<span class="line"><span style="color:#24292E;">		dom.</span><span style="color:#6F42C1;">attachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;on&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> type, fn)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">		// 对于不支持addEventListener方法也不支持attachEvent方法，但支持on+&#39;事件名&#39;的浏览器</span></span>
<span class="line"><span style="color:#24292E;">		dom[</span><span style="color:#032F62;">&#39;on&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> type] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myInput </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myinput&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">addEvent</span><span style="color:#24292E;">(myInput, </span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;绑定第—个事件&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="兼容浏览器阻止冒泡、默认事件" tabindex="-1">兼容浏览器阻止冒泡、默认事件 <a class="header-anchor" href="#兼容浏览器阻止冒泡、默认事件" aria-label="Permalink to &quot;兼容浏览器阻止冒泡、默认事件&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 获取事件对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> getEvent</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">	// 标准浏览器返回event，IE下window.event</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.event</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取元素</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> getTarget</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	var</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> getEvent</span><span style="color:#24292E;">(event)</span></span>
<span class="line"><span style="color:#6A737D;">	// 标准浏览器下event.target，IE下event.srcElement</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> event.target </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> event.srcElement</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 阻止默认行为</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> preventDefault</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	var</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> getEvent</span><span style="color:#24292E;">(event)</span></span>
<span class="line"><span style="color:#6A737D;">	// 标准浏览器</span></span>
<span class="line"><span style="color:#D73A49;">	if</span><span style="color:#24292E;"> (event.preventDefault) {</span></span>
<span class="line"><span style="color:#24292E;">		event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">		// IE浏览器</span></span>
<span class="line"><span style="color:#24292E;">		event.returnValue </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,14)]))}const u=a(e,[["render",o]]);export{d as __pageData,u as default};
