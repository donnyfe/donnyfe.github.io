import{_ as a,c as l,o as n,ag as o}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"2.7 页面加载优化","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/2.7页面加载优化.md","filePath":"performanceGeek/2.7页面加载优化.md"}'),p={name:"performanceGeek/2.7页面加载优化.md"};function e(t,s,c,r,y,i){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="_2-7-页面加载优化" tabindex="-1">2.7 页面加载优化 <a class="header-anchor" href="#_2-7-页面加载优化" aria-label="Permalink to &quot;2.7 页面加载优化&quot;">​</a></h1><h2 id="懒加载" tabindex="-1">懒加载 <a class="header-anchor" href="#懒加载" aria-label="Permalink to &quot;懒加载&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>懒加载也叫延迟加载，指的是长网页中延迟加载特定元素(可以是图片，也可以是JS/CSS 文件，当然也可以是JavaScript的特定函数和方法，以下简称&quot;懒加载元素&quot;)。</p><h3 id="好处" tabindex="-1">好处 <a class="header-anchor" href="#好处" aria-label="Permalink to &quot;好处&quot;">​</a></h3><p>可以减少当前屏无效资源的加载</p><h3 id="实际方式和示例" tabindex="-1">实际方式和示例 <a class="header-anchor" href="#实际方式和示例" aria-label="Permalink to &quot;实际方式和示例&quot;">​</a></h3><p>把页面上&quot;懒加载元素&quot;src属性设置为空字符，把真实的src属性写在data-lazy属性中，当页面滚动的时候监听 scroll 事件，如果&quot;懒加载元素&quot;在可视区域内，就把图片的src属性或者文件 URL 路径设置成data-lazy 属性值。</p><h2 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h2><h3 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>可以使用预加载让浏览器来预先加载某些资源(比如图片、JS/CSS/模板)，而这些资源是在将来才会被使用到的。简单来说，就是将所需资源提前加载到浏览器本地，这样后面在需要使用的时候就可以直接从浏览器缓存中取了，而不用再重新开始加载。</p><h3 id="好处-1" tabindex="-1">好处 <a class="header-anchor" href="#好处-1" aria-label="Permalink to &quot;好处&quot;">​</a></h3><p>减少用户后续加载资源等待的时间。</p><h3 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><ul><li>HTML标签</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://img10.360buyimg.com/n4/g7/M03/08/0D/rBEHZlBzwZwlAAAAAAI4s OvliLkAABpMQDf8E4AAjjl749.jpg&quot;</span><span style="color:#6F42C1;"> style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;display:none&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><ul><li>使用Image对象</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> image </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> lmage</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">image.src </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;https://img10.360buyimg.com/n4/g7/M03/08/0D/rBEHZIBzwZwIAAAAAAI4sOvliLkAABpMQDf8E4AAjjl749.jpg&#39;</span></span></code></pre></div><ul><li>使用preload，prefetch和preconnect</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;src/style.css&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;style&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scr/image.png&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://my.com&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preconnect&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://my.com&quot;</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="预渲染" tabindex="-1">预渲染 <a class="header-anchor" href="#预渲染" aria-label="Permalink to &quot;预渲染&quot;">​</a></h2><h3 id="好处-2" tabindex="-1">好处 <a class="header-anchor" href="#好处-2" aria-label="Permalink to &quot;好处&quot;">​</a></h3><ol><li><p>对于大型项目，在懒加载组件被加载之前，组件可能还会有其它懒加载组件的代码或数 据，所以用户还是需要时间等待组件加载完成。</p></li><li><p>那另外一种预加载组件的方式就是提前渲染它，在页面中渲染组件，但是并不在页面中 展示，也就是渲染好后先隐藏起来，用的时候再直接展示。</p></li></ol><h3 id="实现方式-1" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-1" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prerender&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://my.com&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="按需加载" tabindex="-1">按需加载 <a class="header-anchor" href="#按需加载" aria-label="Permalink to &quot;按需加载&quot;">​</a></h2><ul><li>常规按需加载(如JS 原生、jQuery)</li><li>不同 App 按需加载(如JS-SDK脚本文件)</li><li>不同设备按需加载(如PC端和HTML5 端样式文件)</li><li>不同分辨率按需加载(CSS Media Query)</li></ul><h3 id="react异步载入" tabindex="-1">React异步载入 <a class="header-anchor" href="#react异步载入" aria-label="Permalink to &quot;React异步载入&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> componentA</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">location</span><span style="color:#24292E;">,</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  require.</span><span style="color:#6F42C1;">ensure</span><span style="color:#24292E;">([],</span><span style="color:#E36209;">require</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;modules/componentA&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#032F62;">&#39;componentA&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> componentB</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">location</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  require.</span><span style="color:#6F42C1;">ensure</span><span style="color:#24292E;">([], </span><span style="color:#E36209;">require</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;modules/componentB&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#032F62;">&#39;componentB&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Router</span><span style="color:#6F42C1;"> history</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{history}&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#6F42C1;"> path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#6F42C1;"> component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{App}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#6F42C1;"> path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;componentA&quot;</span><span style="color:#6F42C1;"> getComponent</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{componentA}&gt;&lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#6F42C1;"> path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;componentB&quot;</span><span style="color:#6F42C1;"> getComponent</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{componentB}&gt;&lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="楼层式加载" tabindex="-1">楼层式加载 <a class="header-anchor" href="#楼层式加载" aria-label="Permalink to &quot;楼层式加载&quot;">​</a></h2><h3 id="定义-2" tabindex="-1">定义 <a class="header-anchor" href="#定义-2" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>楼层数据异步加载和本地缓存相结合的方式</p><h3 id="实现方式-2" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-2" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy-fn&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">  data-title</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;服饰&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">  id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy-clothes&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">  data-path</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;floor1-floor_index.js&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">  data-time</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;01d15d664a61ff8 f11cf6321f5b7a503&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div>`,34)]))}const d=a(p,[["render",e]]);export{h as __pageData,d as default};
