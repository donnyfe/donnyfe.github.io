import{_ as e,c as l,o as t,ag as r}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"2.8 接口服务调用优化","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/2.8接口服务调用优化.md","filePath":"performanceGeek/2.8接口服务调用优化.md"}'),o={name:"performanceGeek/2.8接口服务调用优化.md"};function i(_,a,p,n,c,s){return t(),l("div",null,a[0]||(a[0]=[r('<h1 id="_2-8-接口服务调用优化" tabindex="-1">2.8 接口服务调用优化 <a class="header-anchor" href="#_2-8-接口服务调用优化" aria-label="Permalink to &quot;2.8 接口服务调用优化&quot;">​</a></h1><h2 id="接口服务调用优化" tabindex="-1">接口服务调用优化 <a class="header-anchor" href="#接口服务调用优化" aria-label="Permalink to &quot;接口服务调用优化&quot;">​</a></h2><ol><li><p>接口合并 这个是指一个页面的众多的业务接口和依赖的第三方接口统一使一个部署在集群的接口统一调用，以减少页面接口请求数。</p></li><li><p>接口上 CDN 主要基于接口性能考虑，我们可以把不需要实时更新的接口同步至CDN，等此接口内容变更之后自动同步至CDN 集群上。如果一定时间内未请求到数据，会用源站接口再次请求。</p></li><li><p>接口域名上 CDN 增强可用性、稳定性</p></li><li><p>接口降级 这个基于大促备战考虑，核心接口进行降级用基础接口进行业务实现，比如千人千面的推荐接口，在大促时间点可以直接运营编辑的数据。另外接口万一无法访问，使用预设好的垫底备份数据。</p></li><li><p>接口监控 监控接口成功率，不是常说的TP99，而是和用户实际情况一致的成功和失败监控，包括比如弱网、超时、网络异常、网络切换等情况。排查出来问题需要联合后端、运维、网络岗位人员一并解决。</p></li></ol><h2 id="接口缓存策略优化" tabindex="-1">接口缓存策略优化 <a class="header-anchor" href="#接口缓存策略优化" aria-label="Permalink to &quot;接口缓存策略优化&quot;">​</a></h2><ol><li><p>Ajax/fetch 缓存 前端请求时候带上cache，依赖浏览器本身缓存机制。</p></li><li><p>本地缓存 异步接口数据优先使用本地localStorage 中的缓存数据。</p></li><li><p>多次请求 接口数据本地无 localStorage缓存数据，重新再次发出ajax 请求。</p></li></ol>',5)]))}const f=e(o,[["render",i]]);export{h as __pageData,f as default};
