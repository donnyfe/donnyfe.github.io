import{_ as e,c as t,o as r,ag as l}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"工厂模式 Factory","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/Create/工厂模式Factory.md","filePath":"pattern/Create/工厂模式Factory.md"}'),o={name:"pattern/Create/工厂模式Factory.md"};function i(c,a,n,_,s,d){return r(),t("div",null,a[0]||(a[0]=[l('<h1 id="工厂模式-factory" tabindex="-1">工厂模式 Factory <a class="header-anchor" href="#工厂模式-factory" aria-label="Permalink to &quot;工厂模式 Factory&quot;">​</a></h1><p>工厂模式主要是为了创建对象实例或者类簇（抽象工厂），关心的是最终产出（创建）的是什么。不关心你创建的整个过程，仅仅需要知道最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。</p><p>根据抽象程度划分工厂模式类型：</p><ul><li>简单工厂模式（静态工厂方法）；作用：用来创建某一种产品对象的实例，用来创建单一对象；</li><li>复杂工厂模式（工厂方法模式）；作用：是将创建实例推迟到子类中进行；</li><li>超级工厂模式（抽象工厂模式）；作用：是对类的工厂抽象用来创建产品类簇，不负责创建某一类产品的实例</li></ul><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>JQuery $</li><li>Vue createElementVNode</li><li>React createElement</li><li>用户类型（QQ 用户、微信用户、微博用户）</li><li>角色类型（超级管理员、管理员、普通用户）</li></ul>',6)]))}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
