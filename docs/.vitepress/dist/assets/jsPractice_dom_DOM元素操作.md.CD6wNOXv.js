import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const D=JSON.parse('{"title":"DOM元素操作","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/dom/DOM元素操作.md","filePath":"jsPractice/dom/DOM元素操作.md"}'),o={name:"jsPractice/dom/DOM元素操作.md"};function e(t,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="dom元素操作" tabindex="-1">DOM元素操作 <a class="header-anchor" href="#dom元素操作" aria-label="Permalink to &quot;DOM元素操作&quot;">​</a></h1><h2 id="元素创建" tabindex="-1">元素创建 <a class="header-anchor" href="#元素创建" aria-label="Permalink to &quot;元素创建&quot;">​</a></h2><h3 id="动态添加js" tabindex="-1">动态添加JS <a class="header-anchor" href="#动态添加js" aria-label="Permalink to &quot;动态添加JS&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// defer属性规定是否对脚本执行进行延迟，直到页面加载为止</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text/javascript&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx.js&quot;</span><span style="color:#6F42C1;"> defer</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;defer&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// async属性规定一旦加载脚本可用，则会异步执行</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text/javascript&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx.js&quot;</span><span style="color:#6F42C1;"> async</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;async&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> loadJs</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, </span><span style="color:#E36209;">async</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> script</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    script.type </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;text/javasctipt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    script.async </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> async;</span></span>
<span class="line"><span style="color:#24292E;">    script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> src;</span></span>
<span class="line"><span style="color:#24292E;">    script.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> head</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;head&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      head.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(script, head.firstChild);</span></span>
<span class="line"><span style="color:#6F42C1;">      resolve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    script.</span><span style="color:#6F42C1;">onerror</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">      reject</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#6F42C1;"> loadJs</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://cdn.bootcss.com/jquery/3.0.0-beta1/jquery.min.js&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="动态添加css样式" tabindex="-1">动态添加CSS样式 <a class="header-anchor" href="#动态添加css样式" aria-label="Permalink to &quot;动态添加CSS样式&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// https://davidwalsh.name/add-rules-stylesheets</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // Create the &lt;style&gt; tag</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> style</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;style&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> comment</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createTextNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/* dynamic stylesheet */&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // WebKit hack :(</span></span>
<span class="line"><span style="color:#24292E;">  style.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(comment);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Add the &lt;style&gt; element to the page</span></span>
<span class="line"><span style="color:#24292E;">  document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(style);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> style.sheet;</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> addCSSRule</span><span style="color:#24292E;">(</span><span style="color:#E36209;">selector</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rules</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;insertRule&quot;</span><span style="color:#D73A49;"> in</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> ruleIndex</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">insertRule</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      selector </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;{&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> rules </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      index,</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">.cssRules[ruleIndex];</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;addRule&quot;</span><span style="color:#D73A49;"> in</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> ruleIndex</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">addRule</span><span style="color:#24292E;">(selector, rules, index);</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> STYLE_SHEET</span><span style="color:#24292E;">.rules[ruleIndex];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="动态创建链接" tabindex="-1">动态创建链接 <a class="header-anchor" href="#动态创建链接" aria-label="Permalink to &quot;动态创建链接&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> clickLink</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">blank</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  a.style.display </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;none&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#D73A49;">  try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    a.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">    a.rel </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;noopener&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (blank) {</span></span>
<span class="line"><span style="color:#24292E;">      a.target </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;_blank&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    a.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    a.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="元素校验" tabindex="-1">元素校验 <a class="header-anchor" href="#元素校验" aria-label="Permalink to &quot;元素校验&quot;">​</a></h2><h3 id="判断元素类型" tabindex="-1">判断元素类型 <a class="header-anchor" href="#判断元素类型" aria-label="Permalink to &quot;判断元素类型&quot;">​</a></h3><ul><li>判断是否为HTML元素</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> isHtmlElement</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">node</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> node.nodeType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Node.</span><span style="color:#005CC5;">ELEMENT_NODE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="元素是否可见" tabindex="-1">元素是否可见 <a class="header-anchor" href="#元素是否可见" aria-label="Permalink to &quot;元素是否可见&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// based on http://stackoverflow.com/a/38039019/113</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> elementIsInView</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">percentX</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">percentY</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> tolerance</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0.01</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//needed because the rects returned by getBoundingClientRect provide the position up to 10 decimals</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> elementRect</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> parentRects</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (element.parentElement </span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    parentRects.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(element.parentElement.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.parentElement;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> parentRects.</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(</span><span style="color:#E36209;">parentRect</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePixelX</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(elementRect.right, parentRect.right) </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(elementRect.left, parentRect.left);</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePixelY</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(elementRect.bottom, parentRect.bottom) </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(elementRect.top, parentRect.top);</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePercentageX</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> visiblePixelX </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> elementRect.width;</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePercentageY</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> visiblePixelY </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> elementRect.height;</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      visiblePercentageX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tolerance </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> percentX </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      visiblePercentageY </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tolerance </span><span style="color:#D73A49;">&gt;</span><span style="color:#E36209;"> percentY</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="判断元素是否在指定容器内" tabindex="-1">判断元素是否在指定容器内 <a class="header-anchor" href="#判断元素是否在指定容器内" aria-label="Permalink to &quot;判断元素是否在指定容器内&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> isInContainer</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">container</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">el </span><span style="color:#D73A49;">||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">container) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> elRect</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> containerRect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> ([window, document, document.documentElement, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(container)) {</span></span>
<span class="line"><span style="color:#24292E;">    containerRect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      top: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      right: window.innerWidth,</span></span>
<span class="line"><span style="color:#24292E;">      bottom: window.innerHeight,</span></span>
<span class="line"><span style="color:#24292E;">      left: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    containerRect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> container.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> elRect.top </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> containerRect.bottom </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    elRect.bottom </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> containerRect.top </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    elRect.right </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> containerRect.left </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    elRect.left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> containerRect.right;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="判断元素是否遮盖指定元素" tabindex="-1">判断元素是否遮盖指定元素 <a class="header-anchor" href="#判断元素是否遮盖指定元素" aria-label="Permalink to &quot;判断元素是否遮盖指定元素&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isObscured</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">document.elementFromPoint) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> box</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">  // default to the center of the element</span></span>
<span class="line"><span style="color:#24292E;">  offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    top: Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(box.height </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    left: Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(box.width </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> position</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    left: box.x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset.left,</span></span>
<span class="line"><span style="color:#24292E;">    top: box.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset.top,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> elem</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">elementFromPoint</span><span style="color:#24292E;">(position.left, position.top);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(elem);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="判断元素是否可见" tabindex="-1">判断元素是否可见 <a class="header-anchor" href="#判断元素是否可见" aria-label="Permalink to &quot;判断元素是否可见&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// based on http://stackoverflow.com/a/38039019/113</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> elementIsInView</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">percentX</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">percentY</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  //needed because the rects returned by getBoundingClientRect provide the position up to 10 decimals</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> tolerance</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0.01</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> elementRect</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> parentRects</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (element.parentElement </span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    parentRects.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(element.parentElement.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.parentElement;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> parentRects.</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(</span><span style="color:#E36209;">parentRect</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePixelX</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(elementRect.right, parentRect.right) </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(elementRect.left, parentRect.left);</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePixelY</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(elementRect.bottom, parentRect.bottom) </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">      Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(elementRect.top, parentRect.top);</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePercentageX</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> visiblePixelX </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> elementRect.width;</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> visiblePercentageY</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> visiblePixelY </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> elementRect.height;</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      visiblePercentageX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tolerance </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> percentX </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      visiblePercentageY </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tolerance </span><span style="color:#D73A49;">&gt;</span><span style="color:#E36209;"> percentY</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="判断元素是否处于焦点" tabindex="-1">判断元素是否处于焦点 <a class="header-anchor" href="#判断元素是否处于焦点" aria-label="Permalink to &quot;判断元素是否处于焦点&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> elementIsInFocus</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (el </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> document.activeElement);</span></span></code></pre></div><h3 id="判断元素是否可滚动" tabindex="-1">判断元素是否可滚动 <a class="header-anchor" href="#判断元素是否可滚动" aria-label="Permalink to &quot;判断元素是否可滚动&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> isScroll</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">vertical</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> determinedDirection</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> vertical </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> vertical </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> overflow</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> determinedDirection</span></span>
<span class="line"><span style="color:#D73A49;">    ?</span><span style="color:#24292E;"> vertical</span></span>
<span class="line"><span style="color:#D73A49;">      ?</span><span style="color:#6F42C1;"> getStyle</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;overflow-y&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">      :</span><span style="color:#6F42C1;"> getStyle</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;overflow-x&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">    :</span><span style="color:#6F42C1;"> getStyle</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;overflow&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> overflow.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(scroll</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">auto)/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="判断事件是否发生在指定元素上" tabindex="-1">判断事件是否发生在指定元素上 <a class="header-anchor" href="#判断事件是否发生在指定元素上" aria-label="Permalink to &quot;判断事件是否发生在指定元素上&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isEventOverElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">clientX</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">clientY</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">top</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bottom</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">left</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">right</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">  // 事件触发范围是否在元素边界内</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> top </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> bottom </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> right;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="元素操作" tabindex="-1">元素操作 <a class="header-anchor" href="#元素操作" aria-label="Permalink to &quot;元素操作&quot;">​</a></h2><h3 id="获取可滚动元素的容器" tabindex="-1">获取可滚动元素的容器 <a class="header-anchor" href="#获取可滚动元素的容器" aria-label="Permalink to &quot;获取可滚动元素的容器&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vertical: true代表方向垂直</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> getScrollContainer</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">vertical</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el;</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (parent) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> ([window, document, document.documentElement].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(parent)) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> window;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 判断是否可滚动元素</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isScroll</span><span style="color:#24292E;">(parent, vertical)) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> parent;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.parentNode;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> parent;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="操作元素滚动到指定位置" tabindex="-1">操作元素滚动到指定位置 <a class="header-anchor" href="#操作元素滚动到指定位置" aria-label="Permalink to &quot;操作元素滚动到指定位置&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 滚动到指定位置</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> element</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> to</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {*}</span><span style="color:#24292E;"> duration</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> scrollTo</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">duration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (duration </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> difference</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> element.scrollTop;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> perTick</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (difference </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> duration) </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">  setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    element.scrollTop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.scrollTop </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> perTick;</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (element.scrollTop </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> to) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">    scrollTo</span><span style="color:#24292E;">(element, to, duration </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,32)]))}const A=n(o,[["render",e]]);export{D as __pageData,A as default};
