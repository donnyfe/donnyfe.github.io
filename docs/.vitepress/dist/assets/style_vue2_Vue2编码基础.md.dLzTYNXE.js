import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Vue2编码基础","description":"","frontmatter":{},"headers":[],"relativePath":"style/vue2/Vue2编码基础.md","filePath":"style/vue2/Vue2编码基础.md"}'),o={name:"style/vue2/Vue2编码基础.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="vue2编码基础" tabindex="-1">Vue2编码基础 <a class="header-anchor" href="#vue2编码基础" aria-label="Permalink to &quot;Vue2编码基础&quot;">​</a></h1><p>vue 项目规范以 Vue 官方规范 （<a href="https://v2.cn.vuejs.org/v2/style-guide/" target="_blank" rel="noreferrer">风格指南</a>） 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。 请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p><h2 id="组件规范" tabindex="-1">组件规范 <a class="header-anchor" href="#组件规范" aria-label="Permalink to &quot;组件规范&quot;">​</a></h2><h3 id="_1-组件名为多个单词" tabindex="-1">1. 组件名为多个单词 <a class="header-anchor" href="#_1-组件名为多个单词" aria-label="Permalink to &quot;1. 组件名为多个单词&quot;">​</a></h3><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为KebabCase格式。 这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。 正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;TodoItem&#39;</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;Todo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;todo-item&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-组件文件名为-pascal-case-格式" tabindex="-1">2. 组件文件名为 pascal-case 格式 <a class="header-anchor" href="#_2-组件文件名为-pascal-case-格式" aria-label="Permalink to &quot;2. 组件文件名为 pascal-case 格式&quot;">​</a></h3><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">components</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">component.vue</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">components</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> myComponent.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> MyComponent.vue</span></span></code></pre></div><h3 id="_3-基础组件文件名为-base-开头-使用完整单词而不是缩写" tabindex="-1">3. 基础组件文件名为 base 开头，使用完整单词而不是缩写 <a class="header-anchor" href="#_3-基础组件文件名为-base-开头-使用完整单词而不是缩写" aria-label="Permalink to &quot;3. 基础组件文件名为 base 开头，使用完整单词而不是缩写&quot;">​</a></h3><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">components</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> base</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> base</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">table.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> base</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">icon.vue</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">components</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> MyButton.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> VueTable.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> Icon.vue</span></span></code></pre></div><h3 id="_4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" tabindex="-1">4. 和父组件紧密耦合的子组件应该以父组件名作为前缀命名 <a class="header-anchor" href="#_4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" aria-label="Permalink to &quot;4. 和父组件紧密耦合的子组件应该以父组件名作为前缀命名&quot;">​</a></h3><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">scomponents</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> todo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> todo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">item.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> todo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">item</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> user</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">profile</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">options.vue （完整单词）</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">components</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> TodoList.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> TodoItem.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> TodoButton.vue</span></span>
<span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;"> UProfOpts.vue （使用了缩写）</span></span></code></pre></div><h3 id="_5-在-template-模版中使用组件-应使用-pascalcase-模式-并且使用自闭合组件" tabindex="-1">5. 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件 <a class="header-anchor" href="#_5-在-template-模版中使用组件-应使用-pascalcase-模式-并且使用自闭合组件" aria-label="Permalink to &quot;5. 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件&quot;">​</a></h3><p>正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">MyComponent</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Row</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">table</span><span style="color:#6F42C1;"> :column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">Row</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">my-component</span><span style="color:#24292E;"> /&gt; &lt;</span><span style="color:#B31D28;font-style:italic;">row</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">table</span><span style="color:#6F42C1;"> :column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">row</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_6-组件的-data-必须是一个函数" tabindex="-1">6. 组件的 data 必须是一个函数 <a class="header-anchor" href="#_6-组件的-data-必须是一个函数" aria-label="Permalink to &quot;6. 组件的 data 必须是一个函数&quot;">​</a></h3><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;jack&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  data: {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;jack&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_7-prop-定义应该尽量详细" tabindex="-1">7. Prop 定义应该尽量详细 <a class="header-anchor" href="#_7-prop-定义应该尽量详细" aria-label="Permalink to &quot;7. Prop 定义应该尽量详细&quot;">​</a></h3><p>必须使用 camelCase 驼峰命名 必须指定类型 必须加上注释，表明其含义 必须加上 required 或者 default，两者二选其一 如果有业务需要，必须加上 validator 验证 正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6A737D;">  // 组件状态，用于控制组件的颜色</span></span>
<span class="line"><span style="color:#6F42C1;">   status</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">     type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">     required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">     validator</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">       return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#032F62;">         &#39;succ&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">         &#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">         &#39;error&#39;</span></span>
<span class="line"><span style="color:#24292E;">       ].</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">!==</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#6A737D;">    // 用户级别，用于显示皇冠个数</span></span>
<span class="line"><span style="color:#24292E;">   userLevel：{</span></span>
<span class="line"><span style="color:#6F42C1;">      type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">      required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_8-为组件样式设置作用域" tabindex="-1">8. 为组件样式设置作用域 <a class="header-anchor" href="#_8-为组件样式设置作用域" aria-label="Permalink to &quot;8. 为组件样式设置作用域&quot;">​</a></h3><p>正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;btn btn-close&quot;</span><span style="color:#24292E;">&gt;X&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 使用 \`scoped\` 特性 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#6F42C1;"> scoped</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">  .btn-close</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">    background-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;btn btn-close&quot;</span><span style="color:#24292E;">&gt;X&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 没有使用 \`scoped\` 特性 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">  .btn-close</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">    background-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_9-如果特性元素较多-应该主动换行" tabindex="-1">9. 如果特性元素较多，应该主动换行 <a class="header-anchor" href="#_9-如果特性元素较多-应该主动换行" aria-label="Permalink to &quot;9. 如果特性元素较多，应该主动换行&quot;">​</a></h3><p>正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">MyComponent</span></span>
<span class="line"><span style="color:#6F42C1;">  foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">  foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">  foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">MyComponent</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#6F42C1;"> baz</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><h2 id="模板中使用简单的表达式" tabindex="-1">模板中使用简单的表达式 <a class="header-anchor" href="#模板中使用简单的表达式" aria-label="Permalink to &quot;模板中使用简单的表达式&quot;">​</a></h2><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。 正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{ normalizedFullName }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">  export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 复杂表达式已经移入一个计算属性</span></span>
<span class="line"><span style="color:#24292E;">    computed: {</span></span>
<span class="line"><span style="color:#6F42C1;">      normalizedFullName</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.fullName.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#24292E;"> word[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> word.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{</span></span>
<span class="line"><span style="color:#24292E;">      fullName.split(&#39; &#39;).map(function (word) {</span></span>
<span class="line"><span style="color:#24292E;">        return word[0].toUpperCase() + word.slice(1)</span></span>
<span class="line"><span style="color:#24292E;">      }).join(&#39; &#39;)</span></span>
<span class="line"><span style="color:#24292E;">    }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="指令都使用缩写形式" tabindex="-1">指令都使用缩写形式 <a class="header-anchor" href="#指令都使用缩写形式" aria-label="Permalink to &quot;指令都使用缩写形式&quot;">​</a></h2><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:) 正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> @input</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onInput&quot;</span><span style="color:#6F42C1;"> @focus</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onFocus&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> v-on:input</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onInput&quot;</span><span style="color:#6F42C1;"> @focus</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;onFocus&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="标签顺序保持一致" tabindex="-1">标签顺序保持一致 <a class="header-anchor" href="#标签顺序保持一致" aria-label="Permalink to &quot;标签顺序保持一致&quot;">​</a></h2><p>单文件组件应该总是让标签顺序保持为 \` 正例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;...&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;..</span><span style="color:#B31D28;font-style:italic;">.&lt;/style</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>反例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;...&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;..</span><span style="color:#B31D28;font-style:italic;">.&lt;/style</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">..</span><span style="color:#B31D28;font-style:italic;">.&lt;/script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h2 id="必须为-v-for-设置键值-key" tabindex="-1">必须为 v-for 设置键值 key <a class="header-anchor" href="#必须为-v-for-设置键值-key" aria-label="Permalink to &quot;必须为 v-for 设置键值 key&quot;">​</a></h2><h2 id="v-show-与-v-if-选择" tabindex="-1">v-show 与 v-if 选择 <a class="header-anchor" href="#v-show-与-v-if-选择" aria-label="Permalink to &quot;v-show 与 v-if 选择&quot;">​</a></h2><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p><h2 id="script-标签内部结构顺序" tabindex="-1">script 标签内部结构顺序 <a class="header-anchor" href="#script-标签内部结构顺序" aria-label="Permalink to &quot;script 标签内部结构顺序&quot;">​</a></h2><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods</p><h2 id="vue-router-规范" tabindex="-1">Vue Router 规范 <a class="header-anchor" href="#vue-router-规范" aria-label="Permalink to &quot;Vue Router 规范&quot;">​</a></h2><h3 id="_1-页面跳转数据传递使用路由参数" tabindex="-1">1. 页面跳转数据传递使用路由参数 <a class="header-anchor" href="#_1-页面跳转数据传递使用路由参数" aria-label="Permalink to &quot;1. 页面跳转数据传递使用路由参数&quot;">​</a></h3><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。 正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">javascriptlet id </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39; 123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;userCenter&#39;</span><span style="color:#24292E;">, query: { id: id } });</span></span></code></pre></div><h3 id="_2-使用路由懒加载-延迟加载-机制" tabindex="-1">2. 使用路由懒加载（延迟加载）机制 <a class="header-anchor" href="#_2-使用路由懒加载-延迟加载-机制" aria-label="Permalink to &quot;2. 使用路由懒加载（延迟加载）机制&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/uploadAttachment&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;uploadAttachment&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  meta</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    title</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;上传附件&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/view/components/uploadAttachment/index.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-router-中的命名规范" tabindex="-1">3. router 中的命名规范 <a class="header-anchor" href="#_3-router-中的命名规范" aria-label="Permalink to &quot;3. router 中的命名规范&quot;">​</a></h3><p>path、childrenPoints 命名规范采用kebab-case命名规范（尽量vue文件的目录结构保持一致，因为目录、文件名都是kebab-case，这样很方便找到对应的文件） name 命名规范采用KebabCase命名规范且和component组件名保持一致！（因为要保持keep-alive特性，keep-alive按照component的name进行缓存，所以两者必须高度保持一致）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 动态加载</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> reload</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/reload&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;reload&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: Main,</span></span>
<span class="line"><span style="color:#24292E;">    meta: {</span></span>
<span class="line"><span style="color:#24292E;">      title: </span><span style="color:#032F62;">&#39;动态加载&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      icon: </span><span style="color:#032F62;">&#39;icon iconfont&#39;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    children: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/reload/smart-reload-list&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;SmartReloadList&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        meta: {</span></span>
<span class="line"><span style="color:#24292E;">          title: </span><span style="color:#032F62;">&#39;SmartReload&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          childrenPoints: [</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              title: </span><span style="color:#032F62;">&#39;查询&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              name: </span><span style="color:#032F62;">&#39;smart-reload-search&#39;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              title: </span><span style="color:#032F62;">&#39;执行reload&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              name: </span><span style="color:#032F62;">&#39;smart-reload-update&#39;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              title: </span><span style="color:#032F62;">&#39;查看执行结果&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              name: </span><span style="color:#032F62;">&#39;smart-reload-result&#39;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          ]</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#6F42C1;">        component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#D73A49;">          import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/views/reload/smart-reload/smart-reload-list.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><h3 id="_4-router-中的-path-命名规范" tabindex="-1">4. router 中的 path 命名规范 <a class="header-anchor" href="#_4-router-中的-path-命名规范" aria-label="Permalink to &quot;4. router 中的 path 命名规范&quot;">​</a></h3><p>path除了采用kebab-case命名规范以外，必须以 / 开头，即使是children里的path也要以 / 开头。如下示例 目的： 经常有这样的场景：某个页面有问题，要立刻找到这个vue文件，如果不用以/开头，path为parent和children组成的，可能经常需要在router文件里搜索多次才能找到，而如果以/开头，则能立刻搜索到对应的组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">    path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/file&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;File&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    component</span><span style="color:#24292E;">: Main,</span></span>
<span class="line"><span style="color:#6F42C1;">    meta</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">      title</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;文件服务&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">      icon</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;ios-cloud-upload&#39;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    children</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/file/file-list&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;FileList&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">        component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/views/file/file-list.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/file/file-add&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;FileAdd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">        component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/views/file/file-add.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/file/file-update&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;FileUpdate&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">        component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/views/file/file-update.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div>`,79)]))}const E=a(o,[["render",e]]);export{u as __pageData,E as default};
