import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const b=JSON.parse('{"title":"对象相关技术","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/object/对象相关技术.md","filePath":"jsPractice/object/对象相关技术.md"}'),p={name:"jsPractice/object/对象相关技术.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="对象相关技术" tabindex="-1">对象相关技术 <a class="header-anchor" href="#对象相关技术" aria-label="Permalink to &quot;对象相关技术&quot;">​</a></h1><h2 id="判断是否对象" tabindex="-1">判断是否对象 <a class="header-anchor" href="#判断是否对象" aria-label="Permalink to &quot;判断是否对象&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(target) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Object]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> type</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;object&#39;</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;function&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否空对象" tabindex="-1">判断是否空对象 <a class="header-anchor" href="#判断是否空对象" aria-label="Permalink to &quot;判断是否空对象&quot;">​</a></h2><ul><li>for-in</li><li>JSON.stringify()</li><li>Object.keys()</li><li>Object.getOwnPropertyNames()</li><li>Reflect.ownKeys()</li></ul><h3 id="for-in" tabindex="-1">for-in <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;for-in&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> forNull</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">items</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="json-stringify" tabindex="-1">JSON.stringify() <a class="header-anchor" href="#json-stringify" aria-label="Permalink to &quot;JSON.stringify()&quot;">​</a></h3><p>缺陷: undefined、symbol和函数会被忽略</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">({}) </span><span style="color:#D73A49;">==</span><span style="color:#032F62;"> &#39;{}&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  key: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  key1: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  key3</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">  key4: </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#6A737D;">// {&quot;key&quot;:&quot;A&quot;}</span></span></code></pre></div><h3 id="object-keys" tabindex="-1">Object.keys() <a class="header-anchor" href="#object-keys" aria-label="Permalink to &quot;Object.keys()&quot;">​</a></h3><p>缺陷：Object.keys 获取不了 Symbol 为 key 的属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isObjectEmpty</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(obj).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="object-getownpropertynames" tabindex="-1">Object.getOwnPropertyNames() <a class="header-anchor" href="#object-getownpropertynames" aria-label="Permalink to &quot;Object.getOwnPropertyNames()&quot;">​</a></h3><p>缺陷：Object.getOwnPropertyNames 获取不了 Symbol 为 key 的属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isObjectEmpty</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getOwnPropertyNames</span><span style="color:#24292E;">(obj).</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ===</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="reflect-ownkeys" tabindex="-1">Reflect.ownKeys() <a class="header-anchor" href="#reflect-ownkeys" aria-label="Permalink to &quot;Reflect.ownKeys()&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> isEmpty</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> obj</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> Reflect.</span><span style="color:#6F42C1;">ownKeys</span><span style="color:#24292E;">(obj).</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ===</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> obj.</span><span style="color:#005CC5;">constructor</span><span style="color:#D73A49;"> ===</span><span style="color:#24292E;"> Object;</span></span>
<span class="line"><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">({a:</span><span style="color:#032F62;">&quot;not empty&quot;</span><span style="color:#24292E;">}) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Object.getOwnPropertySymbols和Reflect.ownKeys这2种方法能获取Symbol</span></span></code></pre></div>`,21)]))}const u=a(p,[["render",e]]);export{b as __pageData,u as default};
