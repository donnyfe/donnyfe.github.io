import{_ as e,c as l,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"1.2 HTML优化","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/1.2HTML优化.md","filePath":"performanceGeek/1.2HTML优化.md"}'),o={name:"performanceGeek/1.2HTML优化.md"};function r(n,a,c,d,p,s){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="_1-2-html优化" tabindex="-1">1.2 HTML优化 <a class="header-anchor" href="#_1-2-html优化" aria-label="Permalink to &quot;1.2 HTML优化&quot;">​</a></h1><h2 id="精简代码" tabindex="-1">精简代码 <a class="header-anchor" href="#精简代码" aria-label="Permalink to &quot;精简代码&quot;">​</a></h2><ul><li>减少 HTML 的嵌套</li><li>减少 DOM 节点数</li><li>减少无语义代码(比如:<code>&lt;div class=“clear”&gt;&lt;/div&gt;</code>消除浮动)</li><li>删除 http 或者https，如果URL的协议头和当前页面的协议头一致的，或者此URL 在多个协议头都是可用的，则可以考虑删除协议头</li><li>删除多余的空格、换行符、缩进和不必要的注释</li><li>省略冗余标签和属性</li><li>使用相对路径的 URL</li></ul><h2 id="文件位置正确摆放" tabindex="-1">文件位置正确摆放 <a class="header-anchor" href="#文件位置正确摆放" aria-label="Permalink to &quot;文件位置正确摆放&quot;">​</a></h2><ul><li><p>CSS 样式文件链接尽量放在页面头部</p></li><li><p>CSS 加载不会阻塞DOM tree解析，但是会阻塞DOM Tree渲染，也会阻塞后面JS 执行。任何 body 元素之前，可以确保在文档部分中解析了所有CSS 样式(内联和外联)，从而减少了浏览器必须重排文档的次数。如果放置页面底部，就要等待最后一个CSS文件下载完成，此时会出现&quot;白屏&quot;，影响用户体验。</p></li><li><p>JS 引用放在 HTML 底部</p></li><li><p>防止JS的加载、解析、执行对阻塞页面后续元素的正常渲染。</p></li></ul><h2 id="增强体验" tabindex="-1">增强体验 <a class="header-anchor" href="#增强体验" aria-label="Permalink to &quot;增强体验&quot;">​</a></h2><ul><li>设置 favicon.ico</li></ul><p>网站如果不设置favicon.ico，控制台会报错，另外页面加载过程中也没有图标 loading过程，同时也不利于记忆网站品牌，建议统一添加。</p><ul><li>增加首屏必要的 CSS 和JS</li></ul><p>页面如果需要等待所的依赖的JS和 CSS 加载完成才显示，则在渲染过程中页面会一直显示空白，影响用户体验，建议增加首屏必要的CSS 和JS，比如页面框架背景图片或者 loading 图标，内联在HTML页面中。这样做，首屏能快速显示出来，相对减少用户对页面加载等待过程。(比如新浪微博M 站页面框架)</p>',10)]))}const S=e(o,[["render",r]]);export{h as __pageData,S as default};
