import{_ as i,c as l,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const r="/assets/%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0HTTPS.BmabcP5K.png",o="/assets/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0HTTPS.B6LrXDxI.png",s="/assets/%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0HTTPS.nijCGxz2.png",n="/assets/%E5%AE%8C%E6%95%B4%E7%9A%84HTTPS%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.Bwg3j6mP.png",u=JSON.parse('{"title":"HTTPS","description":"","frontmatter":{},"headers":[],"relativePath":"safe/HTTPS.md","filePath":"safe/HTTPS.md"}'),p={name:"safe/HTTPS.md"};function c(h,a,T,d,E,m){return e(),l("div",null,a[0]||(a[0]=[t('<h1 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h1><p><strong>SSL/TLS安全层有两个主要的职责：对发起 HTTP 请求的数据进行加密操作和对接收到 HTTP 的内容进行解密操作。</strong></p><p><strong>HTTPS的迭代：</strong></p><ol><li>对称加密</li><li>非对称加密</li><li>对称加密和非对称加密搭配使用</li><li>添加数字证书</li></ol><h2 id="对称加密" tabindex="-1">对称加密 <a class="header-anchor" href="#对称加密" aria-label="Permalink to &quot;对称加密&quot;">​</a></h2><p><img src="'+r+'" alt="使用对称加密实现HTTPS"></p><p>具体过程：</p><ol><li>浏览器发送它所支持的加密套件列表和一个随机数 client-random。</li></ol><ul><li>加密套件是指加密的方法。</li><li>密套件列表是指浏览器能支持多少种加密方法列表。</li></ul><ol start="2"><li>服务器会从加密套件列表中选取一个加密套件，然后还会生成一个随机数 service-random，并将 service-random 和加密套件列表返回给浏览器。</li><li>最后浏览器和服务器分别返回确认消息。</li></ol><h2 id="非对称加密" tabindex="-1">非对称加密 <a class="header-anchor" href="#非对称加密" aria-label="Permalink to &quot;非对称加密&quot;">​</a></h2><p><img src="'+o+'" alt="非对称加密实现HTTPS"></p><p>和对称加密只有一个密钥不同，<strong>非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来解密。</strong></p><h3 id="非对称加密的请求流程" tabindex="-1">非对称加密的请求流程 <a class="header-anchor" href="#非对称加密的请求流程" aria-label="Permalink to &quot;非对称加密的请求流程&quot;">​</a></h3><ol><li>浏览器发送加密套件列表给服务器。</li><li>服务器会选择一个加密套件，不过和对称加密不同的是，使用非对称加密时服务器上需要有用于浏览器加密的公钥和服务器解密HTTP 数据的私钥，由于公钥是给浏览器加密使用的，因此服务器会将加密套件和公钥一道发送给浏览器。</li><li>最后浏览器和服务器返回确认消息。</li></ol><h3 id="缺陷" tabindex="-1">缺陷 <a class="header-anchor" href="#缺陷" aria-label="Permalink to &quot;缺陷&quot;">​</a></h3><ol><li>非对称加密的效率太低。这会严重影响到加解密数据的速度，进而影响到用户打开页面的速度。</li><li>无法保证服务器发送给浏览器的数据安全。虽然浏览器端可以使用公钥来加密，但是服务器端只能采用私钥来加密，私钥加密只有公钥能解密，但黑客也是可以获取得到公钥的，这样就不能保证服务器端数据的安全了。</li></ol><h2 id="对称加密和非对称加密搭配使用" tabindex="-1">对称加密和非对称加密搭配使用 <a class="header-anchor" href="#对称加密和非对称加密搭配使用" aria-label="Permalink to &quot;对称加密和非对称加密搭配使用&quot;">​</a></h2><p><img src="'+s+'" alt="混合加密实现HTTPS"></p><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li><p>浏览器向服务器发送对称加密套件列表、非对称加密套件列表和随机数 client-random；</p></li><li><p>服务器保存随机数 client-random，选择对称加密和非对称加密的套件，然后生成随机数 service-random，向浏览器发送选择的加密套件、service-random 和公钥；</p></li><li><p>浏览器保存公钥，并利用 client-random 和 service-random 计算出来 pre-master，然后利用公钥对 pre-master 加密，并向服务器发送加密后的数据；</p></li><li><p>最后服务器拿出自己的私钥，解密出 pre-master 数据，并返回确认消息。</p></li></ul><h2 id="添加数字证书" tabindex="-1">添加数字证书 <a class="header-anchor" href="#添加数字证书" aria-label="Permalink to &quot;添加数字证书&quot;">​</a></h2><ul><li>权威机构CA（Certificate Authority）</li><li>数字证书（Digital Certificate）</li></ul><p>对于浏览器来说，数字证书有两个作用：</p><ul><li>一个是通过数字证书向浏览器证明服务器的身份</li><li>另一个是数字证书里面包含了服务器公钥。</li></ul><p><img src="'+n+'" alt="完整的HTTPS请求流程"></p>',26)]))}const A=i(p,[["render",c]]);export{u as __pageData,A as default};
