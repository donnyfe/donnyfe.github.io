import{_ as e,c as i,o as l,ag as t}from"./chunks/framework.DPDPlp3K.js";const S=JSON.parse('{"title":"3.13 DNS优化策略","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/3.13DNS优化策略.md","filePath":"performanceGeek/3.13DNS优化策略.md"}'),r={name:"performanceGeek/3.13DNS优化策略.md"};function o(n,a,d,s,h,c){return l(),i("div",null,a[0]||(a[0]=[t('<h1 id="_3-13-dns优化策略" tabindex="-1">3.13 DNS优化策略 <a class="header-anchor" href="#_3-13-dns优化策略" aria-label="Permalink to &quot;3.13 DNS优化策略&quot;">​</a></h1><h2 id="什么是dns" tabindex="-1">什么是DNS <a class="header-anchor" href="#什么是dns" aria-label="Permalink to &quot;什么是DNS&quot;">​</a></h2><p>域名系统(Domain Name Syste m)是将网站域名和IP地址相互映射的一个分布式数据库，能够更方便的访问互联网</p><h2 id="客户端处理" tabindex="-1">客户端处理 <a class="header-anchor" href="#客户端处理" aria-label="Permalink to &quot;客户端处理&quot;">​</a></h2><h3 id="android-dns模块-okhttp" tabindex="-1">Android DNS模块(okhttp) <a class="header-anchor" href="#android-dns模块-okhttp" aria-label="Permalink to &quot;Android DNS模块(okhttp)&quot;">​</a></h3><ul><li>支持HTTP/2,HTTP/2通过使用多路复用技术在一个单独的TCP 连接上支持并发,通过在一个连接上一次性发送多个请求来发送或接收数据。</li><li>如果 HTTP/2 不可用，连接池复用技术也可以极大减少延时</li><li>支持 GZIP,可以压缩下载体积</li><li>响应缓存可以完全避免网络重复请求。</li><li>如果服务器配置了多个IP地址,当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP</li></ul><h3 id="ios-dns模块" tabindex="-1">iOS DNS模块 <a class="header-anchor" href="#ios-dns模块" aria-label="Permalink to &quot;iOS DNS模块&quot;">​</a></h3><ul><li>App启动时，缓存所有可能要用到的域名 IP，同时异步处理，客户端无需得到缓存结果</li><li>如果 Cache中有此域名的缓存，直接返回缓存的IP</li><li>如果缓存中没有此域名，则重新向HTTPD NS SERVER 进行申请，结果会在此回调中返回</li></ul><h3 id="前端处理" tabindex="-1">前端处理 <a class="header-anchor" href="#前端处理" aria-label="Permalink to &quot;前端处理&quot;">​</a></h3><ul><li>浏览器并发数限制，分布设置成多个域名 <ul><li>用户访问:Java、PHP等API 接口</li><li>页面和样式:HTML/JS/CSS</li><li>图片:jpg、png、gif等</li></ul></li></ul>',10)]))}const p=e(r,[["render",o]]);export{S as __pageData,p as default};
