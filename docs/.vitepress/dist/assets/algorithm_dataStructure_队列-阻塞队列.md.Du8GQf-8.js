import{_ as e,c as r,o,j as a,a as n}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"阻塞队列","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/dataStructure/队列-阻塞队列.md","filePath":"algorithm/dataStructure/队列-阻塞队列.md"}'),s={name:"algorithm/dataStructure/队列-阻塞队列.md"};function l(c,t,d,i,_,m){return o(),r("div",null,t[0]||(t[0]=[a("h1",{id:"阻塞队列",tabindex:"-1"},[n("阻塞队列 "),a("a",{class:"header-anchor",href:"#阻塞队列","aria-label":'Permalink to "阻塞队列"'},"​")],-1),a("p",null,"阻塞队列其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。",-1),a("p",null,"阻塞队列实际上就是一个“生产者 - 消费者模型”。这种基于阻塞队列实现的“生产者 - 消费者模型”，可以有效地协调生产和消费的速度。当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了。这个时候，生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续“生产”。",-1)]))}const f=e(s,[["render",l]]);export{u as __pageData,f as default};
