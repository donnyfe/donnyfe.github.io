import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"函数相关技术","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/function/函数相关技术.md","filePath":"jsPractice/function/函数相关技术.md"}'),o={name:"jsPractice/function/函数相关技术.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="函数相关技术" tabindex="-1">函数相关技术 <a class="header-anchor" href="#函数相关技术" aria-label="Permalink to &quot;函数相关技术&quot;">​</a></h1><h2 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><h3 id="技术实现" tabindex="-1">技术实现 <a class="header-anchor" href="#技术实现" aria-label="Permalink to &quot;技术实现&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> curry</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> newArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    newArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(newArgs.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> &lt;</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> curry.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, fn, newArgs)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, newArgs)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h2><h3 id="函数拦截器" tabindex="-1">函数拦截器 <a class="header-anchor" href="#函数拦截器" aria-label="Permalink to &quot;函数拦截器&quot;">​</a></h3><p>比如我们有一个库，里面的一个函数不推荐使用了，我们最好不要直接在代码库中修改我们原始的代码 我们最好对库中的函数进行一个拦截，也就是定义一个拦截器函数<code>deprecate</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> deprecate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldApi</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newApi</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> message</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> \`The \${</span><span style="color:#24292E;">oldApi</span><span style="color:#032F62;">} is deprecated. Please use the \${</span><span style="color:#24292E;">newApi</span><span style="color:#032F62;">} instead.\`</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(message); </span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>不修改代码本身，而是对这个API进行修饰，修饰的过程可以抽象为拦截它的输入或输出。</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 引入要废弃的 API </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {foo, bar} </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./foo&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 用拦截器函数deprecate修饰</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> _foo</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> deprecate</span><span style="color:#24292E;">(foo, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;newFoo&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> _bar</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> deprecate</span><span style="color:#24292E;">(bar, </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;newBar&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重新导出修饰过的API </span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { foo: _foo, bar: _bar}</span></span></code></pre></div>`,11)]))}const h=a(o,[["render",e]]);export{d as __pageData,h as default};
