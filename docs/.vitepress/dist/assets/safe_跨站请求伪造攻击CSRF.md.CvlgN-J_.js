import{_ as a,c as n,o as l,ag as o}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"跨站请求伪造攻击 CSRF","description":"","frontmatter":{},"headers":[],"relativePath":"safe/跨站请求伪造攻击CSRF.md","filePath":"safe/跨站请求伪造攻击CSRF.md"}'),p={name:"safe/跨站请求伪造攻击CSRF.md"};function t(e,s,r,c,i,y){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="跨站请求伪造攻击-csrf" tabindex="-1">跨站请求伪造攻击 CSRF <a class="header-anchor" href="#跨站请求伪造攻击-csrf" aria-label="Permalink to &quot;跨站请求伪造攻击 CSRF&quot;">​</a></h1><p>CSRF 英文全称是 Cross-site request forgery，称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。</p><p>简单来讲，CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事。和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，也无法通过 CSRF 攻击来获取用户页面数据，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</p><h2 id="csrf攻击方式" tabindex="-1">CSRF攻击方式 <a class="header-anchor" href="#csrf攻击方式" aria-label="Permalink to &quot;CSRF攻击方式&quot;">​</a></h2><ol><li>自动发起 Get 请求</li><li>自动发起 POST 请求</li><li>引诱用户点击链接</li></ol><h3 id="_1-自动发起-get-请求" tabindex="-1">1. 自动发起 Get 请求 <a class="header-anchor" href="#_1-自动发起-get-请求" aria-label="Permalink to &quot;1. 自动发起 Get 请求&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#6F42C1;"> html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; 黑客的站点：CSRF 攻击演示 &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_2-自动发起-post-请求" tabindex="-1">2. 自动发起 POST 请求 <a class="header-anchor" href="#_2-自动发起-post-请求" aria-label="Permalink to &quot;2. 自动发起 POST 请求&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#6F42C1;"> html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; 黑客的站点：CSRF 攻击演示 &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">form</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;hacker-form&#39;</span><span style="color:#6F42C1;"> action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://time.geekbang.org/sendcoin&quot;</span><span style="color:#6F42C1;"> method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">POST</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#6F42C1;"> value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hacker&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#6F42C1;"> value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;100&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt; document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hacker-form&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(); &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_3-引诱用户点击链接" tabindex="-1">3. 引诱用户点击链接 <a class="header-anchor" href="#_3-引诱用户点击链接" aria-label="Permalink to &quot;3. 引诱用户点击链接&quot;">​</a></h3><p>通常出现在论坛或者恶意邮件上。黑客会采用很多方式去诱惑用户点击链接</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> width</span><span style="color:#24292E;">=</span><span style="color:#032F62;">150</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://images.xuejuzi.cn/1612/1_161230185104_1.jpg&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot;</span><span style="color:#6F42C1;"> taget</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;_blank&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    点击下载美女照片</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="csrf防御策略" tabindex="-1">CSRF防御策略 <a class="header-anchor" href="#csrf防御策略" aria-label="Permalink to &quot;CSRF防御策略&quot;">​</a></h2><p>CSRF 攻击的三个必要条件：</p><ul><li>第一个，目标站点一定要有 CSRF 漏洞；</li><li>第二个，用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；</li><li>第三个，需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛。</li></ul><p>对于 CSRF 攻击主要的防护手段是提升服务器的安全性。</p><p>通常有以下几种途径：</p><ol><li>充分利用好 Cookie 的 SameSite 属性</li><li>验证请求的来源站点</li><li>CSRF Token</li></ol><h3 id="_1-充分利用好-cookie-的-samesite-属性" tabindex="-1">1. 充分利用好 Cookie 的 SameSite 属性 <a class="header-anchor" href="#_1-充分利用好-cookie-的-samesite-属性" aria-label="Permalink to &quot;1. 充分利用好 Cookie 的 SameSite 属性&quot;">​</a></h3><p>通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，通常最好能实现从第三方站点发送请求时禁止 Cookie 的发送。因此在浏览器通过不同来源发送 HTTP 请求时，有如下区别：</p><ul><li>如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器；</li><li>如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送。</li></ul><p>在 HTTP 响应头中，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项。</p><p><strong>SameSite 选项通常有 Strict、Lax 和 None 三个值。</strong></p><ul><li><p>Strict 最为严格。如果 SameSite 的值是 Strict，那么浏览器会完全禁止第三方 Cookie。简言之，如果你从极客时间的页面中访问 InfoQ 的资源，而 InfoQ 的某些 Cookie 设置了 SameSite = Strict 的话，那么这些 Cookie 是不会被发送到 InfoQ 的服务器上的。只有你从 InfoQ 的站点去请求 InfoQ 的资源时，才会带上这些 Cookie。</p></li><li><p>Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。 而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。</p></li><li><p>关于 SameSite 的具体使用方式，你可以参考这个链接：<a href="https://web.dev/samesite-cookies-explained" target="_blank" rel="noreferrer">https://web.dev/samesite-cookies-explained</a> 。</p></li></ul><p>对于防范 CSRF 攻击，我们可以针对实际情况将一些关键的 Cookie 设置为 Strict 或者 Lax 模式，这样在跨站点请求时，这些关键的 Cookie 就不会被发送到服务器，从而使得黑客的 CSRF 攻击失效。</p><h3 id="_2-验证请求的来源站点" tabindex="-1">2. 验证请求的来源站点 <a class="header-anchor" href="#_2-验证请求的来源站点" aria-label="Permalink to &quot;2. 验证请求的来源站点&quot;">​</a></h3><p><strong>在服务器端验证请求来源的站点。</strong></p><p><strong>Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。</strong> 虽然可以通过 Referer 告诉服务器 HTTP 请求的来源，但是有一些场景是不适合将来源 URL 暴露给服务器的，因此浏览器提供给开发者一个选项，可以不用上传 Referer 值，具体可参考Referrer Policy。</p><p>但在服务器端验证请求头中的 Referer 并不是太可靠，因此标准委员会又制定了Origin 属性，在一些重要的场合，比如通过 XMLHttpRequest、Fecth 发起跨站请求或者通过 Post 方法发送请求时，都会带上 Origin 属性.</p><p>Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，这是 Origin 和 Referer 的一个主要区别。Origin 的值之所以不包含详细路径信息，是有些站点因为安全考虑，不想把源站点的详细路径暴露给服务器。</p><p>因此，服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值。</p><h3 id="_3-csrf-token" tabindex="-1">3. CSRF Token <a class="header-anchor" href="#_3-csrf-token" aria-label="Permalink to &quot;3. CSRF Token&quot;">​</a></h3><ul><li>第一步，在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#6F42C1;"> html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">form</span><span style="color:#6F42C1;"> action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://time.geekbang.org/sendcoin&quot;</span><span style="color:#6F42C1;"> method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;csrf-token&quot;</span><span style="color:#6F42C1;"> value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;nc98P987bcpncYhoadjoiydc9ajDlcn&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;submit&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请求。</li></ul>`,35)]))}const h=a(p,[["render",t]]);export{E as __pageData,h as default};
