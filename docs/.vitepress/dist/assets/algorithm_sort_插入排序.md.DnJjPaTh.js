import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"插入排序 Insertion","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/插入排序.md","filePath":"algorithm/sort/插入排序.md"}'),o={name:"algorithm/sort/插入排序.md"};function e(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="插入排序-insertion" tabindex="-1">插入排序 Insertion <a class="header-anchor" href="#插入排序-insertion" aria-label="Permalink to &quot;插入排序 Insertion&quot;">​</a></h1><p>在德国，K. Zuse于1945年独立编写了用于直接插入排序的程序</p><ul><li>时间复杂度: <ul><li>平均: O(n2)</li><li>最好: O(n)</li><li>最坏: O(n2)</li></ul></li><li>空间复杂度: O(1)</li><li>排序方式: in-place(占用常数内存，不占用额外内存)</li><li>稳定性: 稳定(排序后2个相等键值的顺序和排序之前它们的顺序相同)</li></ul><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到下一位置中</li><li>重复步骤2</li></ol><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 插入排序</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> insertionSort</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> current, preIndex;</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 1. 外循环迭代数组，默认第一项已经被排序，迭代从第二项开始</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 2. 记录当前项</span></span>
<span class="line"><span style="color:#24292E;">    current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[i]</span></span>
<span class="line"><span style="color:#6A737D;">    // 3. 记录前一项的索引</span></span>
<span class="line"><span style="color:#24292E;">    preIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 4. 内循环迭代当前项之前的元素</span></span>
<span class="line"><span style="color:#D73A49;">    while</span><span style="color:#24292E;"> (preIndex </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> arr[preIndex] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> current) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 5. 前一项往后移</span></span>
<span class="line"><span style="color:#24292E;">      arr[preIndex </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[preIndex]</span></span>
<span class="line"><span style="color:#24292E;">      preIndex</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 6. 此时preIndex为-1，preIndex + 1得到数组第一项</span></span>
<span class="line"><span style="color:#24292E;">    arr[preIndex </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;insertionSort: &#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">insertionSort</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">]))</span></span></code></pre></div>`,7)]))}const d=n(o,[["render",e]]);export{C as __pageData,d as default};
