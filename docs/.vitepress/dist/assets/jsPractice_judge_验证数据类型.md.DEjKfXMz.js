import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const D=JSON.parse('{"title":"验证数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"jsPractice/judge/验证数据类型.md","filePath":"jsPractice/judge/验证数据类型.md"}'),o={name:"jsPractice/judge/验证数据类型.md"};function e(t,s,c,r,y,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="验证数据类型" tabindex="-1">验证数据类型 <a class="header-anchor" href="#验证数据类型" aria-label="Permalink to &quot;验证数据类型&quot;">​</a></h1><h2 id="判断值是否未定义" tabindex="-1">判断值是否未定义 <a class="header-anchor" href="#判断值是否未定义" aria-label="Permalink to &quot;判断值是否未定义&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isUndef</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#D73A49;"> void</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="判断值是否已定义" tabindex="-1">判断值是否已定义 <a class="header-anchor" href="#判断值是否已定义" aria-label="Permalink to &quot;判断值是否已定义&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isDef</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> undefined</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="判断值是否为空" tabindex="-1">判断值是否为空 <a class="header-anchor" href="#判断值是否为空" aria-label="Permalink to &quot;判断值是否为空&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// element-ui/src/utils</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isEmpty</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // null or undefined</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (val </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;boolean&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;number&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">val;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (val </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val.message </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val)) {</span></span>
<span class="line"><span style="color:#6A737D;">    // String or Array</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object String]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object Array]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">val.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Map or Set or File</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object File]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object Map]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object Set]&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">val.size;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // Plain Object</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#032F62;"> &#39;[object Object]&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(val).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="判断是否原始数据类型" tabindex="-1">判断是否原始数据类型 <a class="header-anchor" href="#判断是否原始数据类型" aria-label="Permalink to &quot;判断是否原始数据类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isPrimitive</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#D73A49;">    typeof</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;string&#39;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#D73A49;">    typeof</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;number&#39;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#D73A49;">    typeof</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;symbol&#39;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#D73A49;">    typeof</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为数字类型" tabindex="-1">判断是否为数字类型 <a class="header-anchor" href="#判断是否为数字类型" aria-label="Permalink to &quot;判断是否为数字类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isNumber</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#D73A49;">    typeof</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;number&#39;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#005CC5;">    Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为字符串类型" tabindex="-1">判断是否为字符串类型 <a class="header-anchor" href="#判断是否为字符串类型" aria-label="Permalink to &quot;判断是否为字符串类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object String]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为数组类型" tabindex="-1">判断是否为数组类型 <a class="header-anchor" href="#判断是否为数组类型" aria-label="Permalink to &quot;判断是否为数组类型&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">()</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Array</span><span style="color:#D73A49;"> ||</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为对象类型" tabindex="-1">判断是否为对象类型 <a class="header-anchor" href="#判断是否为对象类型" aria-label="Permalink to &quot;判断是否为对象类型&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Object]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isObject</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;object&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为空对象" tabindex="-1">判断是否为空对象 <a class="header-anchor" href="#判断是否为空对象" aria-label="Permalink to &quot;判断是否为空对象&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a plain Object</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is a plain Object, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isPlainObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &#39;[object Object]&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> prototype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> prototype </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> prototype </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为函数" tabindex="-1">判断是否为函数 <a class="header-anchor" href="#判断是否为函数" aria-label="Permalink to &quot;判断是否为函数&quot;">​</a></h2><p>示例1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isFunction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(fn) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Function]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>示例2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isFunction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;function&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="判断是否为正则对象" tabindex="-1">判断是否为正则对象 <a class="header-anchor" href="#判断是否为正则对象" aria-label="Permalink to &quot;判断是否为正则对象&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isRegExp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object RegExp]&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否为日期对象" tabindex="-1">判断是否为日期对象 <a class="header-anchor" href="#判断是否为日期对象" aria-label="Permalink to &quot;判断是否为日期对象&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isDate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        val </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Date</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#005CC5;">        Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Date]&#39;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否buffer类型" tabindex="-1">判断是否Buffer类型 <a class="header-anchor" href="#判断是否buffer类型" aria-label="Permalink to &quot;判断是否Buffer类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a Buffer</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is a Buffer, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isBuffer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#6F42C1;">isUndefined</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> val.</span><span style="color:#005CC5;">constructor</span><span style="color:#D73A49;"> !==</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#6F42C1;">isUndefined</span><span style="color:#24292E;">(val.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">    &amp;&amp;</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> val.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">.isBuffer </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;function&#39;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> val.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isBuffer</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否arraybuffer类型" tabindex="-1">判断是否ArrayBuffer类型 <a class="header-anchor" href="#判断是否arraybuffer类型" aria-label="Permalink to &quot;判断是否ArrayBuffer类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is an ArrayBuffer</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is an ArrayBuffer, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object ArrayBuffer]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否formdata类型" tabindex="-1">判断是否FormData类型 <a class="header-anchor" href="#判断是否formdata类型" aria-label="Permalink to &quot;判断是否FormData类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a FormData</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is an FormData, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> isFormData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> FormData </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &#39;undefined&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (val </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> FormData</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否file类型" tabindex="-1">判断是否File类型 <a class="header-anchor" href="#判断是否file类型" aria-label="Permalink to &quot;判断是否File类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a File</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is a File, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isFile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object File]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否blob类型" tabindex="-1">判断是否Blob类型 <a class="header-anchor" href="#判断是否blob类型" aria-label="Permalink to &quot;判断是否Blob类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a Blob</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is a Blob, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isBlob</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;[object Blob]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断是否stream类型" tabindex="-1">判断是否Stream类型 <a class="header-anchor" href="#判断是否stream类型" aria-label="Permalink to &quot;判断是否Stream类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Determine if a value is a Stream</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6F42C1;"> {Object}</span><span style="color:#24292E;"> val</span><span style="color:#6A737D;"> The value to test</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6F42C1;"> {boolean}</span><span style="color:#6A737D;"> True if value is a Stream, otherwise false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isStream</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> isObject</span><span style="color:#24292E;">(val) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> isFunction</span><span style="color:#24292E;">(val.pipe);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,46)]))}const A=a(o,[["render",e]]);export{D as __pageData,A as default};
