import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"简单模板模式 Simple template","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/behavior/简单模板模式SimplateTemplate.md","filePath":"pattern/behavior/简单模板模式SimplateTemplate.md"}'),o={name:"pattern/behavior/简单模板模式SimplateTemplate.md"};function e(t,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="简单模板模式-simple-template" tabindex="-1">简单模板模式 Simple template <a class="header-anchor" href="#简单模板模式-simple-template" aria-label="Permalink to &quot;简单模板模式 Simple template&quot;">​</a></h1><p>简单模板模式(Simple template): 通过格式化字符串拼凑出视图避免创建视图时大量节点操作。优化内存开销。</p><p>简单模板模式意在解决运用 DOM 操作创建视图时造成资源消耗大、性能低下、操作复杂等问题。用正则匹配方式去格式化字符串的执行的性能要远高于 DOM 操作拼接视图的执行性能,因此这种方式常备用于大型框架（如 MVC 等）创建视图操作中。</p><p>简单模板模式主要包含三部分,字符串模板库,格式化方法,字符串拼接操作。然而前者,在不同需求的实现中,视图往往是不一致的,因此字符串模板常常是多变的,如何更好地创建模板,给了我们极大的灵活性,对于字符串格式化方法在一个项目中通常是不变的,团队中所有成员都应该以同种方式去格式化模板才能使模板更易读。对于字符串拼接操作,常常是随需求中的视图变化而变化,这里对拼接的灵活的运用可以使你创建的视图过程更高效,模板复用率更高。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 命名空间 单体对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#005CC5;"> A</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> A</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">// 主体展示区容器</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;container&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建视图方法集合</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.strategy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;"> // 文字列表展示</span></span>
<span class="line"><span style="color:#032F62;"> &#39;listPart&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  //……</span></span>
<span class="line"><span style="color:#6A737D;">  // 模块模板</span></span>
<span class="line"><span style="color:#24292E;">  tpl </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">view</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;h2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#6A737D;">   // 列表项模板</span></span>
<span class="line"><span style="color:#24292E;">   liTpl </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">formatestring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">view</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">), {</span></span>
<span class="line"><span style="color:#24292E;">    li: </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">view</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;strong&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;span&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">   }),</span></span>
<span class="line"><span style="color:#6A737D;">   // ……</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#032F62;"> &#39;codePart&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#032F62;"> &#39;onlyTitle&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#032F62;"> &#39;guide&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {}</span></span>
<span class="line"><span style="color:#6A737D;"> // ……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建视图入口</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">init</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;"> // 根据传输的视图类型创建视图</span></span>
<span class="line"><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.strategy[data.type](data);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 模板渲染方法</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">formatestring</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;"> return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\{</span><span style="color:#032F62;">#(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)#</span><span style="color:#22863A;font-weight:bold;">\\}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">match</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> typeof</span></span>
<span class="line"><span style="color:#24292E;">  data[key] </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> undefined</span><span style="color:#D73A49;"> ?</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#D73A49;"> :</span><span style="color:#24292E;"> data[key]</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 模板生成器name:标识</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">view</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;"> // 模板库</span></span>
<span class="line"><span style="color:#D73A49;"> var</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 代码模板</span></span>
<span class="line"><span style="color:#24292E;">  code: </span><span style="color:#032F62;">&#39;&lt;pre&gt;&lt;code&gt;{#code#}&lt;/code&gt;&lt;/pre&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // 图片模板</span></span>
<span class="line"><span style="color:#24292E;">  img: </span><span style="color:#032F62;">&#39;&lt;img src=&quot;{#src#}&quot; alt=&quot;{#alt#}&quot; title=&quot;{#title#}&quot; /&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // 带有id和类的模块模板</span></span>
<span class="line"><span style="color:#24292E;">  part: </span><span style="color:#032F62;">&#39;&lt;div id=&quot;{#id#}&quot; class=&quot;{#class#}&quot;&gt;{#part#}&lt;/div&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // 组合模板</span></span>
<span class="line"><span style="color:#24292E;">  theme: [</span></span>
<span class="line"><span style="color:#032F62;">   &#39;&lt;div&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">   &#39;&lt;h1&gt;{#title#}&lt;/h1&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">   &#39;{#content#}&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">   &#39;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  ].</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6A737D;"> // 如果参数是—个数组,则返回多行模板</span></span>
<span class="line"><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.tostring.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(name) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;[object Array]&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 模板缓存器</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> tpl </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // 遍历标识</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">, len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">   // 模板缓存器追加模板</span></span>
<span class="line"><span style="color:#24292E;">   tpl </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">callee</span><span style="color:#24292E;">(name[i]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 返回最终模板</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> tpl;</span></span>
<span class="line"><span style="color:#24292E;"> } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果模板库中有该模板则返回该模板,否则返回简易模板</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> v[name] </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> v[name] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;&gt;{#&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;#}&lt;/&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,6)]))}const D=n(o,[["render",e]]);export{A as __pageData,D as default};
