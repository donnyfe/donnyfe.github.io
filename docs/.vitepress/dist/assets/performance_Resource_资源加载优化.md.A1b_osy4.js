import{_ as a,c as l,o as n,ag as o}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"资源加载优化","description":"","frontmatter":{},"headers":[],"relativePath":"performance/Resource/资源加载优化.md","filePath":"performance/Resource/资源加载优化.md"}'),p={name:"performance/Resource/资源加载优化.md"};function t(e,s,c,r,i,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="资源加载优化" tabindex="-1">资源加载优化 <a class="header-anchor" href="#资源加载优化" aria-label="Permalink to &quot;资源加载优化&quot;">​</a></h1><ul><li><p>资源压缩</p><ul><li>压缩 HTML/CSS/JavaScript 文件</li><li>开启 Gzip/Brotli 压缩</li><li>使用 WebP 等高压缩比图片格式</li></ul></li><li><p>资源缓存</p><ul><li>合理设置 Cache-Control</li><li>使用 ETag 进行缓存验证</li><li>利用 Service Worker 离线缓存</li></ul></li><li><p>按需加载</p><ul><li>路由级别代码分割</li><li>组件级别动态导入</li><li>图片懒加载</li></ul></li></ul><h2 id="资源加载顺序优化" tabindex="-1">资源加载顺序优化 <a class="header-anchor" href="#资源加载顺序优化" aria-label="Permalink to &quot;资源加载顺序优化&quot;">​</a></h2><h3 id="css-放在头部" tabindex="-1">CSS 放在头部 <a class="header-anchor" href="#css-放在头部" aria-label="Permalink to &quot;CSS 放在头部&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- CSS 放在头部 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stylesheet&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;style.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="js-放在底部" tabindex="-1">JS 放在底部 <a class="header-anchor" href="#js-放在底部" aria-label="Permalink to &quot;JS 放在底部&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 页面内容 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;...&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- JS 放在底部 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app.js&quot;</span><span style="color:#6F42C1;"> defer</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="使用-async-异步加载" tabindex="-1">使用 async 异步加载 <a class="header-anchor" href="#使用-async-异步加载" aria-label="Permalink to &quot;使用 async 异步加载&quot;">​</a></h3><h4 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> async</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;analytics.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="async-特点" tabindex="-1">async 特点 <a class="header-anchor" href="#async-特点" aria-label="Permalink to &quot;async 特点&quot;">​</a></h4><ul><li>async 脚本会异步加载,不会阻塞页面解析</li><li>脚本加载完成后会立即执行,执行顺序不可预测</li><li>适用于独立的脚本,不依赖其他脚本的执行顺序</li></ul><h4 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h4><p>async 脚本加载失败不会阻塞页面解析,也不会触发 onerror 事件。</p><p>常见问题是脚本之间的依赖关系导致的错误。处理方式，使用 Promise 包装异步加载。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 Promise 包装异步加载</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> loadScript</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, </span><span style="color:#E36209;">loadType</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> script</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> src</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (loadType </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;async&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			script.async </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (loadType </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;defer&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			script.defer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		script.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> resolve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		script.</span><span style="color:#6F42C1;">onerror</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Script load error: \${</span><span style="color:#24292E;">src</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">		document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script)</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="color:#6F42C1;">loadScript</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;async&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;脚本加载成功&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;脚本加载失败:&#39;</span><span style="color:#24292E;">, error))</span></span></code></pre></div><h3 id="使用-defer-延迟加载" tabindex="-1">使用 defer 延迟加载 <a class="header-anchor" href="#使用-defer-延迟加载" aria-label="Permalink to &quot;使用 defer 延迟加载&quot;">​</a></h3><p>defer 是 script 标签的一个属性，用于控制脚本的加载和执行时机。</p><h4 id="使用示例-1" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-1" aria-label="Permalink to &quot;使用示例&quot;">​</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 使用 defer --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app.js&quot;</span><span style="color:#6F42C1;"> defer</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="defer-特点" tabindex="-1">defer 特点 <a class="header-anchor" href="#defer-特点" aria-label="Permalink to &quot;defer 特点&quot;">​</a></h4><ul><li>不会阻塞页面解析</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 会阻塞HTML解析 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;block.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 不会阻塞HTML解析 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> defer</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>脚本加载完成后会立即执行,执行顺序可预测</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 脚本会按照顺序执行 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> defer</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;first.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> defer</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;second.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> defer</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;third.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h4><ul><li>适用于依赖其他脚本执行的场景，如 依赖DOM，依赖框架库等</li><li>非关键脚本，如统计、广告等</li></ul><h4 id="不适用场景" tabindex="-1">不适用场景 <a class="header-anchor" href="#不适用场景" aria-label="Permalink to &quot;不适用场景&quot;">​</a></h4><ul><li>需要立即执行的脚步</li></ul><h4 id="错误处理-1" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理-1" aria-label="Permalink to &quot;错误处理&quot;">​</a></h4><p>defer 脚本加载失败会阻塞页面解析,并触发 onerror 事件。如果脚本之间有依赖关系,建议使用 defer 替代 async。</p><p>错误处理方式，同async，使用 Promise 包装异步加载。</p><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><p><strong>使用 async/defer 的注意事项</strong></p><ul><li><p>async 和 defer 不能同时使用</p></li><li><p>如果脚本之间有依赖关系,建议使用 defer 替代 async</p></li><li><p>如果加载跨域脚本,需要设置 crossorigin 属性</p></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> async</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;anonymous&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;//third-party.com/script.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="资源预连接-preconnect" tabindex="-1">资源预连接(preconnect) <a class="header-anchor" href="#资源预连接-preconnect" aria-label="Permalink to &quot;资源预连接(preconnect)&quot;">​</a></h2><p>preconnect 是一种资源提示(Resource Hints), 用于提前建立与服务器的网络连接。当浏览器请求一个资源时,需要经过以下 3 个步骤:</p><ol><li>DNS 查找 - 将域名解析为 IP 地址</li><li>TCP 握手 - 建立 TCP 连接</li><li>TLS 协商 - 如果是 HTTPS,还需要 TLS 安全握手</li></ol><p>这些步骤会消耗大量时间(通常在 100ms-500ms 之间)。通过 preconnect,可以提前完成这些连接步骤, 等到真正需要加载资源时就可以直接使用已建立的连接。合理使用 preconnect, 可以显著减少资源加载时间, 提升页面性能和用户体验。</p><h3 id="使用示例-2" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-2" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 预连接 = DNS + TCP + TLS --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 预连接关键 CDN --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preconnect&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://cdn.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- DNS 预解析作为降级方案 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://cdn.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 预连接 API 域名 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preconnect&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://api.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://api.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p>对于跨域资源(如字体),需要添加 crossorigin 属性:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preconnect&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://fonts.googleapis.com&quot;</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://fonts.googleapis.com&quot;</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="实践建议" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议" aria-label="Permalink to &quot;实践建议&quot;">​</a></h3><ul><li>避免过度使用。</li></ul><p>只对关键的第三方域名使用 preconnect，建议限制在 2-3 个关键域名。因为每个连接都会消耗 CPU 和内存资源。如果 6 秒内未使用连接，浏览器会关闭连接, 此时 preconnect 的开销会超过收益。</p><ul><li>建议同时使用 dns-prefetch 作为降级方案</li><li>对于跨域资源(如字体)必须添加 crossorigin 属性</li><li>建议将 preconnect 放在<code>&lt;head&gt;</code>的早期位置</li><li>如果确定要使用的资源,preload 可能是更好的选择</li></ul><h3 id="适用场景-1" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-1" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>CDN 资源</li><li>字体文件</li><li>API 请求</li><li>第三方服务(如统计、广告等)</li></ul><h2 id="dns-预解析-dns-prefetch" tabindex="-1">DNS 预解析(dns-prefetch) <a class="header-anchor" href="#dns-预解析-dns-prefetch" aria-label="Permalink to &quot;DNS 预解析(dns-prefetch)&quot;">​</a></h2><p>DNS 预解析是一种浏览器优化技术,它的主要目的是提前解析域名对应的 IP 地址, 从而减少用户访问时的延迟。</p><p>根据 Chromium 的文档,DNS 解析时间差异很大:</p><ul><li>本地缓存: 1ms 左右</li><li>需要网络请求: 15ms-300ms</li><li>最差情况: 1-10 秒</li></ul><p>通过合理使用 DNS 预解析,可以有效减少用户等待时间,提升页面性能。但需要注意控制使用数量,避免过度优化反而影响性能。</p><h3 id="使用示例-3" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-3" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- DNS 预解析 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://api.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="适用场景-2" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-2" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ol><li>第三方资源域名（CDN、API 域名、字体等）</li><li>即将跳转的域名</li><li>跨域资源处理</li><li>HTTPS 页面的特殊处理</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- HTTPS 页面默认不启用预解析,需要手动开启 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;x-dns-prefetch-control&quot;</span><span style="color:#6F42C1;"> content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;on&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="实践建议-1" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议-1" aria-label="Permalink to &quot;实践建议&quot;">​</a></h3><ul><li>避免过度使用。同 preconnect，建议限制在 2-3 个关键域名。</li><li>过多的预解析会消耗系统资源</li><li>通常配合 preconnect 使用</li></ul><h3 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>DNS 预解析只对跨域域名生效,对当前域名无效</li><li>如果页面发生重定向,预解析不会自动跟随重定向</li><li>预解析结果会被缓存,但缓存时间较短(通常是几分钟)</li><li>移动端需要谨慎使用,因为会消耗用户的流量</li></ul><h2 id="资源预加载-preload" tabindex="-1">资源预加载(preload) <a class="header-anchor" href="#资源预加载-preload" aria-label="Permalink to &quot;资源预加载(preload)&quot;">​</a></h2><p>preload 是一种资源预加载机制,它可以让浏览器提前加载关键资源,而不用等到解析到相应位置才开始加载。</p><h3 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h3><ul><li>强制性预加载 - 与 prefetch 不同,preload 是强制性的,浏览器必须执行预加载</li><li>不阻塞 - preload 不会阻塞页面的 onload 事件</li><li>缓存优化 - 预加载的资源会被缓存,以便后续立即使用</li></ul><h3 id="使用示例-4" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-4" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 在 head 中使用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 预加载脚本 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;critical.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 预加载样式 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;style&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;critical.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 预加载字体 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font.woff2&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font&quot;</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font/woff2&quot;</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="实践建议-2" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议-2" aria-label="Permalink to &quot;实践建议&quot;">​</a></h3><ul><li>只预加载最关键的资源（如首屏关键资源 CSS/JS/字体）</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 只预加载首屏必需的资源 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;style&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;first-screen.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;main-bundle.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><ul><li>必须指定 as 属性</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 错误示范 - 没有 as 属性 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 正确示范 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><ul><li>跨域资源需要设置 crossorigin</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 跨域字体文件必须设置 crossorigin --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font.woff2&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font&quot;</span><span style="color:#6F42C1;"> type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font/woff2&quot;</span><span style="color:#6F42C1;"> crossorigin</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><ul><li>避免过度使用</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 不建议预加载过多资源 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">	&lt;!-- 只预加载 2-3 个最关键的资源 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;style&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;critical.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#6F42C1;"> as</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="适用场景-3" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-3" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ol><li>关键 CSS/JS 文件</li><li>Web 字体文件</li><li>首屏关键图片</li><li>重要的 JSON 数据</li></ol><h3 id="注意事项-2" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-2" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ol><li>未使用的预加载资源会在 3 秒后在控制台发出警告</li><li>需要权衡预加载数量,避免过度使用影响性能</li><li>建议只预加载当前页面必需的资源</li><li>对于未来可能用到的资源,使用 prefetch 更合适</li></ol><h2 id="资源预渲染-prerender" tabindex="-1">资源预渲染(prerender) <a class="header-anchor" href="#资源预渲染-prerender" aria-label="Permalink to &quot;资源预渲染(prerender)&quot;">​</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prerender&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://api.example.com&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h2 id="资源预获取-prefetch" tabindex="-1">资源预获取(prefetch) <a class="header-anchor" href="#资源预获取-prefetch" aria-label="Permalink to &quot;资源预获取(prefetch)&quot;">​</a></h2><p>prefetch 是一种资源预获取机制,它告诉浏览器这个资源将来可能会用到。</p><p>根据 Google 的数据显示,在搜索结果页面使用 prefetch 预获取目标页面的关键资源,可以显著提升用户实际访问时的页面加载速度</p><h3 id="主要特点-1" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点-1" aria-label="Permalink to &quot;主要特点&quot;">​</a></h3><ul><li>优先级较低 - prefetch 的优先级比 preload 低,浏览器会在空闲时才去加载</li><li>跨页面持久化 - prefetch 的请求会在页面跳转后继续保持,而 preload 会在页面卸载时取消</li><li>建议性预加载 - 浏览器可以自行决定是否执行 prefetch,这与 preload 的强制性不同</li></ul><h3 id="主要作用" tabindex="-1">主要作用 <a class="header-anchor" href="#主要作用" aria-label="Permalink to &quot;主要作用&quot;">​</a></h3><ul><li>提前请求用户可能需要的资源</li><li>缓存时间较短(Chrome 中为 5 分钟)</li><li>主要用于优化后续导航体验</li></ul><h3 id="使用示例-5" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-5" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 预获取下一页可能用到的资源 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/next-page.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/next-page.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 预获取用户可能打开的模态框组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/components/modal.js&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 预获取下一页可能需要的数据 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/api/products?page=2&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="适用场景-4" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-4" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ol><li>未来可能用到的资源</li><li>不紧急的资源</li><li>低优先级资源</li></ol><ul><li>分页导航 - 预获取下一页内容</li><li>路由跳转 - 预获取可能访问的页面</li><li>懒加载组件 - 预获取可能用到的组件</li><li>条件渲染 - 预获取可能显示的内容</li></ul><h3 id="特殊行为" tabindex="-1">特殊行为 <a class="header-anchor" href="#特殊行为" aria-label="Permalink to &quot;特殊行为&quot;">​</a></h3><p>根据 Chrome 实现：</p><ol><li>请求持久化 - 即使用户离开当前页面,prefetch 请求也会继续进行</li><li>缓存策略 - prefetch 的资源会在浏览器的网络栈缓存中保持至少 5 分钟,不受资源本身的缓存策略影响</li></ol><p><strong>与 preload 的区别</strong></p><ul><li>使用时机 <ul><li>preload: 当前页面必需的资源</li><li>prefetch: 未来可能用到的资源</li></ul></li><li>优先级 <ul><li>preload: 高优先级,强制执行</li><li>prefetch: 低优先级,浏览器可选执行</li></ul></li><li>持久性 <ul><li>preload: 页面卸载时取消</li><li>prefetch: 跨页面持续有效</li></ul></li></ul><h3 id="注意事项-3" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-3" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>避免过度使用,以免浪费带宽</li><li>考虑用户的网络环境</li><li>优先预获取最可能用到的资源</li><li>配合用户行为分析使用</li></ul><h2 id="资源预缓存-precache" tabindex="-1">资源预缓存(precache) <a class="header-anchor" href="#资源预缓存-precache" aria-label="Permalink to &quot;资源预缓存(precache)&quot;">​</a></h2><ul><li>主要用于缓存应用核心的静态资源</li><li>缓存会一直保持到文件有新版本可用</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;precache&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;critical.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h2 id="资源懒加载-lazyload" tabindex="-1">资源懒加载(lazyload) <a class="header-anchor" href="#资源懒加载-lazyload" aria-label="Permalink to &quot;资源懒加载(lazyload)&quot;">​</a></h2><p>懒加载是一种优化技术,它可以让页面在初始加载时不加载不必要的资源,而是在用户需要时才加载。</p><h3 id="主要作用-1" tabindex="-1">主要作用 <a class="header-anchor" href="#主要作用-1" aria-label="Permalink to &quot;主要作用&quot;">​</a></h3><ul><li>延迟加载非关键资源,直到需要时才加载</li><li>减少首屏加载时间和带宽占用</li><li>提升页面性能和用户体验</li></ul><h3 id="使用示例-6" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例-6" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#6F42C1;"> rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazyload&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;critical.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>图片懒加载</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> loading</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;image.jpg&quot;</span><span style="color:#6F42C1;"> alt</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;懒加载图片&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><ul><li>iframe 懒加载</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">iframe</span><span style="color:#6F42C1;"> loading</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;video-player.html&quot;</span><span style="color:#6F42C1;"> title</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;视频播放器&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">iframe</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>组件懒加载</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Vue中的异步组件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> AsyncComponent</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  component: </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./AsyncComponent.vue&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  loading: LoadingComponent,</span></span>
<span class="line"><span style="color:#24292E;">  error: ErrorComponent,</span></span>
<span class="line"><span style="color:#24292E;">  delay: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  timeout: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><ul><li>路由懒加载</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Vue Router懒加载</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> routes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/async-component&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./AsyncComponent.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="注意事项-4" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-4" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>关键资源不建议懒加载（如首屏内容，重要交互元素）</li><li>合理设置阈值</li><li>考虑性能平衡，限制同时加载数量</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 限制同时加载的数量</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> loadImage</span><span style="color:#24292E;">(</span><span style="color:#E36209;">images</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> images.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> img</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> images[index]</span></span>
<span class="line"><span style="color:#24292E;">  img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> img.dataset.src</span></span>
<span class="line"><span style="color:#24292E;">  img.</span><span style="color:#6F42C1;">onload</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> loadImage</span><span style="color:#24292E;">(images, index </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="图片懒加载实现方式" tabindex="-1">图片懒加载实现方式 <a class="header-anchor" href="#图片懒加载实现方式" aria-label="Permalink to &quot;图片懒加载实现方式&quot;">​</a></h3><p><strong>使用loading属性</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 使用loading属性 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> loading</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;image.jpg&quot;</span><span style="color:#6F42C1;"> alt</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;懒加载图片&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p><strong>使用data-src方式</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> data-src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;image.jpg&quot;</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;placeholder.gif&quot;</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;lazy&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p><strong>使用data-src方式</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> observer</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> IntersectionObserver</span><span style="color:#24292E;">((</span><span style="color:#E36209;">entries</span><span style="color:#24292E;">, </span><span style="color:#E36209;">observer</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entries.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">entry</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> img</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> entry.target</span></span>
<span class="line"><span style="color:#24292E;">      img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> img.dataset.src</span></span>
<span class="line"><span style="color:#24292E;">      observer.</span><span style="color:#6F42C1;">unobserve</span><span style="color:#24292E;">(img)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 观察所有懒加载图片</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img.lazy&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">img</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  observer.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(img)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong>使用滚动事件(兼容性方案)</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> lazyLoad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> images</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img.lazy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  images.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">img</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isInViewport</span><span style="color:#24292E;">(img)) {</span></span>
<span class="line"><span style="color:#24292E;">      img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> img.dataset.src</span></span>
<span class="line"><span style="color:#24292E;">      img.classList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lazy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 节流处理滚动事件</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;scroll&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(lazyLoad, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">))</span></span></code></pre></div>`,134)]))}const h=a(p,[["render",t]]);export{u as __pageData,h as default};
