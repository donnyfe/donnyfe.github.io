import{_ as n,c as a,o as l,ag as t}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"委托模式 Entrust","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/skill/委托模式Entrust.md","filePath":"pattern/skill/委托模式Entrust.md"}'),p={name:"pattern/skill/委托模式Entrust.md"};function o(e,s,r,c,i,y){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="委托模式-entrust" tabindex="-1">委托模式 Entrust <a class="header-anchor" href="#委托模式-entrust" aria-label="Permalink to &quot;委托模式 Entrust&quot;">​</a></h1><p>委托模式（Delegation Pattern）是一种设计模式，它允许对象将操作委托给另一个对象来处理。</p><p>委托模式是通过委托者将请求委托给被委托者去处理实现的。因此委托模式解决了请求与委托者之间的耦合。通过被委托者对接收到的请求的处理后,分发给相应的委托者去处理。这种模式可以减少代码重复，提高代码的可维护性和可扩展性。</p><p>在 JavaScript 中,委托模式己经得到很广泛的应用,尤其在处理事件上,当然委托模式是一种基础技巧,因此也同样在其他设计模式中被引用,如状态模式中状态对象对接收的状态处理,策略模式中策略对象对接收到的算法处理,命令模式中命令对象对接收到的命令处理等。</p><h2 id="委托模式的优点" tabindex="-1">委托模式的优点 <a class="header-anchor" href="#委托模式的优点" aria-label="Permalink to &quot;委托模式的优点&quot;">​</a></h2><ul><li>代码复用：通过委托，可以复用已有对象的方法，减少代码重复。</li><li>灵活性：委托模式比类继承更灵活，可以在运行时动态改变委托对象。</li></ul><h2 id="委托模式的缺点" tabindex="-1">委托模式的缺点 <a class="header-anchor" href="#委托模式的缺点" aria-label="Permalink to &quot;委托模式的缺点&quot;">​</a></h2><ul><li>性能开销：由于委托模式依赖于原型链查找，可能会带来一定的性能开销。</li><li>调试困难：在复杂的委托关系中，调试代码可能会变得更加困难。</li></ul><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><ul><li>事件处理：在 DOM 事件处理中，常常使用事件委托来处理多个子元素的事件。</li><li>对象继承：通过对象委托，可以实现对象之间的行为共享，而不需要使用类继承。</li></ul><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>事件委托</li><li>对象委托</li></ul><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><p>假设我们有一个包含多个按钮的列表，我们希望在点击任意一个按钮时执行相同的操作。使用事件委托可以简化代码：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#6F42C1;"> html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Event Delegation&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">ul</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;buttonList&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;Button 1&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;Button 2&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;Button 3&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">			// 将点击事件委托给ul元素，而不是为每个按钮单独添加事件监听器。</span></span>
<span class="line"><span style="color:#24292E;">			document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;buttonList&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">				if</span><span style="color:#24292E;"> (event.target.tagName </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;BUTTON&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">					alert</span><span style="color:#24292E;">(event.target.textContent)</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			})</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="对象委托" tabindex="-1">对象委托 <a class="header-anchor" href="#对象委托" aria-label="Permalink to &quot;对象委托&quot;">​</a></h3><p>通过对象委托，我们可以创建一个对象，并将其方法委托给另一个对象来实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> printer</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">	print</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Printing...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> pdfPrinter</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	__proto__: printer,</span></span>
<span class="line"><span style="color:#6F42C1;">	printPDF</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Printing PDF...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pdfPrinter.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 输出: Printing...</span></span>
<span class="line"><span style="color:#24292E;">pdfPrinter.</span><span style="color:#6F42C1;">printPDF</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 输出: Printing PDF...</span></span></code></pre></div>`,18)]))}const d=n(p,[["render",o]]);export{u as __pageData,d as default};
