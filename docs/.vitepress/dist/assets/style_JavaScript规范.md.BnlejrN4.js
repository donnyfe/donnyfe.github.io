import{_ as a,c as n,o as p,ag as e}from"./chunks/framework.DPDPlp3K.js";const y=JSON.parse('{"title":"Javascript 规范","description":"","frontmatter":{},"headers":[],"relativePath":"style/JavaScript规范.md","filePath":"style/JavaScript规范.md"}'),l={name:"style/JavaScript规范.md"};function o(t,s,c,i,r,d){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="javascript-规范" tabindex="-1">Javascript 规范 <a class="header-anchor" href="#javascript-规范" aria-label="Permalink to &quot;Javascript 规范&quot;">​</a></h1><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><h3 id="_1-采用小写驼峰命名-lowercamelcase-代码中的命名均不能以下划线-也不能以下划线或美元符号结束" tabindex="-1">1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线， 也不能以下划线或美元符号结束 <a class="header-anchor" href="#_1-采用小写驼峰命名-lowercamelcase-代码中的命名均不能以下划线-也不能以下划线或美元符号结束" aria-label="Permalink to &quot;1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线， 也不能以下划线或美元符号结束&quot;">​</a></h3><p>反例： <code>name / name / name$</code></p><h3 id="_2-方法名、参数名、成员变量、局部变量都统一使用-lowercamelcase-风-格-必须遵从驼峰形式" tabindex="-1">2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风 格，必须遵从驼峰形式 <a class="header-anchor" href="#_2-方法名、参数名、成员变量、局部变量都统一使用-lowercamelcase-风-格-必须遵从驼峰形式" aria-label="Permalink to &quot;2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风 格，必须遵从驼峰形式&quot;">​</a></h3><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p><p>其中 method 方法命名必须是 动词 或者 动词+名词 形式</p><p>正例： <code>saveShopCarData /openShopCarInfoDialog</code></p><p>反例： <code>save / open / show / go</code></p><p>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）</p><p>add / update / delete / detail / get</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>附： 函数方法常用的动词: </span></span>
<span class="line"><span>get 获取/set 设置, </span></span>
<span class="line"><span>add 增加/remove 删除, </span></span>
<span class="line"><span>create 创建/destory 销毁, </span></span>
<span class="line"><span>start 启动/stop 停止, </span></span>
<span class="line"><span>open 打开/close 关闭, </span></span>
<span class="line"><span>read 读取/write 写入, </span></span>
<span class="line"><span>load 载入/save 保存,</span></span>
<span class="line"><span>begin 开始/end 结束, </span></span>
<span class="line"><span>backup 备份/restore 恢复,</span></span>
<span class="line"><span>import 导入/export 导出, </span></span>
<span class="line"><span>split 分割/merge 合并,</span></span>
<span class="line"><span>inject 注入/extract 提取,</span></span>
<span class="line"><span>attach 附着/detach 脱离, </span></span>
<span class="line"><span>bind 绑定/separate 分离, </span></span>
<span class="line"><span>view 查看/browse 浏览, </span></span>
<span class="line"><span>edit 编辑/modify 修改,</span></span>
<span class="line"><span>select 选取/mark 标记, </span></span>
<span class="line"><span>copy 复制/paste 粘贴,</span></span>
<span class="line"><span>undo 撤销/redo 重做, </span></span>
<span class="line"><span>insert 插入/delete 移除,</span></span>
<span class="line"><span>add 加入/append 添加, </span></span>
<span class="line"><span>clean 清理/clear 清除,</span></span>
<span class="line"><span>index 索引/sort 排序,</span></span>
<span class="line"><span>find 查找/search 搜索, </span></span>
<span class="line"><span>increase 增加/decrease 减少, </span></span>
<span class="line"><span>play 播放/pause 暂停, </span></span>
<span class="line"><span>launch 启动/run 运行, </span></span>
<span class="line"><span>compile 编译/execute 执行, </span></span>
<span class="line"><span>debug 调试/trace 跟踪, </span></span>
<span class="line"><span>observe 观察/listen 监听,</span></span>
<span class="line"><span>build 构建/publish 发布,</span></span>
<span class="line"><span>input 输入/output 输出,</span></span>
<span class="line"><span>encode 编码/decode 解码, </span></span>
<span class="line"><span>encrypt 加密/decrypt 解密, </span></span>
<span class="line"><span>compress 压缩/decompress 解压缩, </span></span>
<span class="line"><span>pack 打包/unpack 解包,</span></span>
<span class="line"><span>parse 解析/emit 生成,</span></span>
<span class="line"><span>connect 连接/disconnect 断开,</span></span>
<span class="line"><span>send 发送/receive 接收, </span></span>
<span class="line"><span>download 下载/upload 上传, </span></span>
<span class="line"><span>refresh 刷新/synchronize 同步,</span></span>
<span class="line"><span>update 更新/revert 复原, </span></span>
<span class="line"><span>lock 锁定/unlock 解锁, </span></span>
<span class="line"><span>check out 签出/check in 签入, </span></span>
<span class="line"><span>submit 提交/commit 交付, </span></span>
<span class="line"><span>push 推/pull 拉,</span></span>
<span class="line"><span>expand 展开/collapse 折叠, </span></span>
<span class="line"><span>enter 进入/exit 退出,</span></span>
<span class="line"><span>abort 放弃/quit 离开, </span></span>
<span class="line"><span>obsolete 废弃/depreciate 废旧, </span></span>
<span class="line"><span>collect 收集/aggregate 聚集</span></span></code></pre></div><h3 id="_3-常量命名全部大写-单词间用下划线隔开-力求语义表达完整清楚-不要嫌名字长" tabindex="-1">3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚， 不要嫌名字长 <a class="header-anchor" href="#_3-常量命名全部大写-单词间用下划线隔开-力求语义表达完整清楚-不要嫌名字长" aria-label="Permalink to &quot;3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚， 不要嫌名字长&quot;">​</a></h3><p>正例： MAX_STOCK_COUNT 反例： MAX_COUNT</p><h2 id="代码格式" tabindex="-1">代码格式 <a class="header-anchor" href="#代码格式" aria-label="Permalink to &quot;代码格式&quot;">​</a></h2><h3 id="_1-使用-2-个空格进行缩进" tabindex="-1">1) 使用 2 个空格进行缩进 <a class="header-anchor" href="#_1-使用-2-个空格进行缩进" aria-label="Permalink to &quot;1) 使用 2 个空格进行缩进&quot;">​</a></h3><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  x </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以-提升可读性" tabindex="-1">2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以 提升可读性 <a class="header-anchor" href="#_2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以-提升可读性" aria-label="Permalink to &quot;2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以 提升可读性&quot;">​</a></h3><p>说明：任何情形，没有必要插入多个空行进行隔开。</p><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处： 正例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;foo&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> testDiv </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;foo&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> testDiv </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;&lt;div id=&#39;test&#39;&gt;&lt;/div&gt;&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="对象声明" tabindex="-1">对象声明 <a class="header-anchor" href="#对象声明" aria-label="Permalink to &quot;对象声明&quot;">​</a></h2><ol><li>使用字面值创建对象 正例： let user = {}; 反例： let user = new Object();</li><li>使用字面量来代替对象构造器</li></ol><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { age: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, name: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, city: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> };</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">user.age </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">user.name </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">user.city </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="使用-es6" tabindex="-1">使用 ES6+ <a class="header-anchor" href="#使用-es6" aria-label="Permalink to &quot;使用 ES6+&quot;">​</a></h2><p>必须优先使用 ES6+ 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复 用。比如箭头函数、await/async ， 解构， let ， for…of 等等。</p><h2 id="括号" tabindex="-1">括号 <a class="header-anchor" href="#括号" aria-label="Permalink to &quot;括号&quot;">​</a></h2><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try,catch, finally, with。</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (condition) { </span></span>
<span class="line"><span style="color:#6F42C1;">  doSomething</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (condition) </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="undefined-判断" tabindex="-1">undefined 判断 <a class="header-anchor" href="#undefined-判断" aria-label="Permalink to &quot;undefined 判断&quot;">​</a></h2><p>永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。 正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;undefined&#39;</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (person </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="条件判断和循环最多三层" tabindex="-1">条件判断和循环最多三层 <a class="header-anchor" href="#条件判断和循环最多三层" aria-label="Permalink to &quot;条件判断和循环最多三层&quot;">​</a></h2><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的 三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p><h2 id="this-的转换命名" tabindex="-1">this 的转换命名 <a class="header-anchor" href="#this-的转换命名" aria-label="Permalink to &quot;this 的转换命名&quot;">​</a></h2><p>对上下文 this 的引用只能使用 ’self’ 来命名。</p><h2 id="慎用-console-log" tabindex="-1">慎用 console.log <a class="header-anchor" href="#慎用-console-log" aria-label="Permalink to &quot;慎用 console.log&quot;">​</a></h2><p>因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能。</p>`,50)]))}const u=a(l,[["render",o]]);export{y as __pageData,u as default};
