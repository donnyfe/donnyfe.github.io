import{_ as e,c as a,o as l,ag as t}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"提交信息规范","description":"","frontmatter":{},"headers":[],"relativePath":"style/styleTools/Git提交信息规范.md","filePath":"style/styleTools/Git提交信息规范.md"}'),o={name:"style/styleTools/Git提交信息规范.md"};function n(p,s,i,c,r,d){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="提交信息规范" tabindex="-1">提交信息规范 <a class="header-anchor" href="#提交信息规范" aria-label="Permalink to &quot;提交信息规范&quot;">​</a></h1><p>Git提交信息遵循一致的格式有助于提高可读性，规范目前使用较多的是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noreferrer">Angular 团队的规范</a></p><p>它的 message 格式如下:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">type</span><span style="color:#24292E;">&gt;(&lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;): &lt;</span><span style="color:#22863A;">subject</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BLANK</span><span style="color:#6F42C1;"> LINE</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BLANK</span><span style="color:#6F42C1;"> LINE</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">footer</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="message构成说明" tabindex="-1">message构成说明 <a class="header-anchor" href="#message构成说明" aria-label="Permalink to &quot;message构成说明&quot;">​</a></h2><ul><li><code>&lt;type&gt;</code>（必选）：用于说明 commit 的类型（build|ci|docs|feat|fix|perf|refactor|test）。</li><li><code>&lt;scope&gt;</code>（可选）：用于说明 commit 影响的范围，比如模块名、文件名等。</li><li><code>&lt;subject&gt;</code>（必选）：简短描述 commit 的内容，不超过 50 个字符。</li><li><code>&lt;body&gt;</code>(可选)：详细描述 commit 的内容和变更原因，每行不超过 72 个字符。</li><li><code>&lt;footer&gt;</code>（可选）：通常包含BreakingChange信息和关联的issue编号</li></ul><h2 id="type类型" tabindex="-1">type类型 <a class="header-anchor" href="#type类型" aria-label="Permalink to &quot;type类型&quot;">​</a></h2><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档修改</li><li>style： 代码格式修改</li><li>refactor：代码重构</li><li>test：测试用例修改</li><li>chore：构建过程或辅助工具的变动</li><li>perf: 提升性能</li></ul>`,8)]))}const m=e(o,[["render",n]]);export{g as __pageData,m as default};
