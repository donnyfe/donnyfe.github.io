import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const A=JSON.parse('{"title":"选择排序 selection","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/sort/选择排序.md","filePath":"algorithm/sort/选择排序.md"}'),o={name:"algorithm/sort/选择排序.md"};function e(t,s,r,c,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="选择排序-selection" tabindex="-1">选择排序 selection <a class="header-anchor" href="#选择排序-selection" aria-label="Permalink to &quot;选择排序 selection&quot;">​</a></h1><ul><li>算法策略: 双指针</li><li>时间复杂度: 平均: O(n2)、最好: O(n2)、最坏: O(n2)</li><li>空间复杂度: O(1)</li><li>排序方式: in-place(占用常数内存，不占用额外内存)</li><li>稳定性: 不稳定(排序后2个相等键值的顺序和排序之前它们的顺序不相同)</li></ul><h2 id="排序原理" tabindex="-1">排序原理 <a class="header-anchor" href="#排序原理" aria-label="Permalink to &quot;排序原理&quot;">​</a></h2><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</li><li>然后再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。</li></ul><ol><li>使用双循环，双指针，找出快指针较小值</li><li>记录较小值的索引</li><li>当前指针元素与较小值元素互换</li></ol><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><h3 id="版本一" tabindex="-1">版本一 <a class="header-anchor" href="#版本一" aria-label="Permalink to &quot;版本一&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> selectionSort</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> minIndex, current;</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 外循环-慢指针</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 记录当前项索引</span></span>
<span class="line"><span style="color:#24292E;">        minIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#6A737D;">        // 内循环-使用快指针找出小数，记录小数的索引</span></span>
<span class="line"><span style="color:#D73A49;">        for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 如果后一项比当前项小</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;">(arr[j] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[minIndex]) {</span></span>
<span class="line"><span style="color:#6A737D;">                // 记录下较小数的索引</span></span>
<span class="line"><span style="color:#24292E;">                minIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 保存当前项（当前项为大数）</span></span>
<span class="line"><span style="color:#24292E;">        current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[i];</span></span>
<span class="line"><span style="color:#6A737D;">        // 当前项与小数互换</span></span>
<span class="line"><span style="color:#24292E;">        arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[minIndex];</span></span>
<span class="line"><span style="color:#24292E;">        arr[minIndex] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">selectionSort</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]))</span></span></code></pre></div><h3 id="版本二" tabindex="-1">版本二 <a class="header-anchor" href="#版本二" aria-label="Permalink to &quot;版本二&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> selectionSort</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> minIndex;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">    minIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (arr[j] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[minIndex]) {</span></span>
<span class="line"><span style="color:#24292E;">        minIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 相邻元素交换</span></span>
<span class="line"><span style="color:#24292E;">    [arr[i], arr[minIndex]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[minIndex], arr[i]]</span></span>
<span class="line"><span style="color:#24292E;">    i</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,10)]))}const D=n(o,[["render",e]]);export{A as __pageData,D as default};
