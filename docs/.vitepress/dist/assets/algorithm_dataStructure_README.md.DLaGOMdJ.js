import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const _=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/dataStructure/README.md","filePath":"algorithm/dataStructure/README.md"}'),r={name:"algorithm/dataStructure/README.md"};function o(u,l,c,n,s,d){return t(),a("div",null,l[0]||(l[0]=[e('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="逻辑结构" tabindex="-1">逻辑结构 <a class="header-anchor" href="#逻辑结构" aria-label="Permalink to &quot;逻辑结构&quot;">​</a></h2><ul><li><p>线性表结构</p><ul><li>数组</li><li>栈</li><li>队列</li><li>链表</li></ul></li><li><p>非线性结构</p><ul><li>二维数组</li><li>堆</li><li>树 <ul><li>完全二叉树</li><li>满二叉树</li><li>二叉搜索树</li><li>平衡二叉树</li><li>​ 红黑树 <ul><li>AVL树</li></ul></li><li>哈夫曼树</li><li>字典树</li><li>B+树</li></ul></li><li>图</li></ul></li><li><p>特殊</p><ul><li>位运算 Bitwise</li><li>布隆过滤器</li><li>LRUCache</li></ul></li></ul><h2 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h2><ul><li>顺序存储: 数组(数组在内存中的位置是连续的，它属于顺序存储)</li><li>链式存储: 链表(链表是主动建立数据间的关联关系的，在内存中却不一定是连续的)</li><li>索引存储:</li><li>散列存储: 哈希表(顺序和逻辑上都不存在顺序关系，但是可以通过一定的方式去访问)</li></ul><blockquote><p>数组在内存中的位置是连续的，它就属于顺序存储；链表是主动建立数据间的关联关系的，在内存中却不一定是连续的，它属于链式存储；还有顺序和逻辑上都不存在顺序关系，但是你可以通过一定的方式去放问它的哈希表，数据散列存储。</p></blockquote>',6)]))}const p=i(r,[["render",o]]);export{_ as __pageData,p as default};
