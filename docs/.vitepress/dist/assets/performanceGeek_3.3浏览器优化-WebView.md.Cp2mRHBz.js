import{_ as i,c as a,o as l,ag as r}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"3.3 浏览器优化-WebView","description":"","frontmatter":{},"headers":[],"relativePath":"performanceGeek/3.3浏览器优化-WebView.md","filePath":"performanceGeek/3.3浏览器优化-WebView.md"}'),t={name:"performanceGeek/3.3浏览器优化-WebView.md"};function o(n,e,_,b,s,c){return l(),a("div",null,e[0]||(e[0]=[r('<h1 id="_3-3-浏览器优化-webview" tabindex="-1">3.3 浏览器优化-WebView <a class="header-anchor" href="#_3-3-浏览器优化-webview" aria-label="Permalink to &quot;3.3 浏览器优化-WebView&quot;">​</a></h1><p>32-38</p><h2 id="启动过程" tabindex="-1">启动过程 <a class="header-anchor" href="#启动过程" aria-label="Permalink to &quot;启动过程&quot;">​</a></h2><ul><li>当 App 首次打开时，默认是并不初始化浏览器内核的;</li><li>当创建WebView实例的时候，才会启动浏览器内核(打开时间需要70~700ms)，并创建WebView 的基础框架。</li></ul><h2 id="实施步骤" tabindex="-1">实施步骤 <a class="header-anchor" href="#实施步骤" aria-label="Permalink to &quot;实施步骤&quot;">​</a></h2><ul><li>使用全局WebView进行优化;</li><li>在客户端刚启动时，就初始化一个全全局的WebView待用，并隐藏;</li><li>当用户访问了WebView时，直接使用这个WebView加载对应网页，并展示。</li></ul><h2 id="具体流程" tabindex="-1">具体流程 <a class="header-anchor" href="#具体流程" aria-label="Permalink to &quot;具体流程&quot;">​</a></h2><ul><li>在初始页面上创建全局WebView;</li><li>根据页面跳转流向，确定目标网页;</li><li>利用全局WebView，加载目标网页对应的基础文件;</li><li>向服务器发送请求消息，请求目标网页对应的网页数据;</li><li>将请求到的网页数据渲染到初始页面上;</li><li>运行状态切换为退出状态时，销毁WebView。</li></ul>',8)]))}const w=i(t,[["render",o]]);export{h as __pageData,w as default};
