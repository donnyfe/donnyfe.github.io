import{_ as t,c as i,o as e,ag as l}from"./chunks/framework.DPDPlp3K.js";const o="/assets/storage-xss-attack.BvFOa27A.png",S="/assets/reflective-xss-attack.DBhsUK_i.png",X=JSON.parse('{"title":"跨站脚本攻击 XSS","description":"","frontmatter":{},"headers":[],"relativePath":"safe/跨站脚本攻击XSS.md","filePath":"safe/跨站脚本攻击XSS.md"}'),r={name:"safe/跨站脚本攻击XSS.md"};function s(p,a,n,c,h,d){return e(),i("div",null,a[0]||(a[0]=[l('<h1 id="跨站脚本攻击-xss" tabindex="-1">跨站脚本攻击 XSS <a class="header-anchor" href="#跨站脚本攻击-xss" aria-label="Permalink to &quot;跨站脚本攻击 XSS&quot;">​</a></h1><p>XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。</p><p>XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><p>最开始的时候，这种攻击是通过跨域来实现的，所以叫“跨域脚本”。</p><p>当页面被注入了恶意 JavaScript 脚本时，浏览器无法区分这些脚本是被恶意注入的还是正常的页面内容，所以恶意注入 JavaScript 脚本也拥有所有的脚本权限。</p><h2 id="恶意脚本的危害" tabindex="-1">恶意脚本的危害 <a class="header-anchor" href="#恶意脚本的危害" aria-label="Permalink to &quot;恶意脚本的危害&quot;">​</a></h2><ul><li><p><strong>可以窃取 Cookie 信息。</strong> 恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器；恶意服务器拿到用户的 Cookie 信息之后，就可以在其他电脑上模拟用户的登录，然后进行转账等操作</p></li><li><p><strong>可以监听用户行为。</strong> 恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如可以获取用户输入的信用卡等信息，将其发送到恶意服务器。黑客掌握了这些信息之后，又可以做很多违法的事情。</p></li><li><p>可以通过<strong>修改 DOM</strong> 伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。</p></li><li><p>还可以<strong>在页面内生成浮窗广告</strong>，这些广告会严重地影响用户体验。</p></li></ul><h2 id="如何注入恶意脚本" tabindex="-1">如何注入恶意脚本 <a class="header-anchor" href="#如何注入恶意脚本" aria-label="Permalink to &quot;如何注入恶意脚本&quot;">​</a></h2><p>要想避免站点被注入恶意脚本，就要知道有哪些常见的注入方式。</p><p>通常情况下，主要有三种攻击方式来注入恶意脚本：</p><ol><li>存储型 XSS 攻击（服务端安全漏洞）</li><li>反射型 XSS 攻击（服务端安全漏洞）</li><li>基于 DOM 的 XSS 攻击（前端安全漏洞）</li></ol><h3 id="_1-存储型-xss-攻击" tabindex="-1">1. 存储型 XSS 攻击 <a class="header-anchor" href="#_1-存储型-xss-攻击" aria-label="Permalink to &quot;1. 存储型 XSS 攻击&quot;">​</a></h3><p><img src="'+o+'" alt="存储型XSS攻击"></p><p>储型 XSS 攻击大致需要经过如下步骤：</p><ol><li>黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；</li><li>用户向网站请求包含了恶意 JavaScript 脚本的页面；</li><li>用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。</li></ol><h3 id="_2-反射型-xss-攻击" tabindex="-1">2. 反射型 XSS 攻击 <a class="header-anchor" href="#_2-反射型-xss-攻击" aria-label="Permalink to &quot;2. 反射型 XSS 攻击&quot;">​</a></h3><p>在一个反射型 XSS 攻击过程中，恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。</p><p><img src="'+S+'" alt="反射型XSS攻击"></p><p>当打开<code>http://localhost:3000/?xss=&lt;script&gt;alert(&#39;你被xss攻击了&#39;)&lt;/script&gt;</code>这段 URL 时，用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。</p><p>在现实生活中，黑客经常会通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接，所以对于一些链接我们一定要慎之又慎。</p><p><strong>Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方。</strong></p><h3 id="_3-基于-dom-的-xss-攻击" tabindex="-1">3. 基于 DOM 的 XSS 攻击 <a class="header-anchor" href="#_3-基于-dom-的-xss-攻击" aria-label="Permalink to &quot;3. 基于 DOM 的 XSS 攻击&quot;">​</a></h3><p>基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。黑客通过各种手段将恶意脚本注入用户的页面中，比如:</p><ul><li>通过网络劫持在页面传输过程中修改 HTML 页面的内容</li><li>通过 WiFi 路由器劫持</li><li>通过本地恶意软件来劫持的</li></ul><p>它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。</p><h2 id="如何阻止-xss-攻击" tabindex="-1">如何阻止 XSS 攻击 <a class="header-anchor" href="#如何阻止-xss-攻击" aria-label="Permalink to &quot;如何阻止 XSS 攻击&quot;">​</a></h2><p>存储型 XSS 攻击和反射型 XSS 攻击都是需要经过 Web 服务器来处理的，因此可以认为这两种类型的漏洞是服务端的安全漏洞。而基于 DOM 的 XSS 攻击全部都是在浏览器端完成的，因此基于 DOM 的 XSS 攻击是属于前端的安全漏洞。</p><p>无论是何种类型的 XSS 攻击，它们都有一个共同点，那就是首先往浏览器中注入恶意脚本，然后再通过恶意脚本将用户信息发送至黑客部署的恶意服务器上。</p><p>要阻止 XSS 攻击，可以通过：</p><ul><li>阻止恶意 JavaScript 脚本的注入</li><li>恶意消息的发送</li></ul><h2 id="xss攻击防御策略" tabindex="-1">XSS攻击防御策略 <a class="header-anchor" href="#xss攻击防御策略" aria-label="Permalink to &quot;XSS攻击防御策略&quot;">​</a></h2><ol><li>服务器对输入脚本进行过滤或转码</li><li>充分利用 CSP</li><li>使用 HttpOnly 属性</li></ol><h3 id="_1-服务器对输入脚本进行过滤或转码" tabindex="-1">1. 服务器对输入脚本进行过滤或转码 <a class="header-anchor" href="#_1-服务器对输入脚本进行过滤或转码" aria-label="Permalink to &quot;1. 服务器对输入脚本进行过滤或转码&quot;">​</a></h3><h3 id="_2-充分利用-csp" tabindex="-1">2. 充分利用 CSP <a class="header-anchor" href="#_2-充分利用-csp" aria-label="Permalink to &quot;2. 充分利用 CSP&quot;">​</a></h3><p>虽然在服务器端执行过滤或者转码可以阻止 XSS 攻击的发生，但完全依靠服务器端依然是不够的，我们还需要把 CSP 等策略充分地利用起来，以降低 XSS 攻击带来的风险和后果。</p><p>实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能：</p><ul><li>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的；</li><li>禁止向第三方域提交数据，这样用户数据也不会外泄；</li><li>禁止执行内联脚本和未授权的脚本；</li><li>还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。</li></ul><h3 id="_3-使用-httponly-属性" tabindex="-1">3. 使用 HttpOnly 属性 <a class="header-anchor" href="#_3-使用-httponly-属性" aria-label="Permalink to &quot;3. 使用 HttpOnly 属性&quot;">​</a></h3><p>由于很多 XSS 攻击都是来盗用 Cookie 的，因此还可以通过使用 HttpOnly 属性来保护我们 Cookie 的安全。</p><p>通常服务器可以将某些 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的。</p><p>设置了HttpOlny 属性的cookie 无法通过 document.cookie 进行读取。</p>',41)]))}const u=t(r,[["render",s]]);export{X as __pageData,u as default};
