import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.DPDPlp3K.js";const C=JSON.parse('{"title":"代理模式 Proxy","description":"","frontmatter":{},"headers":[],"relativePath":"pattern/structure/代理模式Proxy.md","filePath":"pattern/structure/代理模式Proxy.md"}'),o={name:"pattern/structure/代理模式Proxy.md"};function t(e,s,c,r,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="代理模式-proxy" tabindex="-1">代理模式 Proxy <a class="header-anchor" href="#代理模式-proxy" aria-label="Permalink to &quot;代理模式 Proxy&quot;">​</a></h1><p>代理模式：它通过提供一个代理对象来代理或者替代一个真实对象的操作。代理控制对原对象的访问，并允许在不改变原对象代码的前提下，在执行操作前后添加额外的操作。</p><h2 id="代理模式的作用" tabindex="-1">代理模式的作用 <a class="header-anchor" href="#代理模式的作用" aria-label="Permalink to &quot;代理模式的作用&quot;">​</a></h2><ul><li>访问控制: 代理模式可以在不改变原始对象的基础上添加访问控制的逻辑。</li><li>性能优化: 代理模式可以用于性能优化，比如实现懒加载、结果缓存等。</li><li>数据验证: 代理模式可以用来进行数据验证，确保对象的属性在设置时不会违反某些规则。</li></ul><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><ul><li>缓存代理：缓存请求结果、计算结果</li><li>Nest.js 统一的错误捕获</li></ul><h3 id="缓存代理-缓存计算结果" tabindex="-1">缓存代理-缓存计算结果 <a class="header-anchor" href="#缓存代理-缓存计算结果" aria-label="Permalink to &quot;缓存代理-缓存计算结果&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> mult</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">	for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		a </span><span style="color:#D73A49;">*=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">[i]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> plus</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#D73A49;">	for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		a </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">[i]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建缓存代理</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> createCacheProxy</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">	// 保存计算的结果</span></span>
<span class="line"><span style="color:#D73A49;">	let</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">	// 使用闭包在内存中保留对cache的引用</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">		// 将所有参数转化为字符串作为缓存的 key</span></span>
<span class="line"><span style="color:#D73A49;">		let</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">		if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> cache) {</span></span>
<span class="line"><span style="color:#D73A49;">			return</span><span style="color:#24292E;"> cache[args]</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">			return</span><span style="color:#24292E;"> (cache[args] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用代理对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> proxyMult</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> createCacheProxy</span><span style="color:#24292E;">(mult)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">proxyMult</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 24</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> proxyPlus</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> createCacheProxy</span><span style="color:#24292E;">(plus)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">proxyPlus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 10</span></span></code></pre></div><hr><p>在实际的开发中，有些操作可能比较耗费系统资源，所以我们可以利用将其缓存起来，从而提高软件整体的运行效率，以下就是使用代理模式来实现对函数的结果的缓存的一个示例，lodash 也提供了一个这样的 API-&gt;memoize。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> createMemoized</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	const</span><span style="color:#005CC5;"> cache</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Proxy</span><span style="color:#24292E;">(func, {</span></span>
<span class="line"><span style="color:#6F42C1;">		apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">thisArg</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">			// 创建一个唯一的缓存键，基于函数的参数</span></span>
<span class="line"><span style="color:#D73A49;">			const</span><span style="color:#005CC5;"> cacheKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">			if</span><span style="color:#24292E;"> (cache.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(cacheKey)) {</span></span>
<span class="line"><span style="color:#24292E;">				console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;从缓存中获取结果&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">				return</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(cacheKey)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;计算结果并缓存&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">			const</span><span style="color:#005CC5;"> result</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> target.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(thisArg, args)</span></span>
<span class="line"><span style="color:#24292E;">			cache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(cacheKey, result)</span></span>
<span class="line"><span style="color:#D73A49;">			return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例函数：计算两个数的和</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">	return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个记忆化版本的 add 函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> memoizedAdd</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> createMemoized</span><span style="color:#24292E;">(add)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用记忆化函数</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">memoizedAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 计算结果并缓存</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">memoizedAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 从缓存中获取结果</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">memoizedAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 计算结果并缓存</span></span></code></pre></div><h3 id="nest-js-统一的错误捕获" tabindex="-1">Nest.js 统一的错误捕获 <a class="header-anchor" href="#nest-js-统一的错误捕获" aria-label="Permalink to &quot;Nest.js 统一的错误捕获&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> NestFactoryStatic</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">	public</span><span style="color:#D73A49;"> async</span><span style="color:#6F42C1;"> create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">		// 节选了部分代码</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> instance</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> NestApplication</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> target</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createNestInstance</span><span style="color:#24292E;">(instance)</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createAdapterProxy</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(target, httpServer)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> createNestInstance</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">instance</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(instance)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> createProxy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">		const</span><span style="color:#005CC5;"> proxy</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createExceptionProxy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Proxy</span><span style="color:#24292E;">(target, {</span></span>
<span class="line"><span style="color:#24292E;">			get: proxy,</span></span>
<span class="line"><span style="color:#24292E;">			set: proxy,</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	private</span><span style="color:#6F42C1;"> createExceptionProxy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">		return</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">receiver</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Record</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;, </span><span style="color:#E36209;">prop</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">			if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(prop </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> receiver)) {</span></span>
<span class="line"><span style="color:#D73A49;">				return</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#D73A49;">			if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFunction</span><span style="color:#24292E;">(receiver[prop])) {</span></span>
<span class="line"><span style="color:#6A737D;">				// 进行可能的错误捕获</span></span>
<span class="line"><span style="color:#D73A49;">				return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createExceptionZone</span><span style="color:#24292E;">(receiver, prop)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#6A737D;">			// 对于属性的访问直接放行</span></span>
<span class="line"><span style="color:#D73A49;">			return</span><span style="color:#24292E;"> receiver[prop]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,13)]))}const A=n(o,[["render",t]]);export{C as __pageData,A as default};
